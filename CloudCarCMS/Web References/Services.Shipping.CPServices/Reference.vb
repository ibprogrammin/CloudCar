'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
'
Namespace Services.Shipping.CPServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CanadaPostSoap", [Namespace]:="http://localhost:10981/Services")>  _
    Partial Public Class CanadaPost
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SetLanguageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllServiceTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetMerchantIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetFromAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetFromAddress1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetToAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetToAddress1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShippingItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShippingRatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShippingRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRateFromIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddShippingItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddShippingItem1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCPRatesTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDayOfWeekOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CloudCar.My.MySettings.Default.SMECommerceTemplate_Services_Shipping_CPServices_CanadaPost
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SetLanguageCompleted As SetLanguageCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllServiceTypesCompleted As getAllServiceTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event SetMerchantIDCompleted As SetMerchantIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SetFromAddressCompleted As SetFromAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event SetFromAddress1Completed As SetFromAddress1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetToAddressCompleted As SetToAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event SetToAddress1Completed As SetToAddress1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetShippingItemsCompleted As GetShippingItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShippingRatesCompleted As GetShippingRatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShippingRateCompleted As GetShippingRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRateFromIDCompleted As GetRateFromIDCompletedEventHandler
        
        '''<remarks/>
        Public Event AddShippingItemCompleted As AddShippingItemCompletedEventHandler
        
        '''<remarks/>
        Public Event AddShippingItem1Completed As AddShippingItem1CompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitRequestCompleted As SubmitRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCPRatesTableCompleted As GetCPRatesTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductNameCompleted As GetProductNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDayOfWeekCompleted As GetDayOfWeekCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/SetLanguage", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetLanguage(ByVal language As Language)
            Me.Invoke("SetLanguage", New Object() {language})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetLanguageAsync(ByVal language As Language)
            Me.SetLanguageAsync(language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetLanguageAsync(ByVal language As Language, ByVal userState As Object)
            If (Me.SetLanguageOperationCompleted Is Nothing) Then
                Me.SetLanguageOperationCompleted = AddressOf Me.OnSetLanguageOperationCompleted
            End If
            Me.InvokeAsync("SetLanguage", New Object() {language}, Me.SetLanguageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetLanguageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetLanguageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetLanguageCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/getAllServiceTypes", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllServiceTypes() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getAllServiceTypes", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllServiceTypesAsync()
            Me.getAllServiceTypesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllServiceTypesAsync(ByVal userState As Object)
            If (Me.getAllServiceTypesOperationCompleted Is Nothing) Then
                Me.getAllServiceTypesOperationCompleted = AddressOf Me.OngetAllServiceTypesOperationCompleted
            End If
            Me.InvokeAsync("getAllServiceTypes", New Object(-1) {}, Me.getAllServiceTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllServiceTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllServiceTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllServiceTypesCompleted(Me, New getAllServiceTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/SetMerchantID", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetMerchantID(ByVal id As String)
            Me.Invoke("SetMerchantID", New Object() {id})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMerchantIDAsync(ByVal id As String)
            Me.SetMerchantIDAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetMerchantIDAsync(ByVal id As String, ByVal userState As Object)
            If (Me.SetMerchantIDOperationCompleted Is Nothing) Then
                Me.SetMerchantIDOperationCompleted = AddressOf Me.OnSetMerchantIDOperationCompleted
            End If
            Me.InvokeAsync("SetMerchantID", New Object() {id}, Me.SetMerchantIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetMerchantIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetMerchantIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetMerchantIDCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/SimpleFromAddress", RequestElementName:="SimpleFromAddress", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="SimpleFromAddressResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Sub SetFromAddress(ByVal postalcode As String)
            Me.Invoke("SetFromAddress", New Object() {postalcode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFromAddressAsync(ByVal postalcode As String)
            Me.SetFromAddressAsync(postalcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFromAddressAsync(ByVal postalcode As String, ByVal userState As Object)
            If (Me.SetFromAddressOperationCompleted Is Nothing) Then
                Me.SetFromAddressOperationCompleted = AddressOf Me.OnSetFromAddressOperationCompleted
            End If
            Me.InvokeAsync("SetFromAddress", New Object() {postalcode}, Me.SetFromAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetFromAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetFromAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetFromAddressCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="SetFromAddress1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/FullFromAddress", RequestElementName:="FullFromAddress", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="FullFromAddressResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Sub SetFromAddress(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String)
            Me.Invoke("SetFromAddress1", New Object() {city, provorstate, postalcode, country})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFromAddress1Async(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String)
            Me.SetFromAddress1Async(city, provorstate, postalcode, country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFromAddress1Async(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String, ByVal userState As Object)
            If (Me.SetFromAddress1OperationCompleted Is Nothing) Then
                Me.SetFromAddress1OperationCompleted = AddressOf Me.OnSetFromAddress1OperationCompleted
            End If
            Me.InvokeAsync("SetFromAddress1", New Object() {city, provorstate, postalcode, country}, Me.SetFromAddress1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetFromAddress1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetFromAddress1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetFromAddress1Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/SimpleToAddress", RequestElementName:="SimpleToAddress", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="SimpleToAddressResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Sub SetToAddress(ByVal postalcode As String)
            Me.Invoke("SetToAddress", New Object() {postalcode})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetToAddressAsync(ByVal postalcode As String)
            Me.SetToAddressAsync(postalcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetToAddressAsync(ByVal postalcode As String, ByVal userState As Object)
            If (Me.SetToAddressOperationCompleted Is Nothing) Then
                Me.SetToAddressOperationCompleted = AddressOf Me.OnSetToAddressOperationCompleted
            End If
            Me.InvokeAsync("SetToAddress", New Object() {postalcode}, Me.SetToAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetToAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetToAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetToAddressCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="SetToAddress1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/FullToAddress", RequestElementName:="FullToAddress", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="FullToAddressResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Sub SetToAddress(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String)
            Me.Invoke("SetToAddress1", New Object() {city, provorstate, postalcode, country})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetToAddress1Async(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String)
            Me.SetToAddress1Async(city, provorstate, postalcode, country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetToAddress1Async(ByVal city As String, ByVal provorstate As String, ByVal postalcode As String, ByVal country As String, ByVal userState As Object)
            If (Me.SetToAddress1OperationCompleted Is Nothing) Then
                Me.SetToAddress1OperationCompleted = AddressOf Me.OnSetToAddress1OperationCompleted
            End If
            Me.InvokeAsync("SetToAddress1", New Object() {city, provorstate, postalcode, country}, Me.SetToAddress1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetToAddress1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetToAddress1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetToAddress1Completed(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetShippingItems", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShippingItems() As <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ShippingItem()
            Dim results() As Object = Me.Invoke("GetShippingItems", New Object(-1) {})
            Return CType(results(0),ShippingItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShippingItemsAsync()
            Me.GetShippingItemsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShippingItemsAsync(ByVal userState As Object)
            If (Me.GetShippingItemsOperationCompleted Is Nothing) Then
                Me.GetShippingItemsOperationCompleted = AddressOf Me.OnGetShippingItemsOperationCompleted
            End If
            Me.InvokeAsync("GetShippingItems", New Object(-1) {}, Me.GetShippingItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShippingItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShippingItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShippingItemsCompleted(Me, New GetShippingItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetShippingRates", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShippingRates() As ShippingRate()
            Dim results() As Object = Me.Invoke("GetShippingRates", New Object(-1) {})
            Return CType(results(0),ShippingRate())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShippingRatesAsync()
            Me.GetShippingRatesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShippingRatesAsync(ByVal userState As Object)
            If (Me.GetShippingRatesOperationCompleted Is Nothing) Then
                Me.GetShippingRatesOperationCompleted = AddressOf Me.OnGetShippingRatesOperationCompleted
            End If
            Me.InvokeAsync("GetShippingRates", New Object(-1) {}, Me.GetShippingRatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShippingRatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShippingRatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShippingRatesCompleted(Me, New GetShippingRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetShippingRate", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShippingRate(ByVal index As Integer) As ShippingRate
            Dim results() As Object = Me.Invoke("GetShippingRate", New Object() {index})
            Return CType(results(0),ShippingRate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShippingRateAsync(ByVal index As Integer)
            Me.GetShippingRateAsync(index, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShippingRateAsync(ByVal index As Integer, ByVal userState As Object)
            If (Me.GetShippingRateOperationCompleted Is Nothing) Then
                Me.GetShippingRateOperationCompleted = AddressOf Me.OnGetShippingRateOperationCompleted
            End If
            Me.InvokeAsync("GetShippingRate", New Object() {index}, Me.GetShippingRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShippingRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShippingRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShippingRateCompleted(Me, New GetShippingRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetRateFromID", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRateFromID(ByVal id As Integer) As ShippingRate
            Dim results() As Object = Me.Invoke("GetRateFromID", New Object() {id})
            Return CType(results(0),ShippingRate)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRateFromIDAsync(ByVal id As Integer)
            Me.GetRateFromIDAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRateFromIDAsync(ByVal id As Integer, ByVal userState As Object)
            If (Me.GetRateFromIDOperationCompleted Is Nothing) Then
                Me.GetRateFromIDOperationCompleted = AddressOf Me.OnGetRateFromIDOperationCompleted
            End If
            Me.InvokeAsync("GetRateFromID", New Object() {id}, Me.GetRateFromIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRateFromIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRateFromIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRateFromIDCompleted(Me, New GetRateFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/AddShippingItemPackaged", RequestElementName:="AddShippingItemPackaged", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="AddShippingItemPackagedResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function AddShippingItem(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String, ByVal readyToShip As Boolean) As <System.Xml.Serialization.XmlElementAttribute("AddShippingItemPackagedResult")> Integer
            Dim results() As Object = Me.Invoke("AddShippingItem", New Object() {quantity, weight, length, width, height, description, readyToShip})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddShippingItemAsync(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String, ByVal readyToShip As Boolean)
            Me.AddShippingItemAsync(quantity, weight, length, width, height, description, readyToShip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddShippingItemAsync(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String, ByVal readyToShip As Boolean, ByVal userState As Object)
            If (Me.AddShippingItemOperationCompleted Is Nothing) Then
                Me.AddShippingItemOperationCompleted = AddressOf Me.OnAddShippingItemOperationCompleted
            End If
            Me.InvokeAsync("AddShippingItem", New Object() {quantity, weight, length, width, height, description, readyToShip}, Me.AddShippingItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddShippingItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddShippingItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddShippingItemCompleted(Me, New AddShippingItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.WebMethodAttribute(MessageName:="AddShippingItem1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/AddShippingItem", RequestElementName:="AddShippingItem", RequestNamespace:="http://localhost:10981/Services", ResponseElementName:="AddShippingItemResponse", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function AddShippingItem(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String) As <System.Xml.Serialization.XmlElementAttribute("AddShippingItemResult")> Integer
            Dim results() As Object = Me.Invoke("AddShippingItem1", New Object() {quantity, weight, length, width, height, description})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddShippingItem1Async(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String)
            Me.AddShippingItem1Async(quantity, weight, length, width, height, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddShippingItem1Async(ByVal quantity As Integer, ByVal weight As Double, ByVal length As Double, ByVal width As Double, ByVal height As Double, ByVal description As String, ByVal userState As Object)
            If (Me.AddShippingItem1OperationCompleted Is Nothing) Then
                Me.AddShippingItem1OperationCompleted = AddressOf Me.OnAddShippingItem1OperationCompleted
            End If
            Me.InvokeAsync("AddShippingItem1", New Object() {quantity, weight, length, width, height, description}, Me.AddShippingItem1OperationCompleted, userState)
        End Sub
        
        Private Sub OnAddShippingItem1OperationCompleted(ByVal arg As Object)
            If (Not (Me.AddShippingItem1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddShippingItem1Completed(Me, New AddShippingItem1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/SubmitRequest", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitRequest() As String
            Dim results() As Object = Me.Invoke("SubmitRequest", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync()
            Me.SubmitRequestAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync(ByVal userState As Object)
            If (Me.SubmitRequestOperationCompleted Is Nothing) Then
                Me.SubmitRequestOperationCompleted = AddressOf Me.OnSubmitRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitRequest", New Object(-1) {}, Me.SubmitRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitRequestCompleted(Me, New SubmitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetCPRatesTable", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCPRatesTable() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetCPRatesTable", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCPRatesTableAsync()
            Me.GetCPRatesTableAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCPRatesTableAsync(ByVal userState As Object)
            If (Me.GetCPRatesTableOperationCompleted Is Nothing) Then
                Me.GetCPRatesTableOperationCompleted = AddressOf Me.OnGetCPRatesTableOperationCompleted
            End If
            Me.InvokeAsync("GetCPRatesTable", New Object(-1) {}, Me.GetCPRatesTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCPRatesTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCPRatesTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCPRatesTableCompleted(Me, New GetCPRatesTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetProductName", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductName(ByVal code As Integer) As String
            Dim results() As Object = Me.Invoke("GetProductName", New Object() {code})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductNameAsync(ByVal code As Integer)
            Me.GetProductNameAsync(code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductNameAsync(ByVal code As Integer, ByVal userState As Object)
            If (Me.GetProductNameOperationCompleted Is Nothing) Then
                Me.GetProductNameOperationCompleted = AddressOf Me.OnGetProductNameOperationCompleted
            End If
            Me.InvokeAsync("GetProductName", New Object() {code}, Me.GetProductNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductNameCompleted(Me, New GetProductNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:10981/Services/GetDayOfWeek", RequestNamespace:="http://localhost:10981/Services", ResponseNamespace:="http://localhost:10981/Services", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDayOfWeek(ByVal day As Integer) As String
            Dim results() As Object = Me.Invoke("GetDayOfWeek", New Object() {day})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDayOfWeekAsync(ByVal day As Integer)
            Me.GetDayOfWeekAsync(day, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDayOfWeekAsync(ByVal day As Integer, ByVal userState As Object)
            If (Me.GetDayOfWeekOperationCompleted Is Nothing) Then
                Me.GetDayOfWeekOperationCompleted = AddressOf Me.OnGetDayOfWeekOperationCompleted
            End If
            Me.InvokeAsync("GetDayOfWeek", New Object() {day}, Me.GetDayOfWeekOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDayOfWeekOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDayOfWeekCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDayOfWeekCompleted(Me, New GetDayOfWeekCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost:10981/Services")>  _
    Public Enum Language
        
        '''<remarks/>
        English
        
        '''<remarks/>
        French
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost:10981/Services")>  _
    Partial Public Class ShippingItem
        
        Private quantityField As Integer
        
        Private weightField As Double
        
        Private lengthField As Double
        
        Private widthField As Double
        
        Private heightField As Double
        
        Private descriptionField As String
        
        Private priceField As Double
        
        Private readyToShipField As Boolean
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Weight() As Double
            Get
                Return Me.weightField
            End Get
            Set
                Me.weightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Length() As Double
            Get
                Return Me.lengthField
            End Get
            Set
                Me.lengthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Width() As Double
            Get
                Return Me.widthField
            End Get
            Set
                Me.widthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Height() As Double
            Get
                Return Me.heightField
            End Get
            Set
                Me.heightField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As Double
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReadyToShip() As Boolean
            Get
                Return Me.readyToShipField
            End Get
            Set
                Me.readyToShipField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost:10981/Services")>  _
    Partial Public Class ShippingRate
        
        Private idField As Integer
        
        Private sequenceField As Integer
        
        Private nameField As String
        
        Private rateField As Double
        
        Private shippingDateField As String
        
        Private deliveryDateField As String
        
        Private nextDayAMField As Boolean
        
        Private packingIDField As String
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sequence() As Integer
            Get
                Return Me.sequenceField
            End Get
            Set
                Me.sequenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rate() As Double
            Get
                Return Me.rateField
            End Get
            Set
                Me.rateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShippingDate() As String
            Get
                Return Me.shippingDateField
            End Get
            Set
                Me.shippingDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DeliveryDate() As String
            Get
                Return Me.deliveryDateField
            End Get
            Set
                Me.deliveryDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NextDayAM() As Boolean
            Get
                Return Me.nextDayAMField
            End Get
            Set
                Me.nextDayAMField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PackingID() As String
            Get
                Return Me.packingIDField
            End Get
            Set
                Me.packingIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetLanguageCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getAllServiceTypesCompletedEventHandler(ByVal sender As Object, ByVal e As getAllServiceTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllServiceTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetMerchantIDCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetFromAddressCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetFromAddress1CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetToAddressCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SetToAddress1CompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetShippingItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetShippingItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShippingItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShippingItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShippingItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetShippingRatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetShippingRatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShippingRatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShippingRate()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShippingRate())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetShippingRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetShippingRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShippingRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShippingRate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShippingRate)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetRateFromIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetRateFromIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRateFromIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ShippingRate
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ShippingRate)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AddShippingItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddShippingItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddShippingItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AddShippingItem1CompletedEventHandler(ByVal sender As Object, ByVal e As AddShippingItem1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddShippingItem1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SubmitRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetCPRatesTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetCPRatesTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCPRatesTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetProductNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetDayOfWeekCompletedEventHandler(ByVal sender As Object, ByVal e As GetDayOfWeekCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDayOfWeekCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
