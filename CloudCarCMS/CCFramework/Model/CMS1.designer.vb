'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace CCFramework.Model
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CloudCarDb")>  _
	Partial Public Class ContentDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertFaq(instance As Faq)
    End Sub
    Partial Private Sub UpdateFaq(instance As Faq)
    End Sub
    Partial Private Sub DeleteFaq(instance As Faq)
    End Sub
    Partial Private Sub InsertPicture(instance As Picture)
    End Sub
    Partial Private Sub UpdatePicture(instance As Picture)
    End Sub
    Partial Private Sub DeletePicture(instance As Picture)
    End Sub
    Partial Private Sub InsertLink(instance As Link)
    End Sub
    Partial Private Sub UpdateLink(instance As Link)
    End Sub
    Partial Private Sub DeleteLink(instance As Link)
    End Sub
    Partial Private Sub InsertMenu(instance As Menu)
    End Sub
    Partial Private Sub UpdateMenu(instance As Menu)
    End Sub
    Partial Private Sub DeleteMenu(instance As Menu)
    End Sub
    Partial Private Sub InsertTestimonial(instance As Testimonial)
    End Sub
    Partial Private Sub UpdateTestimonial(instance As Testimonial)
    End Sub
    Partial Private Sub DeleteTestimonial(instance As Testimonial)
    End Sub
    Partial Private Sub InsertImageRotator(instance As ImageRotator)
    End Sub
    Partial Private Sub UpdateImageRotator(instance As ImageRotator)
    End Sub
    Partial Private Sub DeleteImageRotator(instance As ImageRotator)
    End Sub
    Partial Private Sub InsertSubscription(instance As Subscription)
    End Sub
    Partial Private Sub UpdateSubscription(instance As Subscription)
    End Sub
    Partial Private Sub DeleteSubscription(instance As Subscription)
    End Sub
    Partial Private Sub InsertSalesInquiry(instance As SalesInquiry)
    End Sub
    Partial Private Sub UpdateSalesInquiry(instance As SalesInquiry)
    End Sub
    Partial Private Sub DeleteSalesInquiry(instance As SalesInquiry)
    End Sub
    Partial Private Sub InsertFileUpload(instance As FileUpload)
    End Sub
    Partial Private Sub UpdateFileUpload(instance As FileUpload)
    End Sub
    Partial Private Sub DeleteFileUpload(instance As FileUpload)
    End Sub
    Partial Private Sub InsertMenuItem(instance As MenuItem)
    End Sub
    Partial Private Sub UpdateMenuItem(instance As MenuItem)
    End Sub
    Partial Private Sub DeleteMenuItem(instance As MenuItem)
    End Sub
    Partial Private Sub InsertImageGallery(instance As ImageGallery)
    End Sub
    Partial Private Sub UpdateImageGallery(instance As ImageGallery)
    End Sub
    Partial Private Sub DeleteImageGallery(instance As ImageGallery)
    End Sub
    Partial Private Sub InsertImageGalleryItem(instance As ImageGalleryItem)
    End Sub
    Partial Private Sub UpdateImageGalleryItem(instance As ImageGalleryItem)
    End Sub
    Partial Private Sub DeleteImageGalleryItem(instance As ImageGalleryItem)
    End Sub
    Partial Private Sub InsertSetting(instance As Setting)
    End Sub
    Partial Private Sub UpdateSetting(instance As Setting)
    End Sub
    Partial Private Sub DeleteSetting(instance As Setting)
    End Sub
    Partial Private Sub InsertVideo(instance As Video)
    End Sub
    Partial Private Sub UpdateVideo(instance As Video)
    End Sub
    Partial Private Sub DeleteVideo(instance As Video)
    End Sub
    Partial Private Sub InsertCareer(instance As Career)
    End Sub
    Partial Private Sub UpdateCareer(instance As Career)
    End Sub
    Partial Private Sub DeleteCareer(instance As Career)
    End Sub
    Partial Private Sub InsertFormData(instance As FormData)
    End Sub
    Partial Private Sub UpdateFormData(instance As FormData)
    End Sub
    Partial Private Sub DeleteFormData(instance As FormData)
    End Sub
    Partial Private Sub InsertEvent(instance As [Event])
    End Sub
    Partial Private Sub UpdateEvent(instance As [Event])
    End Sub
    Partial Private Sub DeleteEvent(instance As [Event])
    End Sub
    Partial Private Sub InsertNew(instance As [New])
    End Sub
    Partial Private Sub UpdateNew(instance As [New])
    End Sub
    Partial Private Sub DeleteNew(instance As [New])
    End Sub
    Partial Private Sub InsertContentPage(instance As ContentPage)
    End Sub
    Partial Private Sub UpdateContentPage(instance As ContentPage)
    End Sub
    Partial Private Sub DeleteContentPage(instance As ContentPage)
    End Sub
    Partial Private Sub InsertCallToAction(instance As CallToAction)
    End Sub
    Partial Private Sub UpdateCallToAction(instance As CallToAction)
    End Sub
    Partial Private Sub DeleteCallToAction(instance As CallToAction)
    End Sub
    Partial Private Sub InsertFormField(instance As FormField)
    End Sub
    Partial Private Sub UpdateFormField(instance As FormField)
    End Sub
    Partial Private Sub DeleteFormField(instance As FormField)
    End Sub
    Partial Private Sub InsertForm(instance As Form)
    End Sub
    Partial Private Sub UpdateForm(instance As Form)
    End Sub
    Partial Private Sub DeleteForm(instance As Form)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MainConnectionString").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Faqs() As System.Data.Linq.Table(Of Faq)
			Get
				Return Me.GetTable(Of Faq)
			End Get
		End Property
		
		Public ReadOnly Property vw_aspnet_Users() As System.Data.Linq.Table(Of vw_aspnet_User)
			Get
				Return Me.GetTable(Of vw_aspnet_User)
			End Get
		End Property
		
		Public ReadOnly Property Pictures() As System.Data.Linq.Table(Of Picture)
			Get
				Return Me.GetTable(Of Picture)
			End Get
		End Property
		
		Public ReadOnly Property Links() As System.Data.Linq.Table(Of Link)
			Get
				Return Me.GetTable(Of Link)
			End Get
		End Property
		
		Public ReadOnly Property ScheduleFulls() As System.Data.Linq.Table(Of ScheduleFull)
			Get
				Return Me.GetTable(Of ScheduleFull)
			End Get
		End Property
		
		Public ReadOnly Property Menus() As System.Data.Linq.Table(Of Menu)
			Get
				Return Me.GetTable(Of Menu)
			End Get
		End Property
		
		Public ReadOnly Property Testimonials() As System.Data.Linq.Table(Of Testimonial)
			Get
				Return Me.GetTable(Of Testimonial)
			End Get
		End Property
		
		Public ReadOnly Property ImageRotators() As System.Data.Linq.Table(Of ImageRotator)
			Get
				Return Me.GetTable(Of ImageRotator)
			End Get
		End Property
		
		Public ReadOnly Property Subscriptions() As System.Data.Linq.Table(Of Subscription)
			Get
				Return Me.GetTable(Of Subscription)
			End Get
		End Property
		
		Public ReadOnly Property SalesInquiries() As System.Data.Linq.Table(Of SalesInquiry)
			Get
				Return Me.GetTable(Of SalesInquiry)
			End Get
		End Property
		
		Public ReadOnly Property FileUploads() As System.Data.Linq.Table(Of FileUpload)
			Get
				Return Me.GetTable(Of FileUpload)
			End Get
		End Property
		
		Public ReadOnly Property MenuItems() As System.Data.Linq.Table(Of MenuItem)
			Get
				Return Me.GetTable(Of MenuItem)
			End Get
		End Property
		
		Public ReadOnly Property ImageGalleries() As System.Data.Linq.Table(Of ImageGallery)
			Get
				Return Me.GetTable(Of ImageGallery)
			End Get
		End Property
		
		Public ReadOnly Property ImageGalleryItems() As System.Data.Linq.Table(Of ImageGalleryItem)
			Get
				Return Me.GetTable(Of ImageGalleryItem)
			End Get
		End Property
		
		Public ReadOnly Property Settings() As System.Data.Linq.Table(Of Setting)
			Get
				Return Me.GetTable(Of Setting)
			End Get
		End Property
		
		Public ReadOnly Property Videos() As System.Data.Linq.Table(Of Video)
			Get
				Return Me.GetTable(Of Video)
			End Get
		End Property
		
		Public ReadOnly Property Careers() As System.Data.Linq.Table(Of Career)
			Get
				Return Me.GetTable(Of Career)
			End Get
		End Property
		
		Public ReadOnly Property FormDatas() As System.Data.Linq.Table(Of FormData)
			Get
				Return Me.GetTable(Of FormData)
			End Get
		End Property
		
		Public ReadOnly Property Events() As System.Data.Linq.Table(Of [Event])
			Get
				Return Me.GetTable(Of [Event])
			End Get
		End Property
		
		Public ReadOnly Property News() As System.Data.Linq.Table(Of [New])
			Get
				Return Me.GetTable(Of [New])
			End Get
		End Property
		
		Public ReadOnly Property ContentPages() As System.Data.Linq.Table(Of ContentPage)
			Get
				Return Me.GetTable(Of ContentPage)
			End Get
		End Property
		
		Public ReadOnly Property CallToActions() As System.Data.Linq.Table(Of CallToAction)
			Get
				Return Me.GetTable(Of CallToAction)
			End Get
		End Property
		
		Public ReadOnly Property FormFields() As System.Data.Linq.Table(Of FormField)
			Get
				Return Me.GetTable(Of FormField)
			End Get
		End Property
		
		Public ReadOnly Property Forms() As System.Data.Linq.Table(Of Form)
			Get
				Return Me.GetTable(Of Form)
			End Get
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Faq")>  _
	Partial Public Class Faq
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _FaqID As Integer
		
		Private _Question As String
		
		Private _Answer As String
		
		Private _OrderNumber As System.Nullable(Of Integer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFaqIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFaqIDChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    Partial Private Sub OnOrderNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderNumberChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaqID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property FaqID() As Integer
			Get
				Return Me._FaqID
			End Get
			Set
				If ((Me._FaqID = value)  _
							= false) Then
					Me.OnFaqIDChanging(value)
					Me.SendPropertyChanging
					Me._FaqID = value
					Me.SendPropertyChanged("FaqID")
					Me.OnFaqIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="NVarChar(256)")>  _
		Public Property Question() As String
			Get
				Return Me._Question
			End Get
			Set
				If (String.Equals(Me._Question, value) = false) Then
					Me.OnQuestionChanging(value)
					Me.SendPropertyChanging
					Me._Question = value
					Me.SendPropertyChanged("Question")
					Me.OnQuestionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Answer() As String
			Get
				Return Me._Answer
			End Get
			Set
				If (String.Equals(Me._Answer, value) = false) Then
					Me.OnAnswerChanging(value)
					Me.SendPropertyChanging
					Me._Answer = value
					Me.SendPropertyChanged("Answer")
					Me.OnAnswerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderNumber", DbType:="Int")>  _
		Public Property OrderNumber() As System.Nullable(Of Integer)
			Get
				Return Me._OrderNumber
			End Get
			Set
				If (Me._OrderNumber.Equals(value) = false) Then
					Me.OnOrderNumberChanging(value)
					Me.SendPropertyChanging
					Me._OrderNumber = value
					Me.SendPropertyChanged("OrderNumber")
					Me.OnOrderNumberChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vw_aspnet_Users")>  _
	Partial Public Class vw_aspnet_User
		
		Private _ApplicationId As System.Guid
		
		Private _UserId As System.Guid
		
		Private _UserName As String
		
		Private _LoweredUserName As String
		
		Private _MobileAlias As String
		
		Private _IsAnonymous As Boolean
		
		Private _LastActivityDate As Date
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property ApplicationId() As System.Guid
			Get
				Return Me._ApplicationId
			End Get
			Set
				If ((Me._ApplicationId = value)  _
							= false) Then
					Me._ApplicationId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property UserId() As System.Guid
			Get
				Return Me._UserId
			End Get
			Set
				If ((Me._UserId = value)  _
							= false) Then
					Me._UserId = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property UserName() As String
			Get
				Return Me._UserName
			End Get
			Set
				If (String.Equals(Me._UserName, value) = false) Then
					Me._UserName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property LoweredUserName() As String
			Get
				Return Me._LoweredUserName
			End Get
			Set
				If (String.Equals(Me._LoweredUserName, value) = false) Then
					Me._LoweredUserName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
		Public Property MobileAlias() As String
			Get
				Return Me._MobileAlias
			End Get
			Set
				If (String.Equals(Me._MobileAlias, value) = false) Then
					Me._MobileAlias = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
		Public Property IsAnonymous() As Boolean
			Get
				Return Me._IsAnonymous
			End Get
			Set
				If ((Me._IsAnonymous = value)  _
							= false) Then
					Me._IsAnonymous = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
		Public Property LastActivityDate() As Date
			Get
				Return Me._LastActivityDate
			End Get
			Set
				If ((Me._LastActivityDate = value)  _
							= false) Then
					Me._LastActivityDate = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Picture")>  _
	Partial Public Class Picture
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _PictureID As Integer
		
		Private _PictureData As System.Data.Linq.Binary
		
		Private _PictureFileName As String
		
		Private _PictureContentType As String
		
		Private _PictureContentLength As Integer
		
		Private _Links As EntitySet(Of Link)
		
		Private _Testimonials As EntitySet(Of Testimonial)
		
		Private _ImageRotators As EntitySet(Of ImageRotator)
		
		Private _ImageGalleryItems As EntitySet(Of ImageGalleryItem)
		
		Private _Events As EntitySet(Of [Event])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPictureIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPictureIDChanged()
    End Sub
    Partial Private Sub OnPictureDataChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPictureDataChanged()
    End Sub
    Partial Private Sub OnPictureFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnPictureFileNameChanged()
    End Sub
    Partial Private Sub OnPictureContentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPictureContentTypeChanged()
    End Sub
    Partial Private Sub OnPictureContentLengthChanging(value As Integer)
    End Sub
    Partial Private Sub OnPictureContentLengthChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Links = New EntitySet(Of Link)(AddressOf Me.attach_Links, AddressOf Me.detach_Links)
			Me._Testimonials = New EntitySet(Of Testimonial)(AddressOf Me.attach_Testimonials, AddressOf Me.detach_Testimonials)
			Me._ImageRotators = New EntitySet(Of ImageRotator)(AddressOf Me.attach_ImageRotators, AddressOf Me.detach_ImageRotators)
			Me._ImageGalleryItems = New EntitySet(Of ImageGalleryItem)(AddressOf Me.attach_ImageGalleryItems, AddressOf Me.detach_ImageGalleryItems)
			Me._Events = New EntitySet(Of [Event])(AddressOf Me.attach_Events, AddressOf Me.detach_Events)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property PictureID() As Integer
			Get
				Return Me._PictureID
			End Get
			Set
				If ((Me._PictureID = value)  _
							= false) Then
					Me.OnPictureIDChanging(value)
					Me.SendPropertyChanging
					Me._PictureID = value
					Me.SendPropertyChanged("PictureID")
					Me.OnPictureIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureData", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PictureData() As System.Data.Linq.Binary
			Get
				Return Me._PictureData
			End Get
			Set
				If (Object.Equals(Me._PictureData, value) = false) Then
					Me.OnPictureDataChanging(value)
					Me.SendPropertyChanging
					Me._PictureData = value
					Me.SendPropertyChanged("PictureData")
					Me.OnPictureDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureFileName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property PictureFileName() As String
			Get
				Return Me._PictureFileName
			End Get
			Set
				If (String.Equals(Me._PictureFileName, value) = false) Then
					Me.OnPictureFileNameChanging(value)
					Me.SendPropertyChanging
					Me._PictureFileName = value
					Me.SendPropertyChanged("PictureFileName")
					Me.OnPictureFileNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureContentType", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property PictureContentType() As String
			Get
				Return Me._PictureContentType
			End Get
			Set
				If (String.Equals(Me._PictureContentType, value) = false) Then
					Me.OnPictureContentTypeChanging(value)
					Me.SendPropertyChanging
					Me._PictureContentType = value
					Me.SendPropertyChanged("PictureContentType")
					Me.OnPictureContentTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureContentLength", DbType:="Int NOT NULL")>  _
		Public Property PictureContentLength() As Integer
			Get
				Return Me._PictureContentLength
			End Get
			Set
				If ((Me._PictureContentLength = value)  _
							= false) Then
					Me.OnPictureContentLengthChanging(value)
					Me.SendPropertyChanging
					Me._PictureContentLength = value
					Me.SendPropertyChanged("PictureContentLength")
					Me.OnPictureContentLengthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Link", Storage:="_Links", ThisKey:="PictureID", OtherKey:="PictureID")>  _
		Public Property Links() As EntitySet(Of Link)
			Get
				Return Me._Links
			End Get
			Set
				Me._Links.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Testimonial", Storage:="_Testimonials", ThisKey:="PictureID", OtherKey:="ImageID")>  _
		Public Property Testimonials() As EntitySet(Of Testimonial)
			Get
				Return Me._Testimonials
			End Get
			Set
				Me._Testimonials.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_ImageRotator", Storage:="_ImageRotators", ThisKey:="PictureID", OtherKey:="imageID")>  _
		Public Property ImageRotators() As EntitySet(Of ImageRotator)
			Get
				Return Me._ImageRotators
			End Get
			Set
				Me._ImageRotators.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_ImageGalleryItem", Storage:="_ImageGalleryItems", ThisKey:="PictureID", OtherKey:="ImageID")>  _
		Public Property ImageGalleryItems() As EntitySet(Of ImageGalleryItem)
			Get
				Return Me._ImageGalleryItems
			End Get
			Set
				Me._ImageGalleryItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Event", Storage:="_Events", ThisKey:="PictureID", OtherKey:="ImageId")>  _
		Public Property Events() As EntitySet(Of [Event])
			Get
				Return Me._Events
			End Get
			Set
				Me._Events.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Links(ByVal entity As Link)
			Me.SendPropertyChanging
			entity.Picture = Me
		End Sub
		
		Private Sub detach_Links(ByVal entity As Link)
			Me.SendPropertyChanging
			entity.Picture = Nothing
		End Sub
		
		Private Sub attach_Testimonials(ByVal entity As Testimonial)
			Me.SendPropertyChanging
			entity.Picture = Me
		End Sub
		
		Private Sub detach_Testimonials(ByVal entity As Testimonial)
			Me.SendPropertyChanging
			entity.Picture = Nothing
		End Sub
		
		Private Sub attach_ImageRotators(ByVal entity As ImageRotator)
			Me.SendPropertyChanging
			entity.Picture = Me
		End Sub
		
		Private Sub detach_ImageRotators(ByVal entity As ImageRotator)
			Me.SendPropertyChanging
			entity.Picture = Nothing
		End Sub
		
		Private Sub attach_ImageGalleryItems(ByVal entity As ImageGalleryItem)
			Me.SendPropertyChanging
			entity.Picture = Me
		End Sub
		
		Private Sub detach_ImageGalleryItems(ByVal entity As ImageGalleryItem)
			Me.SendPropertyChanging
			entity.Picture = Nothing
		End Sub
		
		Private Sub attach_Events(ByVal entity As [Event])
			Me.SendPropertyChanging
			entity.Picture = Me
		End Sub
		
		Private Sub detach_Events(ByVal entity As [Event])
			Me.SendPropertyChanging
			entity.Picture = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Link")>  _
	Partial Public Class Link
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _LinksID As Integer
		
		Private _LinksTitle As String
		
		Private _LinkURL As String
		
		Private _LinkNotes As String
		
		Private _PictureID As System.Nullable(Of Integer)
		
		Private _Picture As EntityRef(Of Picture)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLinksIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLinksIDChanged()
    End Sub
    Partial Private Sub OnLinksTitleChanging(value As String)
    End Sub
    Partial Private Sub OnLinksTitleChanged()
    End Sub
    Partial Private Sub OnLinkURLChanging(value As String)
    End Sub
    Partial Private Sub OnLinkURLChanged()
    End Sub
    Partial Private Sub OnLinkNotesChanging(value As String)
    End Sub
    Partial Private Sub OnLinkNotesChanged()
    End Sub
    Partial Private Sub OnPictureIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPictureIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Picture = CType(Nothing, EntityRef(Of Picture))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinksID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property LinksID() As Integer
			Get
				Return Me._LinksID
			End Get
			Set
				If ((Me._LinksID = value)  _
							= false) Then
					Me.OnLinksIDChanging(value)
					Me.SendPropertyChanging
					Me._LinksID = value
					Me.SendPropertyChanged("LinksID")
					Me.OnLinksIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinksTitle", DbType:="NVarChar(256)")>  _
		Public Property LinksTitle() As String
			Get
				Return Me._LinksTitle
			End Get
			Set
				If (String.Equals(Me._LinksTitle, value) = false) Then
					Me.OnLinksTitleChanging(value)
					Me.SendPropertyChanging
					Me._LinksTitle = value
					Me.SendPropertyChanged("LinksTitle")
					Me.OnLinksTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(256)")>  _
		Public Property LinkURL() As String
			Get
				Return Me._LinkURL
			End Get
			Set
				If (String.Equals(Me._LinkURL, value) = false) Then
					Me.OnLinkURLChanging(value)
					Me.SendPropertyChanging
					Me._LinkURL = value
					Me.SendPropertyChanged("LinkURL")
					Me.OnLinkURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkNotes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property LinkNotes() As String
			Get
				Return Me._LinkNotes
			End Get
			Set
				If (String.Equals(Me._LinkNotes, value) = false) Then
					Me.OnLinkNotesChanging(value)
					Me.SendPropertyChanging
					Me._LinkNotes = value
					Me.SendPropertyChanged("LinkNotes")
					Me.OnLinkNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PictureID", DbType:="Int")>  _
		Public Property PictureID() As System.Nullable(Of Integer)
			Get
				Return Me._PictureID
			End Get
			Set
				If (Me._PictureID.Equals(value) = false) Then
					If Me._Picture.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnPictureIDChanging(value)
					Me.SendPropertyChanging
					Me._PictureID = value
					Me.SendPropertyChanged("PictureID")
					Me.OnPictureIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Link", Storage:="_Picture", ThisKey:="PictureID", OtherKey:="PictureID", IsForeignKey:=true)>  _
		Public Property Picture() As Picture
			Get
				Return Me._Picture.Entity
			End Get
			Set
				Dim previousValue As Picture = Me._Picture.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Picture.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Picture.Entity = Nothing
						previousValue.Links.Remove(Me)
					End If
					Me._Picture.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Links.Add(Me)
						Me._PictureID = value.PictureID
					Else
						Me._PictureID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Picture")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ScheduleFull")>  _
	Partial Public Class ScheduleFull
		
		Private _ProgramID As Integer
		
		Private _ProgramName As String
		
		Private _InstructorID As Integer
		
		Private _InstructorName As String
		
		Private _Monday As String
		
		Private _Tuesday As String
		
		Private _Wednesday As String
		
		Private _Thursday As String
		
		Private _Friday As String
		
		Private _Saturday As String
		
		Private _Sunday As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProgramID", DbType:="Int NOT NULL")>  _
		Public Property ProgramID() As Integer
			Get
				Return Me._ProgramID
			End Get
			Set
				If ((Me._ProgramID = value)  _
							= false) Then
					Me._ProgramID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProgramName", DbType:="NVarChar(256)")>  _
		Public Property ProgramName() As String
			Get
				Return Me._ProgramName
			End Get
			Set
				If (String.Equals(Me._ProgramName, value) = false) Then
					Me._ProgramName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="Int NOT NULL")>  _
		Public Property InstructorID() As Integer
			Get
				Return Me._InstructorID
			End Get
			Set
				If ((Me._InstructorID = value)  _
							= false) Then
					Me._InstructorID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorName", DbType:="NVarChar(256)")>  _
		Public Property InstructorName() As String
			Get
				Return Me._InstructorName
			End Get
			Set
				If (String.Equals(Me._InstructorName, value) = false) Then
					Me._InstructorName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monday", DbType:="VarChar(256)")>  _
		Public Property Monday() As String
			Get
				Return Me._Monday
			End Get
			Set
				If (String.Equals(Me._Monday, value) = false) Then
					Me._Monday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tuesday", DbType:="VarChar(256)")>  _
		Public Property Tuesday() As String
			Get
				Return Me._Tuesday
			End Get
			Set
				If (String.Equals(Me._Tuesday, value) = false) Then
					Me._Tuesday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wednesday", DbType:="VarChar(256)")>  _
		Public Property Wednesday() As String
			Get
				Return Me._Wednesday
			End Get
			Set
				If (String.Equals(Me._Wednesday, value) = false) Then
					Me._Wednesday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Thursday", DbType:="VarChar(256)")>  _
		Public Property Thursday() As String
			Get
				Return Me._Thursday
			End Get
			Set
				If (String.Equals(Me._Thursday, value) = false) Then
					Me._Thursday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Friday", DbType:="VarChar(256)")>  _
		Public Property Friday() As String
			Get
				Return Me._Friday
			End Get
			Set
				If (String.Equals(Me._Friday, value) = false) Then
					Me._Friday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Saturday", DbType:="VarChar(256)")>  _
		Public Property Saturday() As String
			Get
				Return Me._Saturday
			End Get
			Set
				If (String.Equals(Me._Saturday, value) = false) Then
					Me._Saturday = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sunday", DbType:="VarChar(256)")>  _
		Public Property Sunday() As String
			Get
				Return Me._Sunday
			End Get
			Set
				If (String.Equals(Me._Sunday, value) = false) Then
					Me._Sunday = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Menu")>  _
	Partial Public Class Menu
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _menu As String
		
		Private _ContentPages As EntitySet(Of ContentPage)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmenuChanging(value As String)
    End Sub
    Partial Private Sub OnmenuChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ContentPages = New EntitySet(Of ContentPage)(AddressOf Me.attach_ContentPages, AddressOf Me.detach_ContentPages)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menu", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property menu() As String
			Get
				Return Me._menu
			End Get
			Set
				If (String.Equals(Me._menu, value) = false) Then
					Me.OnmenuChanging(value)
					Me.SendPropertyChanging
					Me._menu = value
					Me.SendPropertyChanged("menu")
					Me.OnmenuChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menu_ContentPage", Storage:="_ContentPages", ThisKey:="id", OtherKey:="menuID")>  _
		Public Property ContentPages() As EntitySet(Of ContentPage)
			Get
				Return Me._ContentPages
			End Get
			Set
				Me._ContentPages.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ContentPages(ByVal entity As ContentPage)
			Me.SendPropertyChanging
			entity.Menu = Me
		End Sub
		
		Private Sub detach_ContentPages(ByVal entity As ContentPage)
			Me.SendPropertyChanging
			entity.Menu = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Testimonial")>  _
	Partial Public Class Testimonial
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Quote As String
		
		Private _Author As String
		
		Private _Approved As System.Nullable(Of Boolean)
		
		Private _ApprovedOn As System.Nullable(Of Date)
		
		Private _ApprovedBy As String
		
		Private _ImageID As System.Nullable(Of Integer)
		
		Private _Picture As EntityRef(Of Picture)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnQuoteChanging(value As String)
    End Sub
    Partial Private Sub OnQuoteChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnApprovedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovedOnChanged()
    End Sub
    Partial Private Sub OnApprovedByChanging(value As String)
    End Sub
    Partial Private Sub OnApprovedByChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Picture = CType(Nothing, EntityRef(Of Picture))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quote", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Quote() As String
			Get
				Return Me._Quote
			End Get
			Set
				If (String.Equals(Me._Quote, value) = false) Then
					Me.OnQuoteChanging(value)
					Me.SendPropertyChanging
					Me._Quote = value
					Me.SendPropertyChanged("Quote")
					Me.OnQuoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="NVarChar(256)")>  _
		Public Property Author() As String
			Get
				Return Me._Author
			End Get
			Set
				If (String.Equals(Me._Author, value) = false) Then
					Me.OnAuthorChanging(value)
					Me.SendPropertyChanging
					Me._Author = value
					Me.SendPropertyChanged("Author")
					Me.OnAuthorChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit")>  _
		Public Property Approved() As System.Nullable(Of Boolean)
			Get
				Return Me._Approved
			End Get
			Set
				If (Me._Approved.Equals(value) = false) Then
					Me.OnApprovedChanging(value)
					Me.SendPropertyChanging
					Me._Approved = value
					Me.SendPropertyChanged("Approved")
					Me.OnApprovedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedOn", DbType:="DateTime")>  _
		Public Property ApprovedOn() As System.Nullable(Of Date)
			Get
				Return Me._ApprovedOn
			End Get
			Set
				If (Me._ApprovedOn.Equals(value) = false) Then
					Me.OnApprovedOnChanging(value)
					Me.SendPropertyChanging
					Me._ApprovedOn = value
					Me.SendPropertyChanged("ApprovedOn")
					Me.OnApprovedOnChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovedBy", DbType:="NVarChar(256)")>  _
		Public Property ApprovedBy() As String
			Get
				Return Me._ApprovedBy
			End Get
			Set
				If (String.Equals(Me._ApprovedBy, value) = false) Then
					Me.OnApprovedByChanging(value)
					Me.SendPropertyChanging
					Me._ApprovedBy = value
					Me.SendPropertyChanged("ApprovedBy")
					Me.OnApprovedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int")>  _
		Public Property ImageID() As System.Nullable(Of Integer)
			Get
				Return Me._ImageID
			End Get
			Set
				If (Me._ImageID.Equals(value) = false) Then
					If Me._Picture.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnImageIDChanging(value)
					Me.SendPropertyChanging
					Me._ImageID = value
					Me.SendPropertyChanged("ImageID")
					Me.OnImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Testimonial", Storage:="_Picture", ThisKey:="ImageID", OtherKey:="PictureID", IsForeignKey:=true)>  _
		Public Property Picture() As Picture
			Get
				Return Me._Picture.Entity
			End Get
			Set
				Dim previousValue As Picture = Me._Picture.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Picture.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Picture.Entity = Nothing
						previousValue.Testimonials.Remove(Me)
					End If
					Me._Picture.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Testimonials.Add(Me)
						Me._ImageID = value.PictureID
					Else
						Me._ImageID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Picture")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImageRotator")>  _
	Partial Public Class ImageRotator
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _title As String
		
		Private _subheading As String
		
		Private _details As String
		
		Private _imageID As Integer
		
		Private _pageID As Integer
		
		Private _linkurl As String
		
		Private _order As Integer
		
		Private _Picture As EntityRef(Of Picture)
		
		Private _ContentPage As EntityRef(Of ContentPage)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OnsubheadingChanging(value As String)
    End Sub
    Partial Private Sub OnsubheadingChanged()
    End Sub
    Partial Private Sub OndetailsChanging(value As String)
    End Sub
    Partial Private Sub OndetailsChanged()
    End Sub
    Partial Private Sub OnimageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnimageIDChanged()
    End Sub
    Partial Private Sub OnpageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpageIDChanged()
    End Sub
    Partial Private Sub OnlinkurlChanging(value As String)
    End Sub
    Partial Private Sub OnlinkurlChanged()
    End Sub
    Partial Private Sub OnorderChanging(value As Integer)
    End Sub
    Partial Private Sub OnorderChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Picture = CType(Nothing, EntityRef(Of Picture))
			Me._ContentPage = CType(Nothing, EntityRef(Of ContentPage))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(255)")>  _
		Public Property title() As String
			Get
				Return Me._title
			End Get
			Set
				If (String.Equals(Me._title, value) = false) Then
					Me.OntitleChanging(value)
					Me.SendPropertyChanging
					Me._title = value
					Me.SendPropertyChanged("title")
					Me.OntitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subheading", DbType:="NVarChar(255)")>  _
		Public Property subheading() As String
			Get
				Return Me._subheading
			End Get
			Set
				If (String.Equals(Me._subheading, value) = false) Then
					Me.OnsubheadingChanging(value)
					Me.SendPropertyChanging
					Me._subheading = value
					Me.SendPropertyChanged("subheading")
					Me.OnsubheadingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property details() As String
			Get
				Return Me._details
			End Get
			Set
				If (String.Equals(Me._details, value) = false) Then
					Me.OndetailsChanging(value)
					Me.SendPropertyChanging
					Me._details = value
					Me.SendPropertyChanged("details")
					Me.OndetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imageID", DbType:="Int NOT NULL")>  _
		Public Property imageID() As Integer
			Get
				Return Me._imageID
			End Get
			Set
				If ((Me._imageID = value)  _
							= false) Then
					If Me._Picture.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnimageIDChanging(value)
					Me.SendPropertyChanging
					Me._imageID = value
					Me.SendPropertyChanged("imageID")
					Me.OnimageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pageID", DbType:="Int NOT NULL")>  _
		Public Property pageID() As Integer
			Get
				Return Me._pageID
			End Get
			Set
				If ((Me._pageID = value)  _
							= false) Then
					If Me._ContentPage.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnpageIDChanging(value)
					Me.SendPropertyChanging
					Me._pageID = value
					Me.SendPropertyChanged("pageID")
					Me.OnpageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_linkurl", DbType:="NVarChar(255)")>  _
		Public Property linkurl() As String
			Get
				Return Me._linkurl
			End Get
			Set
				If (String.Equals(Me._linkurl, value) = false) Then
					Me.OnlinkurlChanging(value)
					Me.SendPropertyChanging
					Me._linkurl = value
					Me.SendPropertyChanged("linkurl")
					Me.OnlinkurlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order", DbType:="Int NOT NULL")>  _
		Public Property [order]() As Integer
			Get
				Return Me._order
			End Get
			Set
				If ((Me._order = value)  _
							= false) Then
					Me.OnorderChanging(value)
					Me.SendPropertyChanging
					Me._order = value
					Me.SendPropertyChanged("[order]")
					Me.OnorderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_ImageRotator", Storage:="_Picture", ThisKey:="imageID", OtherKey:="PictureID", IsForeignKey:=true)>  _
		Public Property Picture() As Picture
			Get
				Return Me._Picture.Entity
			End Get
			Set
				Dim previousValue As Picture = Me._Picture.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Picture.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Picture.Entity = Nothing
						previousValue.ImageRotators.Remove(Me)
					End If
					Me._Picture.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ImageRotators.Add(Me)
						Me._imageID = value.PictureID
					Else
						Me._imageID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Picture")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContentPage_ImageRotator", Storage:="_ContentPage", ThisKey:="pageID", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property ContentPage() As ContentPage
			Get
				Return Me._ContentPage.Entity
			End Get
			Set
				Dim previousValue As ContentPage = Me._ContentPage.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ContentPage.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ContentPage.Entity = Nothing
						previousValue.ImageRotators.Remove(Me)
					End If
					Me._ContentPage.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ImageRotators.Add(Me)
						Me._pageID = value.id
					Else
						Me._pageID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ContentPage")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Subscription")>  _
	Partial Public Class Subscription
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Email As String
		
		Private _DateAdded As Date
		
		Private _OptOut As Boolean
		
		Private _Name As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnOptOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOptOutChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime NOT NULL")>  _
		Public Property DateAdded() As Date
			Get
				Return Me._DateAdded
			End Get
			Set
				If ((Me._DateAdded = value)  _
							= false) Then
					Me.OnDateAddedChanging(value)
					Me.SendPropertyChanging
					Me._DateAdded = value
					Me.SendPropertyChanged("DateAdded")
					Me.OnDateAddedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptOut", DbType:="Bit NOT NULL")>  _
		Public Property OptOut() As Boolean
			Get
				Return Me._OptOut
			End Get
			Set
				If ((Me._OptOut = value)  _
							= false) Then
					Me.OnOptOutChanging(value)
					Me.SendPropertyChanging
					Me._OptOut = value
					Me.SendPropertyChanged("OptOut")
					Me.OnOptOutChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SalesInquiry")>  _
	Partial Public Class SalesInquiry
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _name As String
		
		Private _email As String
		
		Private _inquiry As String
		
		Private _datesent As Date
		
		Private _checked As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OninquiryChanging(value As String)
    End Sub
    Partial Private Sub OninquiryChanged()
    End Sub
    Partial Private Sub OndatesentChanging(value As Date)
    End Sub
    Partial Private Sub OndatesentChanged()
    End Sub
    Partial Private Sub OncheckedChanging(value As Boolean)
    End Sub
    Partial Private Sub OncheckedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property name() As String
			Get
				Return Me._name
			End Get
			Set
				If (String.Equals(Me._name, value) = false) Then
					Me.OnnameChanging(value)
					Me.SendPropertyChanging
					Me._name = value
					Me.SendPropertyChanged("name")
					Me.OnnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property email() As String
			Get
				Return Me._email
			End Get
			Set
				If (String.Equals(Me._email, value) = false) Then
					Me.OnemailChanging(value)
					Me.SendPropertyChanging
					Me._email = value
					Me.SendPropertyChanged("email")
					Me.OnemailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inquiry", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property inquiry() As String
			Get
				Return Me._inquiry
			End Get
			Set
				If (String.Equals(Me._inquiry, value) = false) Then
					Me.OninquiryChanging(value)
					Me.SendPropertyChanging
					Me._inquiry = value
					Me.SendPropertyChanged("inquiry")
					Me.OninquiryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datesent", DbType:="DateTime NOT NULL")>  _
		Public Property datesent() As Date
			Get
				Return Me._datesent
			End Get
			Set
				If ((Me._datesent = value)  _
							= false) Then
					Me.OndatesentChanging(value)
					Me.SendPropertyChanging
					Me._datesent = value
					Me.SendPropertyChanged("datesent")
					Me.OndatesentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checked", DbType:="Bit NOT NULL")>  _
		Public Property checked() As Boolean
			Get
				Return Me._checked
			End Get
			Set
				If ((Me._checked = value)  _
							= false) Then
					Me.OncheckedChanging(value)
					Me.SendPropertyChanging
					Me._checked = value
					Me.SendPropertyChanged("checked")
					Me.OncheckedChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FileUpload")>  _
	Partial Public Class FileUpload
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Filename As String
		
		Private _Path As String
		
		Private _Title As String
		
		Private _Description As String
		
		Private _Enabled As Boolean
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFilenameChanging(value As String)
    End Sub
    Partial Private Sub OnFilenameChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Filename", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Filename() As String
			Get
				Return Me._Filename
			End Get
			Set
				If (String.Equals(Me._Filename, value) = false) Then
					Me.OnFilenameChanging(value)
					Me.SendPropertyChanging
					Me._Filename = value
					Me.SendPropertyChanged("Filename")
					Me.OnFilenameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Path() As String
			Get
				Return Me._Path
			End Get
			Set
				If (String.Equals(Me._Path, value) = false) Then
					Me.OnPathChanging(value)
					Me.SendPropertyChanging
					Me._Path = value
					Me.SendPropertyChanged("Path")
					Me.OnPathChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
		Public Property Enabled() As Boolean
			Get
				Return Me._Enabled
			End Get
			Set
				If ((Me._Enabled = value)  _
							= false) Then
					Me.OnEnabledChanging(value)
					Me.SendPropertyChanging
					Me._Enabled = value
					Me.SendPropertyChanged("Enabled")
					Me.OnEnabledChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MenuItem")>  _
	Partial Public Class MenuItem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Title As String
		
		Private _URL As String
		
		Private _Details As String
		
		Private _ParentID As Integer
		
		Private _Order As Integer
		
		Private _CssClass As String
		
		Private _IconImageUrl As String
		
		Private _Menu As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderChanged()
    End Sub
    Partial Private Sub OnCssClassChanging(value As String)
    End Sub
    Partial Private Sub OnCssClassChanged()
    End Sub
    Partial Private Sub OnIconImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnIconImageUrlChanged()
    End Sub
    Partial Private Sub OnMenuChanging(value As String)
    End Sub
    Partial Private Sub OnMenuChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(550)")>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int NOT NULL")>  _
		Public Property ParentID() As Integer
			Get
				Return Me._ParentID
			End Get
			Set
				If ((Me._ParentID = value)  _
							= false) Then
					Me.OnParentIDChanging(value)
					Me.SendPropertyChanging
					Me._ParentID = value
					Me.SendPropertyChanged("ParentID")
					Me.OnParentIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Order", DbType:="Int NOT NULL")>  _
		Public Property [Order]() As Integer
			Get
				Return Me._Order
			End Get
			Set
				If ((Me._Order = value)  _
							= false) Then
					Me.OnOrderChanging(value)
					Me.SendPropertyChanging
					Me._Order = value
					Me.SendPropertyChanged("[Order]")
					Me.OnOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CssClass", DbType:="NVarChar(50)")>  _
		Public Property CssClass() As String
			Get
				Return Me._CssClass
			End Get
			Set
				If (String.Equals(Me._CssClass, value) = false) Then
					Me.OnCssClassChanging(value)
					Me.SendPropertyChanging
					Me._CssClass = value
					Me.SendPropertyChanged("CssClass")
					Me.OnCssClassChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconImageUrl", DbType:="NVarChar(255)")>  _
		Public Property IconImageUrl() As String
			Get
				Return Me._IconImageUrl
			End Get
			Set
				If (String.Equals(Me._IconImageUrl, value) = false) Then
					Me.OnIconImageUrlChanging(value)
					Me.SendPropertyChanging
					Me._IconImageUrl = value
					Me.SendPropertyChanged("IconImageUrl")
					Me.OnIconImageUrlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Menu", DbType:="NVarChar(50)")>  _
		Public Property Menu() As String
			Get
				Return Me._Menu
			End Get
			Set
				If (String.Equals(Me._Menu, value) = false) Then
					Me.OnMenuChanging(value)
					Me.SendPropertyChanging
					Me._Menu = value
					Me.SendPropertyChanged("Menu")
					Me.OnMenuChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImageGallery")>  _
	Partial Public Class ImageGallery
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Title As String
		
		Private _Description As String
		
		Private _ImageGalleryItems As EntitySet(Of ImageGalleryItem)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ImageGalleryItems = New EntitySet(Of ImageGalleryItem)(AddressOf Me.attach_ImageGalleryItems, AddressOf Me.detach_ImageGalleryItems)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ImageGallery_ImageGalleryItem", Storage:="_ImageGalleryItems", ThisKey:="ID", OtherKey:="GalleryID")>  _
		Public Property ImageGalleryItems() As EntitySet(Of ImageGalleryItem)
			Get
				Return Me._ImageGalleryItems
			End Get
			Set
				Me._ImageGalleryItems.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ImageGalleryItems(ByVal entity As ImageGalleryItem)
			Me.SendPropertyChanging
			entity.ImageGallery = Me
		End Sub
		
		Private Sub detach_ImageGalleryItems(ByVal entity As ImageGalleryItem)
			Me.SendPropertyChanging
			entity.ImageGallery = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImageGalleryItem")>  _
	Partial Public Class ImageGalleryItem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Title As String
		
		Private _Description As String
		
		Private _ImageID As Integer
		
		Private _GalleryID As Integer
		
		Private _Order As Integer
		
		Private _ImageGallery As EntityRef(Of ImageGallery)
		
		Private _Picture As EntityRef(Of Picture)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnGalleryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGalleryIDChanged()
    End Sub
    Partial Private Sub OnOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ImageGallery = CType(Nothing, EntityRef(Of ImageGallery))
			Me._Picture = CType(Nothing, EntityRef(Of Picture))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int NOT NULL")>  _
		Public Property ImageID() As Integer
			Get
				Return Me._ImageID
			End Get
			Set
				If ((Me._ImageID = value)  _
							= false) Then
					If Me._Picture.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnImageIDChanging(value)
					Me.SendPropertyChanging
					Me._ImageID = value
					Me.SendPropertyChanged("ImageID")
					Me.OnImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryID", DbType:="Int NOT NULL")>  _
		Public Property GalleryID() As Integer
			Get
				Return Me._GalleryID
			End Get
			Set
				If ((Me._GalleryID = value)  _
							= false) Then
					If Me._ImageGallery.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnGalleryIDChanging(value)
					Me.SendPropertyChanging
					Me._GalleryID = value
					Me.SendPropertyChanged("GalleryID")
					Me.OnGalleryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Order", DbType:="Int NOT NULL")>  _
		Public Property [Order]() As Integer
			Get
				Return Me._Order
			End Get
			Set
				If ((Me._Order = value)  _
							= false) Then
					Me.OnOrderChanging(value)
					Me.SendPropertyChanging
					Me._Order = value
					Me.SendPropertyChanged("[Order]")
					Me.OnOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ImageGallery_ImageGalleryItem", Storage:="_ImageGallery", ThisKey:="GalleryID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property ImageGallery() As ImageGallery
			Get
				Return Me._ImageGallery.Entity
			End Get
			Set
				Dim previousValue As ImageGallery = Me._ImageGallery.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ImageGallery.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ImageGallery.Entity = Nothing
						previousValue.ImageGalleryItems.Remove(Me)
					End If
					Me._ImageGallery.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ImageGalleryItems.Add(Me)
						Me._GalleryID = value.ID
					Else
						Me._GalleryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ImageGallery")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_ImageGalleryItem", Storage:="_Picture", ThisKey:="ImageID", OtherKey:="PictureID", IsForeignKey:=true)>  _
		Public Property Picture() As Picture
			Get
				Return Me._Picture.Entity
			End Get
			Set
				Dim previousValue As Picture = Me._Picture.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Picture.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Picture.Entity = Nothing
						previousValue.ImageGalleryItems.Remove(Me)
					End If
					Me._Picture.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ImageGalleryItems.Add(Me)
						Me._ImageID = value.PictureID
					Else
						Me._ImageID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Picture")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Setting")>  _
	Partial Public Class Setting
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Key As String
		
		Private _Value As String
		
		Private _Category As String
		
		Private _Display As String
		
		Private _ReadOnly As Boolean
		
		Private _Description As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnKeyChanging(value As String)
    End Sub
    Partial Private Sub OnKeyChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnDisplayChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayChanged()
    End Sub
    Partial Private Sub OnReadOnlyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReadOnlyChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Key]", Storage:="_Key", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Key() As String
			Get
				Return Me._Key
			End Get
			Set
				If (String.Equals(Me._Key, value) = false) Then
					Me.OnKeyChanging(value)
					Me.SendPropertyChanging
					Me._Key = value
					Me.SendPropertyChanged("Key")
					Me.OnKeyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(MAX)")>  _
		Public Property Value() As String
			Get
				Return Me._Value
			End Get
			Set
				If (String.Equals(Me._Value, value) = false) Then
					Me.OnValueChanging(value)
					Me.SendPropertyChanging
					Me._Value = value
					Me.SendPropertyChanged("Value")
					Me.OnValueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Category() As String
			Get
				Return Me._Category
			End Get
			Set
				If (String.Equals(Me._Category, value) = false) Then
					Me.OnCategoryChanging(value)
					Me.SendPropertyChanging
					Me._Category = value
					Me.SendPropertyChanged("Category")
					Me.OnCategoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Display", DbType:="NVarChar(125)")>  _
		Public Property Display() As String
			Get
				Return Me._Display
			End Get
			Set
				If (String.Equals(Me._Display, value) = false) Then
					Me.OnDisplayChanging(value)
					Me.SendPropertyChanging
					Me._Display = value
					Me.SendPropertyChanged("Display")
					Me.OnDisplayChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="ReadOnly", Storage:="_ReadOnly", DbType:="Bit NOT NULL")>  _
		Public Property [ReadOnly]() As Boolean
			Get
				Return Me._ReadOnly
			End Get
			Set
				If ((Me._ReadOnly = value)  _
							= false) Then
					Me.OnReadOnlyChanging(value)
					Me.SendPropertyChanging
					Me._ReadOnly = value
					Me.SendPropertyChanged("[ReadOnly]")
					Me.OnReadOnlyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Video")>  _
	Partial Public Class Video
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Player As Integer
		
		Private _VideoID As String
		
		Private _Title As String
		
		Private _Details As String
		
		Private _Description As String
		
		Private _Keywords As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPlayerChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerChanged()
    End Sub
    Partial Private Sub OnVideoIDChanging(value As String)
    End Sub
    Partial Private Sub OnVideoIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Player", DbType:="Int NOT NULL")>  _
		Public Property Player() As Integer
			Get
				Return Me._Player
			End Get
			Set
				If ((Me._Player = value)  _
							= false) Then
					Me.OnPlayerChanging(value)
					Me.SendPropertyChanging
					Me._Player = value
					Me.SendPropertyChanged("Player")
					Me.OnPlayerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoID", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property VideoID() As String
			Get
				Return Me._VideoID
			End Get
			Set
				If (String.Equals(Me._VideoID, value) = false) Then
					Me.OnVideoIDChanging(value)
					Me.SendPropertyChanging
					Me._VideoID = value
					Me.SendPropertyChanged("VideoID")
					Me.OnVideoIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Careers")>  _
	Partial Public Class Career
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _title As String
		
		Private _department As Integer
		
		Private _pointofcontact As String
		
		Private _experience As String
		
		Private _level As String
		
		Private _referencecode As String
		
		Private _description As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OndepartmentChanging(value As Integer)
    End Sub
    Partial Private Sub OndepartmentChanged()
    End Sub
    Partial Private Sub OnpointofcontactChanging(value As String)
    End Sub
    Partial Private Sub OnpointofcontactChanged()
    End Sub
    Partial Private Sub OnexperienceChanging(value As String)
    End Sub
    Partial Private Sub OnexperienceChanged()
    End Sub
    Partial Private Sub OnlevelChanging(value As String)
    End Sub
    Partial Private Sub OnlevelChanged()
    End Sub
    Partial Private Sub OnreferencecodeChanging(value As String)
    End Sub
    Partial Private Sub OnreferencecodeChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property title() As String
			Get
				Return Me._title
			End Get
			Set
				If (String.Equals(Me._title, value) = false) Then
					Me.OntitleChanging(value)
					Me.SendPropertyChanging
					Me._title = value
					Me.SendPropertyChanged("title")
					Me.OntitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department", DbType:="Int NOT NULL")>  _
		Public Property department() As Integer
			Get
				Return Me._department
			End Get
			Set
				If ((Me._department = value)  _
							= false) Then
					Me.OndepartmentChanging(value)
					Me.SendPropertyChanging
					Me._department = value
					Me.SendPropertyChanged("department")
					Me.OndepartmentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pointofcontact", DbType:="NVarChar(255)")>  _
		Public Property pointofcontact() As String
			Get
				Return Me._pointofcontact
			End Get
			Set
				If (String.Equals(Me._pointofcontact, value) = false) Then
					Me.OnpointofcontactChanging(value)
					Me.SendPropertyChanging
					Me._pointofcontact = value
					Me.SendPropertyChanged("pointofcontact")
					Me.OnpointofcontactChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_experience", DbType:="NVarChar(50)")>  _
		Public Property experience() As String
			Get
				Return Me._experience
			End Get
			Set
				If (String.Equals(Me._experience, value) = false) Then
					Me.OnexperienceChanging(value)
					Me.SendPropertyChanging
					Me._experience = value
					Me.SendPropertyChanged("experience")
					Me.OnexperienceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[level]", Storage:="_level", DbType:="NVarChar(50)")>  _
		Public Property level() As String
			Get
				Return Me._level
			End Get
			Set
				If (String.Equals(Me._level, value) = false) Then
					Me.OnlevelChanging(value)
					Me.SendPropertyChanging
					Me._level = value
					Me.SendPropertyChanged("level")
					Me.OnlevelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencecode", DbType:="NVarChar(50)")>  _
		Public Property referencecode() As String
			Get
				Return Me._referencecode
			End Get
			Set
				If (String.Equals(Me._referencecode, value) = false) Then
					Me.OnreferencecodeChanging(value)
					Me.SendPropertyChanging
					Me._referencecode = value
					Me.SendPropertyChanged("referencecode")
					Me.OnreferencecodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormData")>  _
	Partial Public Class FormData
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _FormId As Integer
		
		Private _Data As String
		
		Private _Form As EntityRef(Of Form)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFormIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFormIdChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As String)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Form = CType(Nothing, EntityRef(Of Form))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormId", DbType:="Int NOT NULL")>  _
		Public Property FormId() As Integer
			Get
				Return Me._FormId
			End Get
			Set
				If ((Me._FormId = value)  _
							= false) Then
					If Me._Form.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFormIdChanging(value)
					Me.SendPropertyChanging
					Me._FormId = value
					Me.SendPropertyChanged("FormId")
					Me.OnFormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property Data() As String
			Get
				Return Me._Data
			End Get
			Set
				If (String.Equals(Me._Data, value) = false) Then
					Me.OnDataChanging(value)
					Me.SendPropertyChanging
					Me._Data = value
					Me.SendPropertyChanged("Data")
					Me.OnDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Form_FormData", Storage:="_Form", ThisKey:="FormId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Form() As Form
			Get
				Return Me._Form.Entity
			End Get
			Set
				Dim previousValue As Form = Me._Form.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Form.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Form.Entity = Nothing
						previousValue.FormDatas.Remove(Me)
					End If
					Me._Form.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FormDatas.Add(Me)
						Me._FormId = value.Id
					Else
						Me._FormId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Form")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Events")>  _
	Partial Public Class [Event]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Title As String
		
		Private _Time As String
		
		Private _Location As String
		
		Private _Details As String
		
		Private _ImageId As System.Nullable(Of Integer)
		
		Private _DateAdded As Date
		
		Private _EventDate As System.Nullable(Of Date)
		
		Private _Approved As Boolean
		
		Private _Permalink As String
		
		Private _Picture As EntityRef(Of Picture)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIdChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnEventDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEventDateChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Picture = CType(Nothing, EntityRef(Of Picture))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="NVarChar(256)")>  _
		Public Property Time() As String
			Get
				Return Me._Time
			End Get
			Set
				If (String.Equals(Me._Time, value) = false) Then
					Me.OnTimeChanging(value)
					Me.SendPropertyChanging
					Me._Time = value
					Me.SendPropertyChanged("Time")
					Me.OnTimeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(256)")>  _
		Public Property Location() As String
			Get
				Return Me._Location
			End Get
			Set
				If (String.Equals(Me._Location, value) = false) Then
					Me.OnLocationChanging(value)
					Me.SendPropertyChanging
					Me._Location = value
					Me.SendPropertyChanged("Location")
					Me.OnLocationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageId", DbType:="Int")>  _
		Public Property ImageId() As System.Nullable(Of Integer)
			Get
				Return Me._ImageId
			End Get
			Set
				If (Me._ImageId.Equals(value) = false) Then
					If Me._Picture.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnImageIdChanging(value)
					Me.SendPropertyChanging
					Me._ImageId = value
					Me.SendPropertyChanged("ImageId")
					Me.OnImageIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime NOT NULL")>  _
		Public Property DateAdded() As Date
			Get
				Return Me._DateAdded
			End Get
			Set
				If ((Me._DateAdded = value)  _
							= false) Then
					Me.OnDateAddedChanging(value)
					Me.SendPropertyChanging
					Me._DateAdded = value
					Me.SendPropertyChanged("DateAdded")
					Me.OnDateAddedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="DateTime")>  _
		Public Property EventDate() As System.Nullable(Of Date)
			Get
				Return Me._EventDate
			End Get
			Set
				If (Me._EventDate.Equals(value) = false) Then
					Me.OnEventDateChanging(value)
					Me.SendPropertyChanging
					Me._EventDate = value
					Me.SendPropertyChanged("EventDate")
					Me.OnEventDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
		Public Property Approved() As Boolean
			Get
				Return Me._Approved
			End Get
			Set
				If ((Me._Approved = value)  _
							= false) Then
					Me.OnApprovedChanging(value)
					Me.SendPropertyChanging
					Me._Approved = value
					Me.SendPropertyChanged("Approved")
					Me.OnApprovedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Picture_Event", Storage:="_Picture", ThisKey:="ImageId", OtherKey:="PictureID", IsForeignKey:=true)>  _
		Public Property Picture() As Picture
			Get
				Return Me._Picture.Entity
			End Get
			Set
				Dim previousValue As Picture = Me._Picture.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Picture.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Picture.Entity = Nothing
						previousValue.Events.Remove(Me)
					End If
					Me._Picture.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Events.Add(Me)
						Me._ImageId = value.PictureID
					Else
						Me._ImageId = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Picture")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.News")>  _
	Partial Public Class [New]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Title As String
		
		Private _SubTitle As String
		
		Private _Summary As String
		
		Private _Details As String
		
		Private _ImageId As System.Nullable(Of Integer)
		
		Private _SubmitDate As Date
		
		Private _PublishDate As Date
		
		Private _Approved As Boolean
		
		Private _Permalink As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnSubTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSubTitleChanged()
    End Sub
    Partial Private Sub OnSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnSummaryChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIdChanged()
    End Sub
    Partial Private Sub OnSubmitDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSubmitDateChanged()
    End Sub
    Partial Private Sub OnPublishDateChanging(value As Date)
    End Sub
    Partial Private Sub OnPublishDateChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTitle", DbType:="NVarChar(255)")>  _
		Public Property SubTitle() As String
			Get
				Return Me._SubTitle
			End Get
			Set
				If (String.Equals(Me._SubTitle, value) = false) Then
					Me.OnSubTitleChanging(value)
					Me.SendPropertyChanging
					Me._SubTitle = value
					Me.SendPropertyChanged("SubTitle")
					Me.OnSubTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Summary", DbType:="NVarChar(255)")>  _
		Public Property Summary() As String
			Get
				Return Me._Summary
			End Get
			Set
				If (String.Equals(Me._Summary, value) = false) Then
					Me.OnSummaryChanging(value)
					Me.SendPropertyChanging
					Me._Summary = value
					Me.SendPropertyChanged("Summary")
					Me.OnSummaryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageId", DbType:="Int")>  _
		Public Property ImageId() As System.Nullable(Of Integer)
			Get
				Return Me._ImageId
			End Get
			Set
				If (Me._ImageId.Equals(value) = false) Then
					Me.OnImageIdChanging(value)
					Me.SendPropertyChanging
					Me._ImageId = value
					Me.SendPropertyChanged("ImageId")
					Me.OnImageIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubmitDate", DbType:="DateTime NOT NULL")>  _
		Public Property SubmitDate() As Date
			Get
				Return Me._SubmitDate
			End Get
			Set
				If ((Me._SubmitDate = value)  _
							= false) Then
					Me.OnSubmitDateChanging(value)
					Me.SendPropertyChanging
					Me._SubmitDate = value
					Me.SendPropertyChanged("SubmitDate")
					Me.OnSubmitDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublishDate", DbType:="DateTime NOT NULL")>  _
		Public Property PublishDate() As Date
			Get
				Return Me._PublishDate
			End Get
			Set
				If ((Me._PublishDate = value)  _
							= false) Then
					Me.OnPublishDateChanging(value)
					Me.SendPropertyChanging
					Me._PublishDate = value
					Me.SendPropertyChanged("PublishDate")
					Me.OnPublishDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
		Public Property Approved() As Boolean
			Get
				Return Me._Approved
			End Get
			Set
				If ((Me._Approved = value)  _
							= false) Then
					Me.OnApprovedChanging(value)
					Me.SendPropertyChanging
					Me._Approved = value
					Me.SendPropertyChanged("Approved")
					Me.OnApprovedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContentPage")>  _
	Partial Public Class ContentPage
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _contentTitle As String
		
		Private _breadcrumbTitle As String
		
		Private _pageTitle As String
		
		Private _permalink As String
		
		Private _menuID As Integer
		
		Private _menuOrder As Integer
		
		Private _keywords As String
		
		Private _description As String
		
		Private _pageContent As String
		
		Private _script As String
		
		Private _headerImageID As System.Nullable(Of Integer)
		
		Private _parentPageID As System.Nullable(Of Integer)
		
		Private _displaysubmenu As Boolean
		
		Private _active As Boolean
		
		Private _MasterPageFile As String
		
		Private _secondaryContent As String
		
		Private _ShowHeading As Boolean
		
		Private _CallToActionId As System.Nullable(Of Integer)
		
		Private _ImageRotators As EntitySet(Of ImageRotator)
		
		Private _Menu As EntityRef(Of Menu)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncontentTitleChanging(value As String)
    End Sub
    Partial Private Sub OncontentTitleChanged()
    End Sub
    Partial Private Sub OnbreadcrumbTitleChanging(value As String)
    End Sub
    Partial Private Sub OnbreadcrumbTitleChanged()
    End Sub
    Partial Private Sub OnpageTitleChanging(value As String)
    End Sub
    Partial Private Sub OnpageTitleChanged()
    End Sub
    Partial Private Sub OnpermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnpermalinkChanged()
    End Sub
    Partial Private Sub OnmenuIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuIDChanged()
    End Sub
    Partial Private Sub OnmenuOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuOrderChanged()
    End Sub
    Partial Private Sub OnkeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnkeywordsChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnpageContentChanging(value As String)
    End Sub
    Partial Private Sub OnpageContentChanged()
    End Sub
    Partial Private Sub OnscriptChanging(value As String)
    End Sub
    Partial Private Sub OnscriptChanged()
    End Sub
    Partial Private Sub OnheaderImageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnheaderImageIDChanged()
    End Sub
    Partial Private Sub OnparentPageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnparentPageIDChanged()
    End Sub
    Partial Private Sub OndisplaysubmenuChanging(value As Boolean)
    End Sub
    Partial Private Sub OndisplaysubmenuChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OnMasterPageFileChanging(value As String)
    End Sub
    Partial Private Sub OnMasterPageFileChanged()
    End Sub
    Partial Private Sub OnsecondaryContentChanging(value As String)
    End Sub
    Partial Private Sub OnsecondaryContentChanged()
    End Sub
    Partial Private Sub OnShowHeadingChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowHeadingChanged()
    End Sub
    Partial Private Sub OnCallToActionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCallToActionIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ImageRotators = New EntitySet(Of ImageRotator)(AddressOf Me.attach_ImageRotators, AddressOf Me.detach_ImageRotators)
			Me._Menu = CType(Nothing, EntityRef(Of Menu))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contentTitle", DbType:="NVarChar(255)")>  _
		Public Property contentTitle() As String
			Get
				Return Me._contentTitle
			End Get
			Set
				If (String.Equals(Me._contentTitle, value) = false) Then
					Me.OncontentTitleChanging(value)
					Me.SendPropertyChanging
					Me._contentTitle = value
					Me.SendPropertyChanged("contentTitle")
					Me.OncontentTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_breadcrumbTitle", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property breadcrumbTitle() As String
			Get
				Return Me._breadcrumbTitle
			End Get
			Set
				If (String.Equals(Me._breadcrumbTitle, value) = false) Then
					Me.OnbreadcrumbTitleChanging(value)
					Me.SendPropertyChanging
					Me._breadcrumbTitle = value
					Me.SendPropertyChanged("breadcrumbTitle")
					Me.OnbreadcrumbTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pageTitle", DbType:="NVarChar(255)")>  _
		Public Property pageTitle() As String
			Get
				Return Me._pageTitle
			End Get
			Set
				If (String.Equals(Me._pageTitle, value) = false) Then
					Me.OnpageTitleChanging(value)
					Me.SendPropertyChanging
					Me._pageTitle = value
					Me.SendPropertyChanged("pageTitle")
					Me.OnpageTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property permalink() As String
			Get
				Return Me._permalink
			End Get
			Set
				If (String.Equals(Me._permalink, value) = false) Then
					Me.OnpermalinkChanging(value)
					Me.SendPropertyChanging
					Me._permalink = value
					Me.SendPropertyChanged("permalink")
					Me.OnpermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuID", DbType:="Int NOT NULL")>  _
		Public Property menuID() As Integer
			Get
				Return Me._menuID
			End Get
			Set
				If ((Me._menuID = value)  _
							= false) Then
					If Me._Menu.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmenuIDChanging(value)
					Me.SendPropertyChanging
					Me._menuID = value
					Me.SendPropertyChanged("menuID")
					Me.OnmenuIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuOrder", DbType:="Int NOT NULL")>  _
		Public Property menuOrder() As Integer
			Get
				Return Me._menuOrder
			End Get
			Set
				If ((Me._menuOrder = value)  _
							= false) Then
					Me.OnmenuOrderChanging(value)
					Me.SendPropertyChanging
					Me._menuOrder = value
					Me.SendPropertyChanged("menuOrder")
					Me.OnmenuOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_keywords", DbType:="NVarChar(255)")>  _
		Public Property keywords() As String
			Get
				Return Me._keywords
			End Get
			Set
				If (String.Equals(Me._keywords, value) = false) Then
					Me.OnkeywordsChanging(value)
					Me.SendPropertyChanging
					Me._keywords = value
					Me.SendPropertyChanged("keywords")
					Me.OnkeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(255)")>  _
		Public Property description() As String
			Get
				Return Me._description
			End Get
			Set
				If (String.Equals(Me._description, value) = false) Then
					Me.OndescriptionChanging(value)
					Me.SendPropertyChanging
					Me._description = value
					Me.SendPropertyChanged("description")
					Me.OndescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pageContent", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property pageContent() As String
			Get
				Return Me._pageContent
			End Get
			Set
				If (String.Equals(Me._pageContent, value) = false) Then
					Me.OnpageContentChanging(value)
					Me.SendPropertyChanging
					Me._pageContent = value
					Me.SendPropertyChanged("pageContent")
					Me.OnpageContentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_script", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property script() As String
			Get
				Return Me._script
			End Get
			Set
				If (String.Equals(Me._script, value) = false) Then
					Me.OnscriptChanging(value)
					Me.SendPropertyChanging
					Me._script = value
					Me.SendPropertyChanged("script")
					Me.OnscriptChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headerImageID", DbType:="Int")>  _
		Public Property headerImageID() As System.Nullable(Of Integer)
			Get
				Return Me._headerImageID
			End Get
			Set
				If (Me._headerImageID.Equals(value) = false) Then
					Me.OnheaderImageIDChanging(value)
					Me.SendPropertyChanging
					Me._headerImageID = value
					Me.SendPropertyChanged("headerImageID")
					Me.OnheaderImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parentPageID", DbType:="Int")>  _
		Public Property parentPageID() As System.Nullable(Of Integer)
			Get
				Return Me._parentPageID
			End Get
			Set
				If (Me._parentPageID.Equals(value) = false) Then
					Me.OnparentPageIDChanging(value)
					Me.SendPropertyChanging
					Me._parentPageID = value
					Me.SendPropertyChanged("parentPageID")
					Me.OnparentPageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displaysubmenu", DbType:="Bit NOT NULL")>  _
		Public Property displaysubmenu() As Boolean
			Get
				Return Me._displaysubmenu
			End Get
			Set
				If ((Me._displaysubmenu = value)  _
							= false) Then
					Me.OndisplaysubmenuChanging(value)
					Me.SendPropertyChanging
					Me._displaysubmenu = value
					Me.SendPropertyChanged("displaysubmenu")
					Me.OndisplaysubmenuChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
		Public Property active() As Boolean
			Get
				Return Me._active
			End Get
			Set
				If ((Me._active = value)  _
							= false) Then
					Me.OnactiveChanging(value)
					Me.SendPropertyChanging
					Me._active = value
					Me.SendPropertyChanged("active")
					Me.OnactiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MasterPageFile", DbType:="NVarChar(255)")>  _
		Public Property MasterPageFile() As String
			Get
				Return Me._MasterPageFile
			End Get
			Set
				If (String.Equals(Me._MasterPageFile, value) = false) Then
					Me.OnMasterPageFileChanging(value)
					Me.SendPropertyChanging
					Me._MasterPageFile = value
					Me.SendPropertyChanged("MasterPageFile")
					Me.OnMasterPageFileChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_secondaryContent", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property secondaryContent() As String
			Get
				Return Me._secondaryContent
			End Get
			Set
				If (String.Equals(Me._secondaryContent, value) = false) Then
					Me.OnsecondaryContentChanging(value)
					Me.SendPropertyChanging
					Me._secondaryContent = value
					Me.SendPropertyChanged("secondaryContent")
					Me.OnsecondaryContentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowHeading", DbType:="Bit NOT NULL")>  _
		Public Property ShowHeading() As Boolean
			Get
				Return Me._ShowHeading
			End Get
			Set
				If ((Me._ShowHeading = value)  _
							= false) Then
					Me.OnShowHeadingChanging(value)
					Me.SendPropertyChanging
					Me._ShowHeading = value
					Me.SendPropertyChanged("ShowHeading")
					Me.OnShowHeadingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CallToActionId", DbType:="Int")>  _
		Public Property CallToActionId() As System.Nullable(Of Integer)
			Get
				Return Me._CallToActionId
			End Get
			Set
				If (Me._CallToActionId.Equals(value) = false) Then
					Me.OnCallToActionIdChanging(value)
					Me.SendPropertyChanging
					Me._CallToActionId = value
					Me.SendPropertyChanged("CallToActionId")
					Me.OnCallToActionIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContentPage_ImageRotator", Storage:="_ImageRotators", ThisKey:="id", OtherKey:="pageID")>  _
		Public Property ImageRotators() As EntitySet(Of ImageRotator)
			Get
				Return Me._ImageRotators
			End Get
			Set
				Me._ImageRotators.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menu_ContentPage", Storage:="_Menu", ThisKey:="menuID", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property Menu() As Menu
			Get
				Return Me._Menu.Entity
			End Get
			Set
				Dim previousValue As Menu = Me._Menu.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Menu.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Menu.Entity = Nothing
						previousValue.ContentPages.Remove(Me)
					End If
					Me._Menu.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ContentPages.Add(Me)
						Me._menuID = value.id
					Else
						Me._menuID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Menu")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ImageRotators(ByVal entity As ImageRotator)
			Me.SendPropertyChanging
			entity.ContentPage = Me
		End Sub
		
		Private Sub detach_ImageRotators(ByVal entity As ImageRotator)
			Me.SendPropertyChanging
			entity.ContentPage = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CallToAction")>  _
	Partial Public Class CallToAction
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Heading As String
		
		Private _Details As String
		
		Private _ButtonText As String
		
		Private _ImageUrl As String
		
		Private _LinkUrl As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnHeadingChanging(value As String)
    End Sub
    Partial Private Sub OnHeadingChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnButtonTextChanging(value As String)
    End Sub
    Partial Private Sub OnButtonTextChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnLinkUrlChanging(value As String)
    End Sub
    Partial Private Sub OnLinkUrlChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Heading", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property Heading() As String
			Get
				Return Me._Heading
			End Get
			Set
				If (String.Equals(Me._Heading, value) = false) Then
					Me.OnHeadingChanging(value)
					Me.SendPropertyChanging
					Me._Heading = value
					Me.SendPropertyChanged("Heading")
					Me.OnHeadingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonText", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property ButtonText() As String
			Get
				Return Me._ButtonText
			End Get
			Set
				If (String.Equals(Me._ButtonText, value) = false) Then
					Me.OnButtonTextChanging(value)
					Me.SendPropertyChanging
					Me._ButtonText = value
					Me.SendPropertyChanged("ButtonText")
					Me.OnButtonTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(MAX)")>  _
		Public Property ImageUrl() As String
			Get
				Return Me._ImageUrl
			End Get
			Set
				If (String.Equals(Me._ImageUrl, value) = false) Then
					Me.OnImageUrlChanging(value)
					Me.SendPropertyChanging
					Me._ImageUrl = value
					Me.SendPropertyChanged("ImageUrl")
					Me.OnImageUrlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkUrl", DbType:="NVarChar(255)")>  _
		Public Property LinkUrl() As String
			Get
				Return Me._LinkUrl
			End Get
			Set
				If (String.Equals(Me._LinkUrl, value) = false) Then
					Me.OnLinkUrlChanging(value)
					Me.SendPropertyChanging
					Me._LinkUrl = value
					Me.SendPropertyChanged("LinkUrl")
					Me.OnLinkUrlChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FormField")>  _
	Partial Public Class FormField
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _FormId As Integer
		
		Private _Label As String
		
		Private _Details As String
		
		Private _DataType As Integer
		
		Private _ControlType As Integer
		
		Private _DefaultValues As String
		
		Private _ValidationExpression As String
		
		Private _Watermark As String
		
		Private _FieldIndex As Integer
		
		Private _OptionData As String
		
		Private _Form As EntityRef(Of Form)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFormIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFormIdChanged()
    End Sub
    Partial Private Sub OnLabelChanging(value As String)
    End Sub
    Partial Private Sub OnLabelChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnDataTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnDataTypeChanged()
    End Sub
    Partial Private Sub OnControlTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnControlTypeChanged()
    End Sub
    Partial Private Sub OnDefaultValuesChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultValuesChanged()
    End Sub
    Partial Private Sub OnValidationExpressionChanging(value As String)
    End Sub
    Partial Private Sub OnValidationExpressionChanged()
    End Sub
    Partial Private Sub OnWatermarkChanging(value As String)
    End Sub
    Partial Private Sub OnWatermarkChanged()
    End Sub
    Partial Private Sub OnFieldIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnFieldIndexChanged()
    End Sub
    Partial Private Sub OnOptionDataChanging(value As String)
    End Sub
    Partial Private Sub OnOptionDataChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Form = CType(Nothing, EntityRef(Of Form))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormId", DbType:="Int NOT NULL")>  _
		Public Property FormId() As Integer
			Get
				Return Me._FormId
			End Get
			Set
				If ((Me._FormId = value)  _
							= false) Then
					If Me._Form.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFormIdChanging(value)
					Me.SendPropertyChanging
					Me._FormId = value
					Me.SendPropertyChanged("FormId")
					Me.OnFormIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Label", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Label() As String
			Get
				Return Me._Label
			End Get
			Set
				If (String.Equals(Me._Label, value) = false) Then
					Me.OnLabelChanging(value)
					Me.SendPropertyChanging
					Me._Label = value
					Me.SendPropertyChanged("Label")
					Me.OnLabelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(255)")>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataType", DbType:="Int NOT NULL")>  _
		Public Property DataType() As Integer
			Get
				Return Me._DataType
			End Get
			Set
				If ((Me._DataType = value)  _
							= false) Then
					Me.OnDataTypeChanging(value)
					Me.SendPropertyChanging
					Me._DataType = value
					Me.SendPropertyChanged("DataType")
					Me.OnDataTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ControlType", DbType:="Int NOT NULL")>  _
		Public Property ControlType() As Integer
			Get
				Return Me._ControlType
			End Get
			Set
				If ((Me._ControlType = value)  _
							= false) Then
					Me.OnControlTypeChanging(value)
					Me.SendPropertyChanging
					Me._ControlType = value
					Me.SendPropertyChanged("ControlType")
					Me.OnControlTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultValues", DbType:="NVarChar(255)")>  _
		Public Property DefaultValues() As String
			Get
				Return Me._DefaultValues
			End Get
			Set
				If (String.Equals(Me._DefaultValues, value) = false) Then
					Me.OnDefaultValuesChanging(value)
					Me.SendPropertyChanging
					Me._DefaultValues = value
					Me.SendPropertyChanged("DefaultValues")
					Me.OnDefaultValuesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidationExpression", DbType:="NVarChar(255)")>  _
		Public Property ValidationExpression() As String
			Get
				Return Me._ValidationExpression
			End Get
			Set
				If (String.Equals(Me._ValidationExpression, value) = false) Then
					Me.OnValidationExpressionChanging(value)
					Me.SendPropertyChanging
					Me._ValidationExpression = value
					Me.SendPropertyChanged("ValidationExpression")
					Me.OnValidationExpressionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Watermark", DbType:="NVarChar(255)")>  _
		Public Property Watermark() As String
			Get
				Return Me._Watermark
			End Get
			Set
				If (String.Equals(Me._Watermark, value) = false) Then
					Me.OnWatermarkChanging(value)
					Me.SendPropertyChanging
					Me._Watermark = value
					Me.SendPropertyChanged("Watermark")
					Me.OnWatermarkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldIndex", DbType:="Int NOT NULL")>  _
		Public Property FieldIndex() As Integer
			Get
				Return Me._FieldIndex
			End Get
			Set
				If ((Me._FieldIndex = value)  _
							= false) Then
					Me.OnFieldIndexChanging(value)
					Me.SendPropertyChanging
					Me._FieldIndex = value
					Me.SendPropertyChanged("FieldIndex")
					Me.OnFieldIndexChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptionData", DbType:="VarChar(500)")>  _
		Public Property OptionData() As String
			Get
				Return Me._OptionData
			End Get
			Set
				If (String.Equals(Me._OptionData, value) = false) Then
					Me.OnOptionDataChanging(value)
					Me.SendPropertyChanging
					Me._OptionData = value
					Me.SendPropertyChanged("OptionData")
					Me.OnOptionDataChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Form_FormField", Storage:="_Form", ThisKey:="FormId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Form() As Form
			Get
				Return Me._Form.Entity
			End Get
			Set
				Dim previousValue As Form = Me._Form.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Form.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Form.Entity = Nothing
						previousValue.FormFields.Remove(Me)
					End If
					Me._Form.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FormFields.Add(Me)
						Me._FormId = value.Id
					Else
						Me._FormId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Form")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Form")>  _
	Partial Public Class Form
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Name As String
		
		Private _Details As String
		
		Private _CallToActionText As String
		
		Private _CopyToAdmin As Boolean
		
		Private _ImageId As System.Nullable(Of Integer)
		
		Private _CompleteMessage As String
		
		Private _Permalink As String
		
		Private _FormDatas As EntitySet(Of FormData)
		
		Private _FormFields As EntitySet(Of FormField)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnCallToActionTextChanging(value As String)
    End Sub
    Partial Private Sub OnCallToActionTextChanged()
    End Sub
    Partial Private Sub OnCopyToAdminChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCopyToAdminChanged()
    End Sub
    Partial Private Sub OnImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIdChanged()
    End Sub
    Partial Private Sub OnCompleteMessageChanging(value As String)
    End Sub
    Partial Private Sub OnCompleteMessageChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FormDatas = New EntitySet(Of FormData)(AddressOf Me.attach_FormDatas, AddressOf Me.detach_FormDatas)
			Me._FormFields = New EntitySet(Of FormField)(AddressOf Me.attach_FormFields, AddressOf Me.detach_FormFields)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CallToActionText", DbType:="NVarChar(255)")>  _
		Public Property CallToActionText() As String
			Get
				Return Me._CallToActionText
			End Get
			Set
				If (String.Equals(Me._CallToActionText, value) = false) Then
					Me.OnCallToActionTextChanging(value)
					Me.SendPropertyChanging
					Me._CallToActionText = value
					Me.SendPropertyChanged("CallToActionText")
					Me.OnCallToActionTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopyToAdmin", DbType:="Bit NOT NULL")>  _
		Public Property CopyToAdmin() As Boolean
			Get
				Return Me._CopyToAdmin
			End Get
			Set
				If ((Me._CopyToAdmin = value)  _
							= false) Then
					Me.OnCopyToAdminChanging(value)
					Me.SendPropertyChanging
					Me._CopyToAdmin = value
					Me.SendPropertyChanged("CopyToAdmin")
					Me.OnCopyToAdminChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageId", DbType:="Int")>  _
		Public Property ImageId() As System.Nullable(Of Integer)
			Get
				Return Me._ImageId
			End Get
			Set
				If (Me._ImageId.Equals(value) = false) Then
					Me.OnImageIdChanging(value)
					Me.SendPropertyChanging
					Me._ImageId = value
					Me.SendPropertyChanged("ImageId")
					Me.OnImageIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompleteMessage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CompleteMessage() As String
			Get
				Return Me._CompleteMessage
			End Get
			Set
				If (String.Equals(Me._CompleteMessage, value) = false) Then
					Me.OnCompleteMessageChanging(value)
					Me.SendPropertyChanging
					Me._CompleteMessage = value
					Me.SendPropertyChanged("CompleteMessage")
					Me.OnCompleteMessageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Form_FormData", Storage:="_FormDatas", ThisKey:="Id", OtherKey:="FormId")>  _
		Public Property FormDatas() As EntitySet(Of FormData)
			Get
				Return Me._FormDatas
			End Get
			Set
				Me._FormDatas.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Form_FormField", Storage:="_FormFields", ThisKey:="Id", OtherKey:="FormId")>  _
		Public Property FormFields() As EntitySet(Of FormField)
			Get
				Return Me._FormFields
			End Get
			Set
				Me._FormFields.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_FormDatas(ByVal entity As FormData)
			Me.SendPropertyChanging
			entity.Form = Me
		End Sub
		
		Private Sub detach_FormDatas(ByVal entity As FormData)
			Me.SendPropertyChanging
			entity.Form = Nothing
		End Sub
		
		Private Sub attach_FormFields(ByVal entity As FormField)
			Me.SendPropertyChanging
			entity.Form = Me
		End Sub
		
		Private Sub detach_FormFields(ByVal entity As FormField)
			Me.SendPropertyChanging
			entity.Form = Nothing
		End Sub
	End Class
End Namespace
