'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace CCFramework.Model
	
    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CloudCarDb")> _
    Partial Public Class BlogDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertComment(instance As Comment)
        End Sub
        Partial Private Sub UpdateComment(instance As Comment)
        End Sub
        Partial Private Sub DeleteComment(instance As Comment)
        End Sub
        Partial Private Sub InsertAuthor(instance As Author)
        End Sub
        Partial Private Sub UpdateAuthor(instance As Author)
        End Sub
        Partial Private Sub DeleteAuthor(instance As Author)
        End Sub
        Partial Private Sub InsertBlog(instance As Blog)
        End Sub
        Partial Private Sub UpdateBlog(instance As Blog)
        End Sub
        Partial Private Sub DeleteBlog(instance As Blog)
        End Sub
#End Region

        Public Sub New()
            MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MainConnectionString").ConnectionString, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Comments() As System.Data.Linq.Table(Of Comment)
            Get
                Return Me.GetTable(Of Comment)()
            End Get
        End Property

        Public ReadOnly Property Authors() As System.Data.Linq.Table(Of Author)
            Get
                Return Me.GetTable(Of Author)()
            End Get
        End Property

        Public ReadOnly Property Blogs() As System.Data.Linq.Table(Of Blog)
            Get
                Return Me.GetTable(Of Blog)()
            End Get
        End Property
    End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comment")>  _
	Partial Public Class Comment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _BlogId As Integer
		
		Private _UserID As System.Nullable(Of Integer)
		
		Private _Name As String
		
		Private _Email As String
		
		Private _Comment As String
		
		Private _DatePosted As Date
		
		Private _Approved As Boolean
		
		Private _Url As String
		
		Private _Blog As EntityRef(Of Blog)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnBlogIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBlogIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnDatePostedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatePostedChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnUrlChanging(value As String)
    End Sub
    Partial Private Sub OnUrlChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Blog = CType(Nothing, EntityRef(Of Blog))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlogId", DbType:="Int NOT NULL")>  _
		Public Property BlogId() As Integer
			Get
				Return Me._BlogId
			End Get
			Set
				If ((Me._BlogId = value)  _
							= false) Then
					If Me._Blog.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBlogIdChanging(value)
					Me.SendPropertyChanging
					Me._BlogId = value
					Me.SendPropertyChanged("BlogId")
					Me.OnBlogIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
		Public Property UserID() As System.Nullable(Of Integer)
			Get
				Return Me._UserID
			End Get
			Set
				If (Me._UserID.Equals(value) = false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Comment() As String
			Get
				Return Me._Comment
			End Get
			Set
				If (String.Equals(Me._Comment, value) = false) Then
					Me.OnCommentChanging(value)
					Me.SendPropertyChanging
					Me._Comment = value
					Me.SendPropertyChanged("Comment")
					Me.OnCommentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePosted", DbType:="Date NOT NULL")>  _
		Public Property DatePosted() As Date
			Get
				Return Me._DatePosted
			End Get
			Set
				If ((Me._DatePosted = value)  _
							= false) Then
					Me.OnDatePostedChanging(value)
					Me.SendPropertyChanging
					Me._DatePosted = value
					Me.SendPropertyChanged("DatePosted")
					Me.OnDatePostedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
		Public Property Approved() As Boolean
			Get
				Return Me._Approved
			End Get
			Set
				If ((Me._Approved = value)  _
							= false) Then
					Me.OnApprovedChanging(value)
					Me.SendPropertyChanging
					Me._Approved = value
					Me.SendPropertyChanged("Approved")
					Me.OnApprovedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Url", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Url() As String
			Get
				Return Me._Url
			End Get
			Set
				If (String.Equals(Me._Url, value) = false) Then
					Me.OnUrlChanging(value)
					Me.SendPropertyChanging
					Me._Url = value
					Me.SendPropertyChanged("Url")
					Me.OnUrlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Blog_Comment", Storage:="_Blog", ThisKey:="BlogId", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property Blog() As Blog
			Get
				Return Me._Blog.Entity
			End Get
			Set
				Dim previousValue As Blog = Me._Blog.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Blog.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Blog.Entity = Nothing
						previousValue.Comments.Remove(Me)
					End If
					Me._Blog.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Comments.Add(Me)
						Me._BlogId = value.id
					Else
						Me._BlogId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Blog")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Author")>  _
	Partial Public Class Author
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UserID As System.Nullable(Of Integer)
		
		Private _Name As String
		
		Private _Biography As String
		
		Private _AvatarURL As String
		
		Private _Title As String
		
		Private _Keywords As String
		
		Private _Description As String
		
		Private _Permalink As String
		
		Private _Blogs As EntitySet(Of Blog)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnBiographyChanging(value As String)
    End Sub
    Partial Private Sub OnBiographyChanged()
    End Sub
    Partial Private Sub OnAvatarURLChanging(value As String)
    End Sub
    Partial Private Sub OnAvatarURLChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Blogs = New EntitySet(Of Blog)(AddressOf Me.attach_Blogs, AddressOf Me.detach_Blogs)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
		Public Property UserID() As System.Nullable(Of Integer)
			Get
				Return Me._UserID
			End Get
			Set
				If (Me._UserID.Equals(value) = false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Biography", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Biography() As String
			Get
				Return Me._Biography
			End Get
			Set
				If (String.Equals(Me._Biography, value) = false) Then
					Me.OnBiographyChanging(value)
					Me.SendPropertyChanging
					Me._Biography = value
					Me.SendPropertyChanged("Biography")
					Me.OnBiographyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvatarURL", DbType:="NVarChar(255)")>  _
		Public Property AvatarURL() As String
			Get
				Return Me._AvatarURL
			End Get
			Set
				If (String.Equals(Me._AvatarURL, value) = false) Then
					Me.OnAvatarURLChanging(value)
					Me.SendPropertyChanging
					Me._AvatarURL = value
					Me.SendPropertyChanged("AvatarURL")
					Me.OnAvatarURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(56)")>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(500)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Author_Blog", Storage:="_Blogs", ThisKey:="ID", OtherKey:="AuthorID")>  _
		Public Property Blogs() As EntitySet(Of Blog)
			Get
				Return Me._Blogs
			End Get
			Set
				Me._Blogs.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Blogs(ByVal entity As Blog)
			Me.SendPropertyChanging
			entity.Author = Me
		End Sub
		
		Private Sub detach_Blogs(ByVal entity As Blog)
			Me.SendPropertyChanging
			entity.Author = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Blog")>  _
	Partial Public Class Blog
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _Title As String
		
		Private _SubHeading As String
		
		Private _BlogContent As String
		
		Private _Keywords As String
		
		Private _Description As String
		
		Private _ContentSummary As String
		
		Private _Permalink As String
		
		Private _Guid As System.Guid
		
		Private _DatePosted As Date
		
		Private _Category As String
		
		Private _ImageLink As String
		
		Private _ThumnailImageLink As String
		
		Private _Live As Boolean
		
		Private _AuthorID As Integer
		
		Private _Comments As EntitySet(Of Comment)
		
		Private _Author As EntityRef(Of Author)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnSubHeadingChanging(value As String)
    End Sub
    Partial Private Sub OnSubHeadingChanged()
    End Sub
    Partial Private Sub OnBlogContentChanging(value As String)
    End Sub
    Partial Private Sub OnBlogContentChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnContentSummaryChanging(value As String)
    End Sub
    Partial Private Sub OnContentSummaryChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    Partial Private Sub OnGuidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGuidChanged()
    End Sub
    Partial Private Sub OnDatePostedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatePostedChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnImageLinkChanging(value As String)
    End Sub
    Partial Private Sub OnImageLinkChanged()
    End Sub
    Partial Private Sub OnThumnailImageLinkChanging(value As String)
    End Sub
    Partial Private Sub OnThumnailImageLinkChanged()
    End Sub
    Partial Private Sub OnLiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLiveChanged()
    End Sub
    Partial Private Sub OnAuthorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAuthorIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Comments = New EntitySet(Of Comment)(AddressOf Me.attach_Comments, AddressOf Me.detach_Comments)
			Me._Author = CType(Nothing, EntityRef(Of Author))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubHeading", DbType:="NVarChar(255)")>  _
		Public Property SubHeading() As String
			Get
				Return Me._SubHeading
			End Get
			Set
				If (String.Equals(Me._SubHeading, value) = false) Then
					Me.OnSubHeadingChanging(value)
					Me.SendPropertyChanging
					Me._SubHeading = value
					Me.SendPropertyChanged("SubHeading")
					Me.OnSubHeadingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlogContent", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property BlogContent() As String
			Get
				Return Me._BlogContent
			End Get
			Set
				If (String.Equals(Me._BlogContent, value) = false) Then
					Me.OnBlogContentChanging(value)
					Me.SendPropertyChanging
					Me._BlogContent = value
					Me.SendPropertyChanged("BlogContent")
					Me.OnBlogContentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(260)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentSummary", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ContentSummary() As String
			Get
				Return Me._ContentSummary
			End Get
			Set
				If (String.Equals(Me._ContentSummary, value) = false) Then
					Me.OnContentSummaryChanging(value)
					Me.SendPropertyChanging
					Me._ContentSummary = value
					Me.SendPropertyChanged("ContentSummary")
					Me.OnContentSummaryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Guid", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property Guid() As System.Guid
			Get
				Return Me._Guid
			End Get
			Set
				If ((Me._Guid = value)  _
							= false) Then
					Me.OnGuidChanging(value)
					Me.SendPropertyChanging
					Me._Guid = value
					Me.SendPropertyChanged("Guid")
					Me.OnGuidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePosted", DbType:="DateTime NOT NULL")>  _
		Public Property DatePosted() As Date
			Get
				Return Me._DatePosted
			End Get
			Set
				If ((Me._DatePosted = value)  _
							= false) Then
					Me.OnDatePostedChanging(value)
					Me.SendPropertyChanging
					Me._DatePosted = value
					Me.SendPropertyChanged("DatePosted")
					Me.OnDatePostedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Category() As String
			Get
				Return Me._Category
			End Get
			Set
				If (String.Equals(Me._Category, value) = false) Then
					Me.OnCategoryChanging(value)
					Me.SendPropertyChanging
					Me._Category = value
					Me.SendPropertyChanged("Category")
					Me.OnCategoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageLink", DbType:="NVarChar(255)")>  _
		Public Property ImageLink() As String
			Get
				Return Me._ImageLink
			End Get
			Set
				If (String.Equals(Me._ImageLink, value) = false) Then
					Me.OnImageLinkChanging(value)
					Me.SendPropertyChanging
					Me._ImageLink = value
					Me.SendPropertyChanged("ImageLink")
					Me.OnImageLinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumnailImageLink", DbType:="NVarChar(255)")>  _
		Public Property ThumnailImageLink() As String
			Get
				Return Me._ThumnailImageLink
			End Get
			Set
				If (String.Equals(Me._ThumnailImageLink, value) = false) Then
					Me.OnThumnailImageLinkChanging(value)
					Me.SendPropertyChanging
					Me._ThumnailImageLink = value
					Me.SendPropertyChanged("ThumnailImageLink")
					Me.OnThumnailImageLinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Live", DbType:="Bit NOT NULL")>  _
		Public Property Live() As Boolean
			Get
				Return Me._Live
			End Get
			Set
				If ((Me._Live = value)  _
							= false) Then
					Me.OnLiveChanging(value)
					Me.SendPropertyChanging
					Me._Live = value
					Me.SendPropertyChanged("Live")
					Me.OnLiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorID", DbType:="Int NOT NULL")>  _
		Public Property AuthorID() As Integer
			Get
				Return Me._AuthorID
			End Get
			Set
				If ((Me._AuthorID = value)  _
							= false) Then
					If Me._Author.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAuthorIDChanging(value)
					Me.SendPropertyChanging
					Me._AuthorID = value
					Me.SendPropertyChanged("AuthorID")
					Me.OnAuthorIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Blog_Comment", Storage:="_Comments", ThisKey:="id", OtherKey:="BlogId")>  _
		Public Property Comments() As EntitySet(Of Comment)
			Get
				Return Me._Comments
			End Get
			Set
				Me._Comments.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Author_Blog", Storage:="_Author", ThisKey:="AuthorID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Author() As Author
			Get
				Return Me._Author.Entity
			End Get
			Set
				Dim previousValue As Author = Me._Author.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Author.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Author.Entity = Nothing
						previousValue.Blogs.Remove(Me)
					End If
					Me._Author.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Blogs.Add(Me)
						Me._AuthorID = value.ID
					Else
						Me._AuthorID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Author")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Comments(ByVal entity As Comment)
			Me.SendPropertyChanging
			entity.Blog = Me
		End Sub
		
		Private Sub detach_Comments(ByVal entity As Comment)
			Me.SendPropertyChanging
			entity.Blog = Nothing
		End Sub
	End Class
End Namespace
