'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace CCFramework.Model
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FlooringStore2014Db")>  _
	Partial Public Class CommerceDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertProductColor(instance As ProductColor)
    End Sub
    Partial Private Sub UpdateProductColor(instance As ProductColor)
    End Sub
    Partial Private Sub DeleteProductColor(instance As ProductColor)
    End Sub
    Partial Private Sub InsertProductImage(instance As ProductImage)
    End Sub
    Partial Private Sub UpdateProductImage(instance As ProductImage)
    End Sub
    Partial Private Sub DeleteProductImage(instance As ProductImage)
    End Sub
    Partial Private Sub InsertCreditCardType(instance As CreditCardType)
    End Sub
    Partial Private Sub UpdateCreditCardType(instance As CreditCardType)
    End Sub
    Partial Private Sub DeleteCreditCardType(instance As CreditCardType)
    End Sub
    Partial Private Sub InsertOrderItem(instance As OrderItem)
    End Sub
    Partial Private Sub UpdateOrderItem(instance As OrderItem)
    End Sub
    Partial Private Sub DeleteOrderItem(instance As OrderItem)
    End Sub
    Partial Private Sub InsertCreditCardPayment(instance As CreditCardPayment)
    End Sub
    Partial Private Sub UpdateCreditCardPayment(instance As CreditCardPayment)
    End Sub
    Partial Private Sub DeleteCreditCardPayment(instance As CreditCardPayment)
    End Sub
    Partial Private Sub InsertCountry(instance As Country)
    End Sub
    Partial Private Sub UpdateCountry(instance As Country)
    End Sub
    Partial Private Sub DeleteCountry(instance As Country)
    End Sub
    Partial Private Sub InsertProvince(instance As Province)
    End Sub
    Partial Private Sub UpdateProvince(instance As Province)
    End Sub
    Partial Private Sub DeleteProvince(instance As Province)
    End Sub
    Partial Private Sub InsertProductSize(instance As ProductSize)
    End Sub
    Partial Private Sub UpdateProductSize(instance As ProductSize)
    End Sub
    Partial Private Sub DeleteProductSize(instance As ProductSize)
    End Sub
    Partial Private Sub InsertSimpleUser(instance As SimpleUser)
    End Sub
    Partial Private Sub UpdateSimpleUser(instance As SimpleUser)
    End Sub
    Partial Private Sub DeleteSimpleUser(instance As SimpleUser)
    End Sub
    Partial Private Sub InsertAddress(instance As Address)
    End Sub
    Partial Private Sub UpdateAddress(instance As Address)
    End Sub
    Partial Private Sub DeleteAddress(instance As Address)
    End Sub
    Partial Private Sub InsertBeanStreamPayment(instance As BeanStreamPayment)
    End Sub
    Partial Private Sub UpdateBeanStreamPayment(instance As BeanStreamPayment)
    End Sub
    Partial Private Sub DeleteBeanStreamPayment(instance As BeanStreamPayment)
    End Sub
    Partial Private Sub InsertShoppingCart(instance As ShoppingCart)
    End Sub
    Partial Private Sub UpdateShoppingCart(instance As ShoppingCart)
    End Sub
    Partial Private Sub DeleteShoppingCart(instance As ShoppingCart)
    End Sub
    Partial Private Sub InsertInventory(instance As Inventory)
    End Sub
    Partial Private Sub UpdateInventory(instance As Inventory)
    End Sub
    Partial Private Sub DeleteInventory(instance As Inventory)
    End Sub
    Partial Private Sub InsertProductReview(instance As ProductReview)
    End Sub
    Partial Private Sub UpdateProductReview(instance As ProductReview)
    End Sub
    Partial Private Sub DeleteProductReview(instance As ProductReview)
    End Sub
    Partial Private Sub InsertMenuCategoryItem(instance As MenuCategoryItem)
    End Sub
    Partial Private Sub UpdateMenuCategoryItem(instance As MenuCategoryItem)
    End Sub
    Partial Private Sub DeleteMenuCategoryItem(instance As MenuCategoryItem)
    End Sub
    Partial Private Sub InsertMenuCategory(instance As MenuCategory)
    End Sub
    Partial Private Sub UpdateMenuCategory(instance As MenuCategory)
    End Sub
    Partial Private Sub DeleteMenuCategory(instance As MenuCategory)
    End Sub
    Partial Private Sub InsertProductDownload(instance As ProductDownload)
    End Sub
    Partial Private Sub UpdateProductDownload(instance As ProductDownload)
    End Sub
    Partial Private Sub DeleteProductDownload(instance As ProductDownload)
    End Sub
    Partial Private Sub InsertBCRoom(instance As BCRoom)
    End Sub
    Partial Private Sub UpdateBCRoom(instance As BCRoom)
    End Sub
    Partial Private Sub DeleteBCRoom(instance As BCRoom)
    End Sub
    Partial Private Sub InsertBCRoomProduct(instance As BCRoomProduct)
    End Sub
    Partial Private Sub UpdateBCRoomProduct(instance As BCRoomProduct)
    End Sub
    Partial Private Sub DeleteBCRoomProduct(instance As BCRoomProduct)
    End Sub
    Partial Private Sub InsertFixedShippingRate(instance As FixedShippingRate)
    End Sub
    Partial Private Sub UpdateFixedShippingRate(instance As FixedShippingRate)
    End Sub
    Partial Private Sub DeleteFixedShippingRate(instance As FixedShippingRate)
    End Sub
    Partial Private Sub InsertPromoCode(instance As PromoCode)
    End Sub
    Partial Private Sub UpdatePromoCode(instance As PromoCode)
    End Sub
    Partial Private Sub DeletePromoCode(instance As PromoCode)
    End Sub
    Partial Private Sub InsertFixedShippingZone(instance As FixedShippingZone)
    End Sub
    Partial Private Sub UpdateFixedShippingZone(instance As FixedShippingZone)
    End Sub
    Partial Private Sub DeleteFixedShippingZone(instance As FixedShippingZone)
    End Sub
    Partial Private Sub InsertPropertyFeature(instance As PropertyFeature)
    End Sub
    Partial Private Sub UpdatePropertyFeature(instance As PropertyFeature)
    End Sub
    Partial Private Sub DeletePropertyFeature(instance As PropertyFeature)
    End Sub
    Partial Private Sub InsertFeature(instance As Feature)
    End Sub
    Partial Private Sub UpdateFeature(instance As Feature)
    End Sub
    Partial Private Sub DeleteFeature(instance As Feature)
    End Sub
    Partial Private Sub InsertProperty(instance As [Property])
    End Sub
    Partial Private Sub UpdateProperty(instance As [Property])
    End Sub
    Partial Private Sub DeleteProperty(instance As [Property])
    End Sub
    Partial Private Sub InsertSalesRequest(instance As SalesRequest)
    End Sub
    Partial Private Sub UpdateSalesRequest(instance As SalesRequest)
    End Sub
    Partial Private Sub DeleteSalesRequest(instance As SalesRequest)
    End Sub
    Partial Private Sub InsertOrder(instance As [Order])
    End Sub
    Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
    Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
    Partial Private Sub InsertProgramInstructor(instance As ProgramInstructor)
    End Sub
    Partial Private Sub UpdateProgramInstructor(instance As ProgramInstructor)
    End Sub
    Partial Private Sub DeleteProgramInstructor(instance As ProgramInstructor)
    End Sub
    Partial Private Sub InsertColor(instance As Color)
    End Sub
    Partial Private Sub UpdateColor(instance As Color)
    End Sub
    Partial Private Sub DeleteColor(instance As Color)
    End Sub
    Partial Private Sub InsertSize(instance As Size)
    End Sub
    Partial Private Sub UpdateSize(instance As Size)
    End Sub
    Partial Private Sub DeleteSize(instance As Size)
    End Sub
    Partial Private Sub InsertProgram(instance As Program)
    End Sub
    Partial Private Sub UpdateProgram(instance As Program)
    End Sub
    Partial Private Sub DeleteProgram(instance As Program)
    End Sub
    Partial Private Sub InsertInstructor(instance As Instructor)
    End Sub
    Partial Private Sub UpdateInstructor(instance As Instructor)
    End Sub
    Partial Private Sub DeleteInstructor(instance As Instructor)
    End Sub
    Partial Private Sub InsertRegisteredUser(instance As RegisteredUser)
    End Sub
    Partial Private Sub UpdateRegisteredUser(instance As RegisteredUser)
    End Sub
    Partial Private Sub DeleteRegisteredUser(instance As RegisteredUser)
    End Sub
    Partial Private Sub InsertBooking(instance As Booking)
    End Sub
    Partial Private Sub UpdateBooking(instance As Booking)
    End Sub
    Partial Private Sub DeleteBooking(instance As Booking)
    End Sub
    Partial Private Sub InsertSchedule(instance As Schedule)
    End Sub
    Partial Private Sub UpdateSchedule(instance As Schedule)
    End Sub
    Partial Private Sub DeleteSchedule(instance As Schedule)
    End Sub
    Partial Private Sub InsertBrand(instance As Brand)
    End Sub
    Partial Private Sub UpdateBrand(instance As Brand)
    End Sub
    Partial Private Sub DeleteBrand(instance As Brand)
    End Sub
    Partial Private Sub InsertProductRecomendation(instance As ProductRecomendation)
    End Sub
    Partial Private Sub UpdateProductRecomendation(instance As ProductRecomendation)
    End Sub
    Partial Private Sub DeleteProductRecomendation(instance As ProductRecomendation)
    End Sub
    Partial Private Sub InsertCategory(instance As Category)
    End Sub
    Partial Private Sub UpdateCategory(instance As Category)
    End Sub
    Partial Private Sub DeleteCategory(instance As Category)
    End Sub
    Partial Private Sub InsertProductOption(instance As ProductOption)
    End Sub
    Partial Private Sub UpdateProductOption(instance As ProductOption)
    End Sub
    Partial Private Sub DeleteProductOption(instance As ProductOption)
    End Sub
    Partial Private Sub InsertProductCategory(instance As ProductCategory)
    End Sub
    Partial Private Sub UpdateProductCategory(instance As ProductCategory)
    End Sub
    Partial Private Sub DeleteProductCategory(instance As ProductCategory)
    End Sub
    Partial Private Sub InsertProduct(instance As Product)
    End Sub
    Partial Private Sub UpdateProduct(instance As Product)
    End Sub
    Partial Private Sub DeleteProduct(instance As Product)
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MainConnectionString").ConnectionString, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property ProductColors() As System.Data.Linq.Table(Of ProductColor)
			Get
				Return Me.GetTable(Of ProductColor)
			End Get
		End Property
		
		Public ReadOnly Property ProductImages() As System.Data.Linq.Table(Of ProductImage)
			Get
				Return Me.GetTable(Of ProductImage)
			End Get
		End Property
		
		Public ReadOnly Property CreditCardTypes() As System.Data.Linq.Table(Of CreditCardType)
			Get
				Return Me.GetTable(Of CreditCardType)
			End Get
		End Property
		
		Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of OrderItem)
			Get
				Return Me.GetTable(Of OrderItem)
			End Get
		End Property
		
		Public ReadOnly Property CreditCardPayments() As System.Data.Linq.Table(Of CreditCardPayment)
			Get
				Return Me.GetTable(Of CreditCardPayment)
			End Get
		End Property
		
		Public ReadOnly Property Countries() As System.Data.Linq.Table(Of Country)
			Get
				Return Me.GetTable(Of Country)
			End Get
		End Property
		
		Public ReadOnly Property Provinces() As System.Data.Linq.Table(Of Province)
			Get
				Return Me.GetTable(Of Province)
			End Get
		End Property
		
		Public ReadOnly Property EStore_SimpleOrderViews() As System.Data.Linq.Table(Of EStore_SimpleOrderView)
			Get
				Return Me.GetTable(Of EStore_SimpleOrderView)
			End Get
		End Property
		
		Public ReadOnly Property ProductSizes() As System.Data.Linq.Table(Of ProductSize)
			Get
				Return Me.GetTable(Of ProductSize)
			End Get
		End Property
		
		Public ReadOnly Property SimpleUsers() As System.Data.Linq.Table(Of SimpleUser)
			Get
				Return Me.GetTable(Of SimpleUser)
			End Get
		End Property
		
		Public ReadOnly Property Addresses() As System.Data.Linq.Table(Of Address)
			Get
				Return Me.GetTable(Of Address)
			End Get
		End Property
		
		Public ReadOnly Property BeanStreamPayments() As System.Data.Linq.Table(Of BeanStreamPayment)
			Get
				Return Me.GetTable(Of BeanStreamPayment)
			End Get
		End Property
		
		Public ReadOnly Property ShoppingCarts() As System.Data.Linq.Table(Of ShoppingCart)
			Get
				Return Me.GetTable(Of ShoppingCart)
			End Get
		End Property
		
		Public ReadOnly Property Inventories() As System.Data.Linq.Table(Of Inventory)
			Get
				Return Me.GetTable(Of Inventory)
			End Get
		End Property
		
		Public ReadOnly Property ProductReviews() As System.Data.Linq.Table(Of ProductReview)
			Get
				Return Me.GetTable(Of ProductReview)
			End Get
		End Property
		
		Public ReadOnly Property MenuCategoryItems() As System.Data.Linq.Table(Of MenuCategoryItem)
			Get
				Return Me.GetTable(Of MenuCategoryItem)
			End Get
		End Property
		
		Public ReadOnly Property MenuCategories() As System.Data.Linq.Table(Of MenuCategory)
			Get
				Return Me.GetTable(Of MenuCategory)
			End Get
		End Property
		
		Public ReadOnly Property ProductDownloads() As System.Data.Linq.Table(Of ProductDownload)
			Get
				Return Me.GetTable(Of ProductDownload)
			End Get
		End Property
		
		Public ReadOnly Property BCRooms() As System.Data.Linq.Table(Of BCRoom)
			Get
				Return Me.GetTable(Of BCRoom)
			End Get
		End Property
		
		Public ReadOnly Property BCRoomProducts() As System.Data.Linq.Table(Of BCRoomProduct)
			Get
				Return Me.GetTable(Of BCRoomProduct)
			End Get
		End Property
		
		Public ReadOnly Property FixedShippingRates() As System.Data.Linq.Table(Of FixedShippingRate)
			Get
				Return Me.GetTable(Of FixedShippingRate)
			End Get
		End Property
		
		Public ReadOnly Property PromoCodes() As System.Data.Linq.Table(Of PromoCode)
			Get
				Return Me.GetTable(Of PromoCode)
			End Get
		End Property
		
		Public ReadOnly Property FixedShippingZones() As System.Data.Linq.Table(Of FixedShippingZone)
			Get
				Return Me.GetTable(Of FixedShippingZone)
			End Get
		End Property
		
		Public ReadOnly Property PropertyFeatures() As System.Data.Linq.Table(Of PropertyFeature)
			Get
				Return Me.GetTable(Of PropertyFeature)
			End Get
		End Property
		
		Public ReadOnly Property Features() As System.Data.Linq.Table(Of Feature)
			Get
				Return Me.GetTable(Of Feature)
			End Get
		End Property
		
		Public ReadOnly Property Properties() As System.Data.Linq.Table(Of [Property])
			Get
				Return Me.GetTable(Of [Property])
			End Get
		End Property
		
		Public ReadOnly Property SalesRequests() As System.Data.Linq.Table(Of SalesRequest)
			Get
				Return Me.GetTable(Of SalesRequest)
			End Get
		End Property
		
		Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
			Get
				Return Me.GetTable(Of [Order])
			End Get
		End Property
		
		Public ReadOnly Property ProgramInstructors() As System.Data.Linq.Table(Of ProgramInstructor)
			Get
				Return Me.GetTable(Of ProgramInstructor)
			End Get
		End Property
		
		Public ReadOnly Property Colors() As System.Data.Linq.Table(Of Color)
			Get
				Return Me.GetTable(Of Color)
			End Get
		End Property
		
		Public ReadOnly Property Sizes() As System.Data.Linq.Table(Of Size)
			Get
				Return Me.GetTable(Of Size)
			End Get
		End Property
		
		Public ReadOnly Property Programs() As System.Data.Linq.Table(Of Program)
			Get
				Return Me.GetTable(Of Program)
			End Get
		End Property
		
		Public ReadOnly Property Instructors() As System.Data.Linq.Table(Of Instructor)
			Get
				Return Me.GetTable(Of Instructor)
			End Get
		End Property
		
		Public ReadOnly Property RegisteredUsers() As System.Data.Linq.Table(Of RegisteredUser)
			Get
				Return Me.GetTable(Of RegisteredUser)
			End Get
		End Property
		
		Public ReadOnly Property Bookings() As System.Data.Linq.Table(Of Booking)
			Get
				Return Me.GetTable(Of Booking)
			End Get
		End Property
		
		Public ReadOnly Property Schedules() As System.Data.Linq.Table(Of Schedule)
			Get
				Return Me.GetTable(Of Schedule)
			End Get
		End Property
		
		Public ReadOnly Property Brands() As System.Data.Linq.Table(Of Brand)
			Get
				Return Me.GetTable(Of Brand)
			End Get
		End Property
		
		Public ReadOnly Property ProductRecomendations() As System.Data.Linq.Table(Of ProductRecomendation)
			Get
				Return Me.GetTable(Of ProductRecomendation)
			End Get
		End Property
		
		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
			Get
				Return Me.GetTable(Of Category)
			End Get
		End Property
		
		Public ReadOnly Property ProductOptions() As System.Data.Linq.Table(Of ProductOption)
			Get
				Return Me.GetTable(Of ProductOption)
			End Get
		End Property
		
		Public ReadOnly Property ProductCategories() As System.Data.Linq.Table(Of ProductCategory)
			Get
				Return Me.GetTable(Of ProductCategory)
			End Get
		End Property
		
		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_GetSimpleOrders")>  _
		Public Function sp_GetSimpleOrders() As ISingleResult(Of sp_GetSimpleOrdersResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
			Return CType(result.ReturnValue,ISingleResult(Of sp_GetSimpleOrdersResult))
		End Function
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CheckPrefix", IsComposable:=true)>  _
		Public Function CheckPrefix(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Prefix", DbType:="NVarChar(4000)")> ByVal prefix As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrefixLow", DbType:="NVarChar(4000)")> ByVal prefixLow As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrefixHigh", DbType:="NVarChar(4000)")> ByVal prefixHigh As String) As System.Nullable(Of Boolean)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), prefix, prefixLow, prefixHigh).ReturnValue,System.Nullable(Of Boolean))
		End Function
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductColor")>  _
	Partial Public Class ProductColor
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _ColorID As Integer
		
		Private _ProductID As Integer
		
		Private _ImageID As System.Nullable(Of Integer)
		
		Private _Color As EntityRef(Of Color)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnColorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Color = CType(Nothing, EntityRef(Of Color))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorID", DbType:="Int NOT NULL")>  _
		Public Property ColorID() As Integer
			Get
				Return Me._ColorID
			End Get
			Set
				If ((Me._ColorID = value)  _
							= false) Then
					If Me._Color.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnColorIDChanging(value)
					Me.SendPropertyChanging
					Me._ColorID = value
					Me.SendPropertyChanged("ColorID")
					Me.OnColorIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int")>  _
		Public Property ImageID() As System.Nullable(Of Integer)
			Get
				Return Me._ImageID
			End Get
			Set
				If (Me._ImageID.Equals(value) = false) Then
					Me.OnImageIDChanging(value)
					Me.SendPropertyChanging
					Me._ImageID = value
					Me.SendPropertyChanged("ImageID")
					Me.OnImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ProductColor", Storage:="_Color", ThisKey:="ColorID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Color() As Color
			Get
				Return Me._Color.Entity
			End Get
			Set
				Dim previousValue As Color = Me._Color.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Color.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Color.Entity = Nothing
						previousValue.ProductColors.Remove(Me)
					End If
					Me._Color.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductColors.Add(Me)
						Me._ColorID = value.ID
					Else
						Me._ColorID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Color")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductColor", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductColors.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductColors.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductImage")>  _
	Partial Public Class ProductImage
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _ImageID As Integer
		
		Private _ProductID As Integer
		
		Private _Description As String
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int NOT NULL")>  _
		Public Property ImageID() As Integer
			Get
				Return Me._ImageID
			End Get
			Set
				If ((Me._ImageID = value)  _
							= false) Then
					Me.OnImageIDChanging(value)
					Me.SendPropertyChanging
					Me._ImageID = value
					Me.SendPropertyChanged("ImageID")
					Me.OnImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductImage", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductImages.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductImages.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CreditCardType")>  _
	Partial Public Class CreditCardType
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Type As String
		
		Private _CreditCardPayments As EntitySet(Of CreditCardPayment)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CreditCardPayments = New EntitySet(Of CreditCardPayment)(AddressOf Me.attach_CreditCardPayments, AddressOf Me.detach_CreditCardPayments)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Type() As String
			Get
				Return Me._Type
			End Get
			Set
				If (String.Equals(Me._Type, value) = false) Then
					Me.OnTypeChanging(value)
					Me.SendPropertyChanging
					Me._Type = value
					Me.SendPropertyChanged("Type")
					Me.OnTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CreditCardType_CreditCardPayment", Storage:="_CreditCardPayments", ThisKey:="ID", OtherKey:="CCTypeID")>  _
		Public Property CreditCardPayments() As EntitySet(Of CreditCardPayment)
			Get
				Return Me._CreditCardPayments
			End Get
			Set
				Me._CreditCardPayments.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_CreditCardPayments(ByVal entity As CreditCardPayment)
			Me.SendPropertyChanging
			entity.CreditCardType = Me
		End Sub
		
		Private Sub detach_CreditCardPayments(ByVal entity As CreditCardPayment)
			Me.SendPropertyChanging
			entity.CreditCardType = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderItem")>  _
	Partial Public Class OrderItem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _OrderID As Integer
		
		Private _ProductID As Integer
		
		Private _ColorID As Integer
		
		Private _SizeID As Integer
		
		Private _Quantity As Integer
		
		Private _Price As Decimal
		
		Private _Shipped As Boolean
		
		Private _ShippedDate As System.Nullable(Of Date)
		
		Private _TrackingNum As String
		
		Private _ProductDownloads As EntitySet(Of ProductDownload)
		
		Private _Order As EntityRef(Of [Order])
		
		Private _Color As EntityRef(Of Color)
		
		Private _Size As EntityRef(Of Size)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnColorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnShippedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShippedChanged()
    End Sub
    Partial Private Sub OnShippedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShippedDateChanged()
    End Sub
    Partial Private Sub OnTrackingNumChanging(value As String)
    End Sub
    Partial Private Sub OnTrackingNumChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProductDownloads = New EntitySet(Of ProductDownload)(AddressOf Me.attach_ProductDownloads, AddressOf Me.detach_ProductDownloads)
			Me._Order = CType(Nothing, EntityRef(Of [Order]))
			Me._Color = CType(Nothing, EntityRef(Of Color))
			Me._Size = CType(Nothing, EntityRef(Of Size))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorID", DbType:="Int NOT NULL")>  _
		Public Property ColorID() As Integer
			Get
				Return Me._ColorID
			End Get
			Set
				If ((Me._ColorID = value)  _
							= false) Then
					If Me._Color.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnColorIDChanging(value)
					Me.SendPropertyChanging
					Me._ColorID = value
					Me.SendPropertyChanged("ColorID")
					Me.OnColorIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int NOT NULL")>  _
		Public Property SizeID() As Integer
			Get
				Return Me._SizeID
			End Get
			Set
				If ((Me._SizeID = value)  _
							= false) Then
					If Me._Size.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSizeIDChanging(value)
					Me.SendPropertyChanging
					Me._SizeID = value
					Me.SendPropertyChanged("SizeID")
					Me.OnSizeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Price() As Decimal
			Get
				Return Me._Price
			End Get
			Set
				If ((Me._Price = value)  _
							= false) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shipped", DbType:="Bit NOT NULL")>  _
		Public Property Shipped() As Boolean
			Get
				Return Me._Shipped
			End Get
			Set
				If ((Me._Shipped = value)  _
							= false) Then
					Me.OnShippedChanging(value)
					Me.SendPropertyChanging
					Me._Shipped = value
					Me.SendPropertyChanged("Shipped")
					Me.OnShippedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedDate", DbType:="DateTime")>  _
		Public Property ShippedDate() As System.Nullable(Of Date)
			Get
				Return Me._ShippedDate
			End Get
			Set
				If (Me._ShippedDate.Equals(value) = false) Then
					Me.OnShippedDateChanging(value)
					Me.SendPropertyChanging
					Me._ShippedDate = value
					Me.SendPropertyChanged("ShippedDate")
					Me.OnShippedDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackingNum", DbType:="NVarChar(50)")>  _
		Public Property TrackingNum() As String
			Get
				Return Me._TrackingNum
			End Get
			Set
				If (String.Equals(Me._TrackingNum, value) = false) Then
					Me.OnTrackingNumChanging(value)
					Me.SendPropertyChanging
					Me._TrackingNum = value
					Me.SendPropertyChanged("TrackingNum")
					Me.OnTrackingNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_ProductDownload", Storage:="_ProductDownloads", ThisKey:="ID", OtherKey:="OrderItemID")>  _
		Public Property ProductDownloads() As EntitySet(Of ProductDownload)
			Get
				Return Me._ProductDownloads
			End Get
			Set
				Me._ProductDownloads.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property [Order]() As [Order]
			Get
				Return Me._Order.Entity
			End Get
			Set
				Dim previousValue As [Order] = Me._Order.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Order.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Order.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._OrderID = value.ID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Order]")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_OrderItem", Storage:="_Color", ThisKey:="ColorID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Color() As Color
			Get
				Return Me._Color.Entity
			End Get
			Set
				Dim previousValue As Color = Me._Color.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Color.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Color.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Color.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._ColorID = value.ID
					Else
						Me._ColorID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Color")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_OrderItem", Storage:="_Size", ThisKey:="SizeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Size() As Size
			Get
				Return Me._Size.Entity
			End Get
			Set
				Dim previousValue As Size = Me._Size.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Size.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Size.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Size.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._SizeID = value.ID
					Else
						Me._SizeID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Size")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderItem", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProductDownloads(ByVal entity As ProductDownload)
			Me.SendPropertyChanging
			entity.OrderItem = Me
		End Sub
		
		Private Sub detach_ProductDownloads(ByVal entity As ProductDownload)
			Me.SendPropertyChanging
			entity.OrderItem = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CreditCardPayment")>  _
	Partial Public Class CreditCardPayment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _OrderID As Integer
		
		Private _CCTypeID As Integer
		
		Private _CCNumber As String
		
		Private _CCExpiration As Date
		
		Private _CCEncryptionKey As String
		
		Private _CCValidationNum As String
		
		Private _FirstName As String
		
		Private _MiddleName As String
		
		Private _LastName As String
		
		Private _CCResponse As String
		
		Private _CCPCZIP As String
		
		Private _Charge As System.Nullable(Of Decimal)
		
		Private _AuthCode As String
		
		Private _CreditCardType As EntityRef(Of CreditCardType)
		
		Private _Order As EntityRef(Of [Order])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnCCTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCCTypeIDChanged()
    End Sub
    Partial Private Sub OnCCNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCCNumberChanged()
    End Sub
    Partial Private Sub OnCCExpirationChanging(value As Date)
    End Sub
    Partial Private Sub OnCCExpirationChanged()
    End Sub
    Partial Private Sub OnCCEncryptionKeyChanging(value As String)
    End Sub
    Partial Private Sub OnCCEncryptionKeyChanged()
    End Sub
    Partial Private Sub OnCCValidationNumChanging(value As String)
    End Sub
    Partial Private Sub OnCCValidationNumChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnCCResponseChanging(value As String)
    End Sub
    Partial Private Sub OnCCResponseChanged()
    End Sub
    Partial Private Sub OnCCPCZIPChanging(value As String)
    End Sub
    Partial Private Sub OnCCPCZIPChanged()
    End Sub
    Partial Private Sub OnChargeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnChargeChanged()
    End Sub
    Partial Private Sub OnAuthCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAuthCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CreditCardType = CType(Nothing, EntityRef(Of CreditCardType))
			Me._Order = CType(Nothing, EntityRef(Of [Order]))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCTypeID", DbType:="Int NOT NULL")>  _
		Public Property CCTypeID() As Integer
			Get
				Return Me._CCTypeID
			End Get
			Set
				If ((Me._CCTypeID = value)  _
							= false) Then
					If Me._CreditCardType.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCCTypeIDChanging(value)
					Me.SendPropertyChanging
					Me._CCTypeID = value
					Me.SendPropertyChanged("CCTypeID")
					Me.OnCCTypeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCNumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CCNumber() As String
			Get
				Return Me._CCNumber
			End Get
			Set
				If (String.Equals(Me._CCNumber, value) = false) Then
					Me.OnCCNumberChanging(value)
					Me.SendPropertyChanging
					Me._CCNumber = value
					Me.SendPropertyChanged("CCNumber")
					Me.OnCCNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCExpiration", DbType:="DateTime NOT NULL")>  _
		Public Property CCExpiration() As Date
			Get
				Return Me._CCExpiration
			End Get
			Set
				If ((Me._CCExpiration = value)  _
							= false) Then
					Me.OnCCExpirationChanging(value)
					Me.SendPropertyChanging
					Me._CCExpiration = value
					Me.SendPropertyChanged("CCExpiration")
					Me.OnCCExpirationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCEncryptionKey", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CCEncryptionKey() As String
			Get
				Return Me._CCEncryptionKey
			End Get
			Set
				If (String.Equals(Me._CCEncryptionKey, value) = false) Then
					Me.OnCCEncryptionKeyChanging(value)
					Me.SendPropertyChanging
					Me._CCEncryptionKey = value
					Me.SendPropertyChanged("CCEncryptionKey")
					Me.OnCCEncryptionKeyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCValidationNum", DbType:="NVarChar(4) NOT NULL", CanBeNull:=false)>  _
		Public Property CCValidationNum() As String
			Get
				Return Me._CCValidationNum
			End Get
			Set
				If (String.Equals(Me._CCValidationNum, value) = false) Then
					Me.OnCCValidationNumChanging(value)
					Me.SendPropertyChanging
					Me._CCValidationNum = value
					Me.SendPropertyChanged("CCValidationNum")
					Me.OnCCValidationNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property MiddleName() As String
			Get
				Return Me._MiddleName
			End Get
			Set
				If (String.Equals(Me._MiddleName, value) = false) Then
					Me.OnMiddleNameChanging(value)
					Me.SendPropertyChanging
					Me._MiddleName = value
					Me.SendPropertyChanged("MiddleName")
					Me.OnMiddleNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCResponse", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CCResponse() As String
			Get
				Return Me._CCResponse
			End Get
			Set
				If (String.Equals(Me._CCResponse, value) = false) Then
					Me.OnCCResponseChanging(value)
					Me.SendPropertyChanging
					Me._CCResponse = value
					Me.SendPropertyChanged("CCResponse")
					Me.OnCCResponseChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCPCZIP", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CCPCZIP() As String
			Get
				Return Me._CCPCZIP
			End Get
			Set
				If (String.Equals(Me._CCPCZIP, value) = false) Then
					Me.OnCCPCZIPChanging(value)
					Me.SendPropertyChanging
					Me._CCPCZIP = value
					Me.SendPropertyChanged("CCPCZIP")
					Me.OnCCPCZIPChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Charge", DbType:="Decimal(18,2)")>  _
		Public Property Charge() As System.Nullable(Of Decimal)
			Get
				Return Me._Charge
			End Get
			Set
				If (Me._Charge.Equals(value) = false) Then
					Me.OnChargeChanging(value)
					Me.SendPropertyChanging
					Me._Charge = value
					Me.SendPropertyChanged("Charge")
					Me.OnChargeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthCode", DbType:="NVarChar(50)")>  _
		Public Property AuthCode() As String
			Get
				Return Me._AuthCode
			End Get
			Set
				If (String.Equals(Me._AuthCode, value) = false) Then
					Me.OnAuthCodeChanging(value)
					Me.SendPropertyChanging
					Me._AuthCode = value
					Me.SendPropertyChanged("AuthCode")
					Me.OnAuthCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CreditCardType_CreditCardPayment", Storage:="_CreditCardType", ThisKey:="CCTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property CreditCardType() As CreditCardType
			Get
				Return Me._CreditCardType.Entity
			End Get
			Set
				Dim previousValue As CreditCardType = Me._CreditCardType.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CreditCardType.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CreditCardType.Entity = Nothing
						previousValue.CreditCardPayments.Remove(Me)
					End If
					Me._CreditCardType.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CreditCardPayments.Add(Me)
						Me._CCTypeID = value.ID
					Else
						Me._CCTypeID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("CreditCardType")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_CreditCardPayment", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property [Order]() As [Order]
			Get
				Return Me._Order.Entity
			End Get
			Set
				Dim previousValue As [Order] = Me._Order.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Order.Entity = Nothing
						previousValue.CreditCardPayments.Remove(Me)
					End If
					Me._Order.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CreditCardPayments.Add(Me)
						Me._OrderID = value.ID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Order]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Country")>  _
	Partial Public Class Country
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Tax As Decimal
		
		Private _Code As String
		
		Private _Provinces As EntitySet(Of Province)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTaxChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Provinces = New EntitySet(Of Province)(AddressOf Me.attach_Provinces, AddressOf Me.detach_Provinces)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tax", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Tax() As Decimal
			Get
				Return Me._Tax
			End Get
			Set
				If ((Me._Tax = value)  _
							= false) Then
					Me.OnTaxChanging(value)
					Me.SendPropertyChanging
					Me._Tax = value
					Me.SendPropertyChanged("Tax")
					Me.OnTaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(2)")>  _
		Public Property Code() As String
			Get
				Return Me._Code
			End Get
			Set
				If (String.Equals(Me._Code, value) = false) Then
					Me.OnCodeChanging(value)
					Me.SendPropertyChanging
					Me._Code = value
					Me.SendPropertyChanged("Code")
					Me.OnCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_Province", Storage:="_Provinces", ThisKey:="ID", OtherKey:="CountryID")>  _
		Public Property Provinces() As EntitySet(Of Province)
			Get
				Return Me._Provinces
			End Get
			Set
				Me._Provinces.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Provinces(ByVal entity As Province)
			Me.SendPropertyChanging
			entity.Country = Me
		End Sub
		
		Private Sub detach_Provinces(ByVal entity As Province)
			Me.SendPropertyChanging
			entity.Country = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Province")>  _
	Partial Public Class Province
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Tax As Decimal
		
		Private _CountryID As Integer
		
		Private _Code As String
		
		Private _Addresses As EntitySet(Of Address)
		
		Private _FixedShippingZones As EntitySet(Of FixedShippingZone)
		
		Private _Country As EntityRef(Of Country)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTaxChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxChanged()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Addresses = New EntitySet(Of Address)(AddressOf Me.attach_Addresses, AddressOf Me.detach_Addresses)
			Me._FixedShippingZones = New EntitySet(Of FixedShippingZone)(AddressOf Me.attach_FixedShippingZones, AddressOf Me.detach_FixedShippingZones)
			Me._Country = CType(Nothing, EntityRef(Of Country))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tax", DbType:="Decimal(18,3) NOT NULL")>  _
		Public Property Tax() As Decimal
			Get
				Return Me._Tax
			End Get
			Set
				If ((Me._Tax = value)  _
							= false) Then
					Me.OnTaxChanging(value)
					Me.SendPropertyChanging
					Me._Tax = value
					Me.SendPropertyChanged("Tax")
					Me.OnTaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryID", DbType:="Int NOT NULL")>  _
		Public Property CountryID() As Integer
			Get
				Return Me._CountryID
			End Get
			Set
				If ((Me._CountryID = value)  _
							= false) Then
					If Me._Country.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCountryIDChanging(value)
					Me.SendPropertyChanging
					Me._CountryID = value
					Me.SendPropertyChanged("CountryID")
					Me.OnCountryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(5)")>  _
		Public Property Code() As String
			Get
				Return Me._Code
			End Get
			Set
				If (String.Equals(Me._Code, value) = false) Then
					Me.OnCodeChanging(value)
					Me.SendPropertyChanging
					Me._Code = value
					Me.SendPropertyChanged("Code")
					Me.OnCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_Address", Storage:="_Addresses", ThisKey:="ID", OtherKey:="ProvStateID")>  _
		Public Property Addresses() As EntitySet(Of Address)
			Get
				Return Me._Addresses
			End Get
			Set
				Me._Addresses.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_FixedShippingZone", Storage:="_FixedShippingZones", ThisKey:="ID", OtherKey:="ProvinceID")>  _
		Public Property FixedShippingZones() As EntitySet(Of FixedShippingZone)
			Get
				Return Me._FixedShippingZones
			End Get
			Set
				Me._FixedShippingZones.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_Province", Storage:="_Country", ThisKey:="CountryID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Country() As Country
			Get
				Return Me._Country.Entity
			End Get
			Set
				Dim previousValue As Country = Me._Country.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Country.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Country.Entity = Nothing
						previousValue.Provinces.Remove(Me)
					End If
					Me._Country.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Provinces.Add(Me)
						Me._CountryID = value.ID
					Else
						Me._CountryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Country")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Addresses(ByVal entity As Address)
			Me.SendPropertyChanging
			entity.Province = Me
		End Sub
		
		Private Sub detach_Addresses(ByVal entity As Address)
			Me.SendPropertyChanging
			entity.Province = Nothing
		End Sub
		
		Private Sub attach_FixedShippingZones(ByVal entity As FixedShippingZone)
			Me.SendPropertyChanging
			entity.Province = Me
		End Sub
		
		Private Sub detach_FixedShippingZones(ByVal entity As FixedShippingZone)
			Me.SendPropertyChanging
			entity.Province = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EStore_SimpleOrderView")>  _
	Partial Public Class EStore_SimpleOrderView
		
		Private _ID As System.Nullable(Of Integer)
		
		Private _OrderDate As System.Nullable(Of Date)
		
		Private _ApprovalState As System.Nullable(Of Integer)
		
		Private _PaymentType As System.Nullable(Of Integer)
		
		Private _Shipped As Integer
		
		Private _UserID As System.Nullable(Of Integer)
		
		Private _User As String
		
		Private _Email As String
		
		Private _Items As System.Nullable(Of Integer)
		
		Private _SubTotal As System.Nullable(Of Decimal)
		
		Private _ShipCharge As System.Nullable(Of Decimal)
		
		Private _Taxes As System.Nullable(Of Double)
		
		Private _Total As System.Nullable(Of Double)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int")>  _
		Public Property ID() As System.Nullable(Of Integer)
			Get
				Return Me._ID
			End Get
			Set
				If (Me._ID.Equals(value) = false) Then
					Me._ID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>  _
		Public Property OrderDate() As System.Nullable(Of Date)
			Get
				Return Me._OrderDate
			End Get
			Set
				If (Me._OrderDate.Equals(value) = false) Then
					Me._OrderDate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalState", DbType:="Int")>  _
		Public Property ApprovalState() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovalState
			End Get
			Set
				If (Me._ApprovalState.Equals(value) = false) Then
					Me._ApprovalState = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentType", DbType:="Int")>  _
		Public Property PaymentType() As System.Nullable(Of Integer)
			Get
				Return Me._PaymentType
			End Get
			Set
				If (Me._PaymentType.Equals(value) = false) Then
					Me._PaymentType = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shipped", DbType:="Int NOT NULL")>  _
		Public Property Shipped() As Integer
			Get
				Return Me._Shipped
			End Get
			Set
				If ((Me._Shipped = value)  _
							= false) Then
					Me._Shipped = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
		Public Property UserID() As System.Nullable(Of Integer)
			Get
				Return Me._UserID
			End Get
			Set
				If (Me._UserID.Equals(value) = false) Then
					Me._UserID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[User]", Storage:="_User", DbType:="NVarChar(152)")>  _
		Public Property User() As String
			Get
				Return Me._User
			End Get
			Set
				If (String.Equals(Me._User, value) = false) Then
					Me._User = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(255)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Items", DbType:="Int")>  _
		Public Property Items() As System.Nullable(Of Integer)
			Get
				Return Me._Items
			End Get
			Set
				If (Me._Items.Equals(value) = false) Then
					Me._Items = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Decimal(38,2)")>  _
		Public Property SubTotal() As System.Nullable(Of Decimal)
			Get
				Return Me._SubTotal
			End Get
			Set
				If (Me._SubTotal.Equals(value) = false) Then
					Me._SubTotal = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCharge", DbType:="Decimal(18,2)")>  _
		Public Property ShipCharge() As System.Nullable(Of Decimal)
			Get
				Return Me._ShipCharge
			End Get
			Set
				If (Me._ShipCharge.Equals(value) = false) Then
					Me._ShipCharge = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Taxes", DbType:="Float")>  _
		Public Property Taxes() As System.Nullable(Of Double)
			Get
				Return Me._Taxes
			End Get
			Set
				If (Me._Taxes.Equals(value) = false) Then
					Me._Taxes = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
		Public Property Total() As System.Nullable(Of Double)
			Get
				Return Me._Total
			End Get
			Set
				If (Me._Total.Equals(value) = false) Then
					Me._Total = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductSize")>  _
	Partial Public Class ProductSize
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _SizeID As Integer
		
		Private _ProductID As Integer
		
		Private _Size As EntityRef(Of Size)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Size = CType(Nothing, EntityRef(Of Size))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int NOT NULL")>  _
		Public Property SizeID() As Integer
			Get
				Return Me._SizeID
			End Get
			Set
				If ((Me._SizeID = value)  _
							= false) Then
					If Me._Size.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSizeIDChanging(value)
					Me.SendPropertyChanging
					Me._SizeID = value
					Me.SendPropertyChanged("SizeID")
					Me.OnSizeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_ProductSize", Storage:="_Size", ThisKey:="SizeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Size() As Size
			Get
				Return Me._Size.Entity
			End Get
			Set
				Dim previousValue As Size = Me._Size.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Size.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Size.Entity = Nothing
						previousValue.ProductSizes.Remove(Me)
					End If
					Me._Size.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductSizes.Add(Me)
						Me._SizeID = value.ID
					Else
						Me._SizeID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Size")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductSize", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductSizes.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductSizes.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SimpleUser")>  _
	Partial Public Class SimpleUser
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _FirstName As String
		
		Private _MiddleName As String
		
		Private _LastName As String
		
		Private _Email As String
		
		Private _PhoneNumber As String
		
		Private _FixedShippingZone As EntityRef(Of FixedShippingZone)
		
		Private _Orders As EntitySet(Of [Order])
		
		Private _RegisteredUsers As EntitySet(Of RegisteredUser)
		
		Private _Bookings As EntitySet(Of Booking)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._FixedShippingZone = CType(Nothing, EntityRef(Of FixedShippingZone))
			Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
			Me._RegisteredUsers = New EntitySet(Of RegisteredUser)(AddressOf Me.attach_RegisteredUsers, AddressOf Me.detach_RegisteredUsers)
			Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
		Public Property MiddleName() As String
			Get
				Return Me._MiddleName
			End Get
			Set
				If (String.Equals(Me._MiddleName, value) = false) Then
					Me.OnMiddleNameChanging(value)
					Me.SendPropertyChanging
					Me._MiddleName = value
					Me.SendPropertyChanged("MiddleName")
					Me.OnMiddleNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property PhoneNumber() As String
			Get
				Return Me._PhoneNumber
			End Get
			Set
				If (String.Equals(Me._PhoneNumber, value) = false) Then
					Me.OnPhoneNumberChanging(value)
					Me.SendPropertyChanging
					Me._PhoneNumber = value
					Me.SendPropertyChanged("PhoneNumber")
					Me.OnPhoneNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_FixedShippingZone", Storage:="_FixedShippingZone", ThisKey:="ID", OtherKey:="ID", IsUnique:=true, IsForeignKey:=false)>  _
		Public Property FixedShippingZone() As FixedShippingZone
			Get
				Return Me._FixedShippingZone.Entity
			End Get
			Set
				Dim previousValue As FixedShippingZone = Me._FixedShippingZone.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._FixedShippingZone.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._FixedShippingZone.Entity = Nothing
						previousValue.SimpleUser = Nothing
					End If
					Me._FixedShippingZone.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.SimpleUser = Me
					End If
					Me.SendPropertyChanged("FixedShippingZone")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_Order", Storage:="_Orders", ThisKey:="ID", OtherKey:="UserID")>  _
		Public Property Orders() As EntitySet(Of [Order])
			Get
				Return Me._Orders
			End Get
			Set
				Me._Orders.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_RegisteredUser", Storage:="_RegisteredUsers", ThisKey:="ID", OtherKey:="UserID")>  _
		Public Property RegisteredUsers() As EntitySet(Of RegisteredUser)
			Get
				Return Me._RegisteredUsers
			End Get
			Set
				Me._RegisteredUsers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_Booking", Storage:="_Bookings", ThisKey:="ID", OtherKey:="UserMembershipId")>  _
		Public Property Bookings() As EntitySet(Of Booking)
			Get
				Return Me._Bookings
			End Get
			Set
				Me._Bookings.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.SimpleUser = Me
		End Sub
		
		Private Sub detach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.SimpleUser = Nothing
		End Sub
		
		Private Sub attach_RegisteredUsers(ByVal entity As RegisteredUser)
			Me.SendPropertyChanging
			entity.SimpleUser = Me
		End Sub
		
		Private Sub detach_RegisteredUsers(ByVal entity As RegisteredUser)
			Me.SendPropertyChanging
			entity.SimpleUser = Nothing
		End Sub
		
		Private Sub attach_Bookings(ByVal entity As Booking)
			Me.SendPropertyChanging
			entity.SimpleUser = Me
		End Sub
		
		Private Sub detach_Bookings(ByVal entity As Booking)
			Me.SendPropertyChanging
			entity.SimpleUser = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Address")>  _
	Partial Public Class Address
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Address As String
		
		Private _City As String
		
		Private _ProvStateID As Integer
		
		Private _PCZIP As String
		
		Private _Properties As EntitySet(Of [Property])
		
		Private _Orders As EntitySet(Of [Order])
		
		Private _Orders1 As EntitySet(Of [Order])
		
		Private _RegisteredUsers As EntitySet(Of RegisteredUser)
		
		Private _Province As EntityRef(Of Province)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnProvStateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvStateIDChanged()
    End Sub
    Partial Private Sub OnPCZIPChanging(value As String)
    End Sub
    Partial Private Sub OnPCZIPChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
			Me._Orders1 = New EntitySet(Of [Order])(AddressOf Me.attach_Orders1, AddressOf Me.detach_Orders1)
			Me._RegisteredUsers = New EntitySet(Of RegisteredUser)(AddressOf Me.attach_RegisteredUsers, AddressOf Me.detach_RegisteredUsers)
			Me._Province = CType(Nothing, EntityRef(Of Province))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set
				If (String.Equals(Me._Address, value) = false) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvStateID", DbType:="Int NOT NULL")>  _
		Public Property ProvStateID() As Integer
			Get
				Return Me._ProvStateID
			End Get
			Set
				If ((Me._ProvStateID = value)  _
							= false) Then
					If Me._Province.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProvStateIDChanging(value)
					Me.SendPropertyChanging
					Me._ProvStateID = value
					Me.SendPropertyChanged("ProvStateID")
					Me.OnProvStateIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PCZIP", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property PCZIP() As String
			Get
				Return Me._PCZIP
			End Get
			Set
				If (String.Equals(Me._PCZIP, value) = false) Then
					Me.OnPCZIPChanging(value)
					Me.SendPropertyChanging
					Me._PCZIP = value
					Me.SendPropertyChanged("PCZIP")
					Me.OnPCZIPChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Property", Storage:="_Properties", ThisKey:="ID", OtherKey:="AddressId")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order", Storage:="_Orders", ThisKey:="ID", OtherKey:="SAddressID")>  _
		Public Property Orders() As EntitySet(Of [Order])
			Get
				Return Me._Orders
			End Get
			Set
				Me._Orders.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order1", Storage:="_Orders1", ThisKey:="ID", OtherKey:="BAddressID")>  _
		Public Property Orders1() As EntitySet(Of [Order])
			Get
				Return Me._Orders1
			End Get
			Set
				Me._Orders1.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_RegisteredUser", Storage:="_RegisteredUsers", ThisKey:="ID", OtherKey:="AddressID")>  _
		Public Property RegisteredUsers() As EntitySet(Of RegisteredUser)
			Get
				Return Me._RegisteredUsers
			End Get
			Set
				Me._RegisteredUsers.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_Address", Storage:="_Province", ThisKey:="ProvStateID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Province() As Province
			Get
				Return Me._Province.Entity
			End Get
			Set
				Dim previousValue As Province = Me._Province.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Province.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Province.Entity = Nothing
						previousValue.Addresses.Remove(Me)
					End If
					Me._Province.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Addresses.Add(Me)
						Me._ProvStateID = value.ID
					Else
						Me._ProvStateID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Province")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
		
		Private Sub attach_Orders1(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Address1 = Me
		End Sub
		
		Private Sub detach_Orders1(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Address1 = Nothing
		End Sub
		
		Private Sub attach_RegisteredUsers(ByVal entity As RegisteredUser)
			Me.SendPropertyChanging
			entity.Address = Me
		End Sub
		
		Private Sub detach_RegisteredUsers(ByVal entity As RegisteredUser)
			Me.SendPropertyChanging
			entity.Address = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BeanStreamPayment")>  _
	Partial Public Class BeanStreamPayment
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _OrderID As Integer
		
		Private _CCNumber As String
		
		Private _CCValidationNum As String
		
		Private _CCExpYear As String
		
		Private _CCExpMonth As String
		
		Private _Charge As Decimal
		
		Private _TransactionID As System.Nullable(Of Integer)
		
		Private _MessageID As System.Nullable(Of Integer)
		
		Private _MessageText As String
		
		Private _AuthCode As String
		
		Private _ProcessDate As System.Nullable(Of Date)
		
		Private _CCOwner As String
		
		Private _TransactionState As Integer
		
		Private _CCEncryptionKey As String
		
		Private _Order As EntityRef(Of [Order])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnCCNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCCNumberChanged()
    End Sub
    Partial Private Sub OnCCValidationNumChanging(value As String)
    End Sub
    Partial Private Sub OnCCValidationNumChanged()
    End Sub
    Partial Private Sub OnCCExpYearChanging(value As String)
    End Sub
    Partial Private Sub OnCCExpYearChanged()
    End Sub
    Partial Private Sub OnCCExpMonthChanging(value As String)
    End Sub
    Partial Private Sub OnCCExpMonthChanged()
    End Sub
    Partial Private Sub OnChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnChargeChanged()
    End Sub
    Partial Private Sub OnTransactionIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTransactionIDChanged()
    End Sub
    Partial Private Sub OnMessageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMessageIDChanged()
    End Sub
    Partial Private Sub OnMessageTextChanging(value As String)
    End Sub
    Partial Private Sub OnMessageTextChanged()
    End Sub
    Partial Private Sub OnAuthCodeChanging(value As String)
    End Sub
    Partial Private Sub OnAuthCodeChanged()
    End Sub
    Partial Private Sub OnProcessDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnProcessDateChanged()
    End Sub
    Partial Private Sub OnCCOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnCCOwnerChanged()
    End Sub
    Partial Private Sub OnTransactionStateChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransactionStateChanged()
    End Sub
    Partial Private Sub OnCCEncryptionKeyChanging(value As String)
    End Sub
    Partial Private Sub OnCCEncryptionKeyChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Order = CType(Nothing, EntityRef(Of [Order]))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCNumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CCNumber() As String
			Get
				Return Me._CCNumber
			End Get
			Set
				If (String.Equals(Me._CCNumber, value) = false) Then
					Me.OnCCNumberChanging(value)
					Me.SendPropertyChanging
					Me._CCNumber = value
					Me.SendPropertyChanged("CCNumber")
					Me.OnCCNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCValidationNum", DbType:="NVarChar(4) NOT NULL", CanBeNull:=false)>  _
		Public Property CCValidationNum() As String
			Get
				Return Me._CCValidationNum
			End Get
			Set
				If (String.Equals(Me._CCValidationNum, value) = false) Then
					Me.OnCCValidationNumChanging(value)
					Me.SendPropertyChanging
					Me._CCValidationNum = value
					Me.SendPropertyChanged("CCValidationNum")
					Me.OnCCValidationNumChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCExpYear", DbType:="NVarChar(2) NOT NULL", CanBeNull:=false)>  _
		Public Property CCExpYear() As String
			Get
				Return Me._CCExpYear
			End Get
			Set
				If (String.Equals(Me._CCExpYear, value) = false) Then
					Me.OnCCExpYearChanging(value)
					Me.SendPropertyChanging
					Me._CCExpYear = value
					Me.SendPropertyChanged("CCExpYear")
					Me.OnCCExpYearChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCExpMonth", DbType:="NVarChar(2) NOT NULL", CanBeNull:=false)>  _
		Public Property CCExpMonth() As String
			Get
				Return Me._CCExpMonth
			End Get
			Set
				If (String.Equals(Me._CCExpMonth, value) = false) Then
					Me.OnCCExpMonthChanging(value)
					Me.SendPropertyChanging
					Me._CCExpMonth = value
					Me.SendPropertyChanged("CCExpMonth")
					Me.OnCCExpMonthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Charge", DbType:="Decimal(9,2) NOT NULL")>  _
		Public Property Charge() As Decimal
			Get
				Return Me._Charge
			End Get
			Set
				If ((Me._Charge = value)  _
							= false) Then
					Me.OnChargeChanging(value)
					Me.SendPropertyChanging
					Me._Charge = value
					Me.SendPropertyChanged("Charge")
					Me.OnChargeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionID", DbType:="Int")>  _
		Public Property TransactionID() As System.Nullable(Of Integer)
			Get
				Return Me._TransactionID
			End Get
			Set
				If (Me._TransactionID.Equals(value) = false) Then
					Me.OnTransactionIDChanging(value)
					Me.SendPropertyChanging
					Me._TransactionID = value
					Me.SendPropertyChanged("TransactionID")
					Me.OnTransactionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageID", DbType:="Int")>  _
		Public Property MessageID() As System.Nullable(Of Integer)
			Get
				Return Me._MessageID
			End Get
			Set
				If (Me._MessageID.Equals(value) = false) Then
					Me.OnMessageIDChanging(value)
					Me.SendPropertyChanging
					Me._MessageID = value
					Me.SendPropertyChanged("MessageID")
					Me.OnMessageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageText", DbType:="NVarChar(128)")>  _
		Public Property MessageText() As String
			Get
				Return Me._MessageText
			End Get
			Set
				If (String.Equals(Me._MessageText, value) = false) Then
					Me.OnMessageTextChanging(value)
					Me.SendPropertyChanging
					Me._MessageText = value
					Me.SendPropertyChanged("MessageText")
					Me.OnMessageTextChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthCode", DbType:="NVarChar(12)")>  _
		Public Property AuthCode() As String
			Get
				Return Me._AuthCode
			End Get
			Set
				If (String.Equals(Me._AuthCode, value) = false) Then
					Me.OnAuthCodeChanging(value)
					Me.SendPropertyChanging
					Me._AuthCode = value
					Me.SendPropertyChanged("AuthCode")
					Me.OnAuthCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProcessDate", DbType:="DateTime")>  _
		Public Property ProcessDate() As System.Nullable(Of Date)
			Get
				Return Me._ProcessDate
			End Get
			Set
				If (Me._ProcessDate.Equals(value) = false) Then
					Me.OnProcessDateChanging(value)
					Me.SendPropertyChanging
					Me._ProcessDate = value
					Me.SendPropertyChanged("ProcessDate")
					Me.OnProcessDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCOwner", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
		Public Property CCOwner() As String
			Get
				Return Me._CCOwner
			End Get
			Set
				If (String.Equals(Me._CCOwner, value) = false) Then
					Me.OnCCOwnerChanging(value)
					Me.SendPropertyChanging
					Me._CCOwner = value
					Me.SendPropertyChanged("CCOwner")
					Me.OnCCOwnerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionState", DbType:="Int NOT NULL")>  _
		Public Property TransactionState() As Integer
			Get
				Return Me._TransactionState
			End Get
			Set
				If ((Me._TransactionState = value)  _
							= false) Then
					Me.OnTransactionStateChanging(value)
					Me.SendPropertyChanging
					Me._TransactionState = value
					Me.SendPropertyChanged("TransactionState")
					Me.OnTransactionStateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCEncryptionKey", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CCEncryptionKey() As String
			Get
				Return Me._CCEncryptionKey
			End Get
			Set
				If (String.Equals(Me._CCEncryptionKey, value) = false) Then
					Me.OnCCEncryptionKeyChanging(value)
					Me.SendPropertyChanging
					Me._CCEncryptionKey = value
					Me.SendPropertyChanged("CCEncryptionKey")
					Me.OnCCEncryptionKeyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_BeanStreamPayment", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property [Order]() As [Order]
			Get
				Return Me._Order.Entity
			End Get
			Set
				Dim previousValue As [Order] = Me._Order.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Order.Entity = Nothing
						previousValue.BeanStreamPayments.Remove(Me)
					End If
					Me._Order.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BeanStreamPayments.Add(Me)
						Me._OrderID = value.ID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Order]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ShoppingCart")>  _
	Partial Public Class ShoppingCart
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _SessionID As String
		
		Private _UserID As Integer
		
		Private _ProductID As Integer
		
		Private _ColorID As Integer
		
		Private _SizeID As Integer
		
		Private _Quantity As Integer
		
		Private _LastModified As Date
		
		Private _IsMembership As Boolean
		
		Private _Color As EntityRef(Of Color)
		
		Private _Size As EntityRef(Of Size)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSessionIDChanging(value As String)
    End Sub
    Partial Private Sub OnSessionIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnColorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    Partial Private Sub OnIsMembershipChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsMembershipChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Color = CType(Nothing, EntityRef(Of Color))
			Me._Size = CType(Nothing, EntityRef(Of Size))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SessionID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property SessionID() As String
			Get
				Return Me._SessionID
			End Get
			Set
				If (String.Equals(Me._SessionID, value) = false) Then
					Me.OnSessionIDChanging(value)
					Me.SendPropertyChanging
					Me._SessionID = value
					Me.SendPropertyChanged("SessionID")
					Me.OnSessionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorID", DbType:="Int NOT NULL")>  _
		Public Property ColorID() As Integer
			Get
				Return Me._ColorID
			End Get
			Set
				If ((Me._ColorID = value)  _
							= false) Then
					If Me._Color.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnColorIDChanging(value)
					Me.SendPropertyChanging
					Me._ColorID = value
					Me.SendPropertyChanged("ColorID")
					Me.OnColorIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int NOT NULL")>  _
		Public Property SizeID() As Integer
			Get
				Return Me._SizeID
			End Get
			Set
				If ((Me._SizeID = value)  _
							= false) Then
					If Me._Size.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSizeIDChanging(value)
					Me.SendPropertyChanging
					Me._SizeID = value
					Me.SendPropertyChanged("SizeID")
					Me.OnSizeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime NOT NULL")>  _
		Public Property LastModified() As Date
			Get
				Return Me._LastModified
			End Get
			Set
				If ((Me._LastModified = value)  _
							= false) Then
					Me.OnLastModifiedChanging(value)
					Me.SendPropertyChanging
					Me._LastModified = value
					Me.SendPropertyChanged("LastModified")
					Me.OnLastModifiedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMembership", DbType:="Bit NOT NULL")>  _
		Public Property IsMembership() As Boolean
			Get
				Return Me._IsMembership
			End Get
			Set
				If ((Me._IsMembership = value)  _
							= false) Then
					Me.OnIsMembershipChanging(value)
					Me.SendPropertyChanging
					Me._IsMembership = value
					Me.SendPropertyChanged("IsMembership")
					Me.OnIsMembershipChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ShoppingCart", Storage:="_Color", ThisKey:="ColorID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Color() As Color
			Get
				Return Me._Color.Entity
			End Get
			Set
				Dim previousValue As Color = Me._Color.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Color.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Color.Entity = Nothing
						previousValue.ShoppingCarts.Remove(Me)
					End If
					Me._Color.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ShoppingCarts.Add(Me)
						Me._ColorID = value.ID
					Else
						Me._ColorID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Color")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_ShoppingCart", Storage:="_Size", ThisKey:="SizeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Size() As Size
			Get
				Return Me._Size.Entity
			End Get
			Set
				Dim previousValue As Size = Me._Size.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Size.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Size.Entity = Nothing
						previousValue.ShoppingCarts.Remove(Me)
					End If
					Me._Size.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ShoppingCarts.Add(Me)
						Me._SizeID = value.ID
					Else
						Me._SizeID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Size")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ShoppingCart", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ShoppingCarts.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ShoppingCarts.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Inventory")>  _
	Partial Public Class Inventory
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _ProductID As Integer
		
		Private _ColorID As Integer
		
		Private _SizeID As Integer
		
		Private _LastModified As Date
		
		Private _Quantity As Integer
		
		Private _Color As EntityRef(Of Color)
		
		Private _Size As EntityRef(Of Size)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnColorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnColorIDChanged()
    End Sub
    Partial Private Sub OnSizeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSizeIDChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Color = CType(Nothing, EntityRef(Of Color))
			Me._Size = CType(Nothing, EntityRef(Of Size))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorID", DbType:="Int NOT NULL")>  _
		Public Property ColorID() As Integer
			Get
				Return Me._ColorID
			End Get
			Set
				If ((Me._ColorID = value)  _
							= false) Then
					If Me._Color.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnColorIDChanging(value)
					Me.SendPropertyChanging
					Me._ColorID = value
					Me.SendPropertyChanged("ColorID")
					Me.OnColorIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeID", DbType:="Int NOT NULL")>  _
		Public Property SizeID() As Integer
			Get
				Return Me._SizeID
			End Get
			Set
				If ((Me._SizeID = value)  _
							= false) Then
					If Me._Size.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSizeIDChanging(value)
					Me.SendPropertyChanging
					Me._SizeID = value
					Me.SendPropertyChanged("SizeID")
					Me.OnSizeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime NOT NULL")>  _
		Public Property LastModified() As Date
			Get
				Return Me._LastModified
			End Get
			Set
				If ((Me._LastModified = value)  _
							= false) Then
					Me.OnLastModifiedChanging(value)
					Me.SendPropertyChanging
					Me._LastModified = value
					Me.SendPropertyChanged("LastModified")
					Me.OnLastModifiedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_Inventory", Storage:="_Color", ThisKey:="ColorID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Color() As Color
			Get
				Return Me._Color.Entity
			End Get
			Set
				Dim previousValue As Color = Me._Color.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Color.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Color.Entity = Nothing
						previousValue.Inventories.Remove(Me)
					End If
					Me._Color.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Inventories.Add(Me)
						Me._ColorID = value.ID
					Else
						Me._ColorID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Color")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_Inventory", Storage:="_Size", ThisKey:="SizeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Size() As Size
			Get
				Return Me._Size.Entity
			End Get
			Set
				Dim previousValue As Size = Me._Size.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Size.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Size.Entity = Nothing
						previousValue.Inventories.Remove(Me)
					End If
					Me._Size.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Inventories.Add(Me)
						Me._SizeID = value.ID
					Else
						Me._SizeID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Size")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Inventory", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.Inventories.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Inventories.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductReview")>  _
	Partial Public Class ProductReview
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _name As String
		
		Private _email As String
		
		Private _productId As Integer
		
		Private _rating As Integer
		
		Private _comment As String
		
		Private _timestamp As Date
		
		Private _avatarurl As String
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnproductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnproductIdChanged()
    End Sub
    Partial Private Sub OnratingChanging(value As Integer)
    End Sub
    Partial Private Sub OnratingChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As Date)
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnavatarurlChanging(value As String)
    End Sub
    Partial Private Sub OnavatarurlChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property name() As String
			Get
				Return Me._name
			End Get
			Set
				If (String.Equals(Me._name, value) = false) Then
					Me.OnnameChanging(value)
					Me.SendPropertyChanging
					Me._name = value
					Me.SendPropertyChanged("name")
					Me.OnnameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property email() As String
			Get
				Return Me._email
			End Get
			Set
				If (String.Equals(Me._email, value) = false) Then
					Me.OnemailChanging(value)
					Me.SendPropertyChanging
					Me._email = value
					Me.SendPropertyChanged("email")
					Me.OnemailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productId", DbType:="Int NOT NULL")>  _
		Public Property productId() As Integer
			Get
				Return Me._productId
			End Get
			Set
				If ((Me._productId = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnproductIdChanging(value)
					Me.SendPropertyChanging
					Me._productId = value
					Me.SendPropertyChanged("productId")
					Me.OnproductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rating", DbType:="Int NOT NULL")>  _
		Public Property rating() As Integer
			Get
				Return Me._rating
			End Get
			Set
				If ((Me._rating = value)  _
							= false) Then
					Me.OnratingChanging(value)
					Me.SendPropertyChanging
					Me._rating = value
					Me.SendPropertyChanged("rating")
					Me.OnratingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property comment() As String
			Get
				Return Me._comment
			End Get
			Set
				If (String.Equals(Me._comment, value) = false) Then
					Me.OncommentChanging(value)
					Me.SendPropertyChanging
					Me._comment = value
					Me.SendPropertyChanged("comment")
					Me.OncommentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", DbType:="DateTime NOT NULL")>  _
		Public Property timestamp() As Date
			Get
				Return Me._timestamp
			End Get
			Set
				If ((Me._timestamp = value)  _
							= false) Then
					Me.OntimestampChanging(value)
					Me.SendPropertyChanging
					Me._timestamp = value
					Me.SendPropertyChanged("timestamp")
					Me.OntimestampChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_avatarurl", DbType:="NVarChar(255)")>  _
		Public Property avatarurl() As String
			Get
				Return Me._avatarurl
			End Get
			Set
				If (String.Equals(Me._avatarurl, value) = false) Then
					Me.OnavatarurlChanging(value)
					Me.SendPropertyChanging
					Me._avatarurl = value
					Me.SendPropertyChanged("avatarurl")
					Me.OnavatarurlChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductReview", Storage:="_Product", ThisKey:="productId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductReviews.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductReviews.Add(Me)
						Me._productId = value.ID
					Else
						Me._productId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MenuCategoryItem")>  _
	Partial Public Class MenuCategoryItem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _menuCategoryID As Integer
		
		Private _productID As Integer
		
		Private _MenuCategory As EntityRef(Of MenuCategory)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmenuCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmenuCategoryIDChanged()
    End Sub
    Partial Private Sub OnproductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnproductIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._MenuCategory = CType(Nothing, EntityRef(Of MenuCategory))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_menuCategoryID", DbType:="Int NOT NULL")>  _
		Public Property menuCategoryID() As Integer
			Get
				Return Me._menuCategoryID
			End Get
			Set
				If ((Me._menuCategoryID = value)  _
							= false) Then
					If Me._MenuCategory.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnmenuCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._menuCategoryID = value
					Me.SendPropertyChanged("menuCategoryID")
					Me.OnmenuCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_productID", DbType:="Int NOT NULL")>  _
		Public Property productID() As Integer
			Get
				Return Me._productID
			End Get
			Set
				If ((Me._productID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnproductIDChanging(value)
					Me.SendPropertyChanging
					Me._productID = value
					Me.SendPropertyChanged("productID")
					Me.OnproductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MenuCategory_MenuCategoryItem", Storage:="_MenuCategory", ThisKey:="menuCategoryID", OtherKey:="id", IsForeignKey:=true)>  _
		Public Property MenuCategory() As MenuCategory
			Get
				Return Me._MenuCategory.Entity
			End Get
			Set
				Dim previousValue As MenuCategory = Me._MenuCategory.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._MenuCategory.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._MenuCategory.Entity = Nothing
						previousValue.MenuCategoryItems.Remove(Me)
					End If
					Me._MenuCategory.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.MenuCategoryItems.Add(Me)
						Me._menuCategoryID = value.id
					Else
						Me._menuCategoryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("MenuCategory")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MenuCategoryItem", Storage:="_Product", ThisKey:="productID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.MenuCategoryItems.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.MenuCategoryItems.Add(Me)
						Me._productID = value.ID
					Else
						Me._productID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MenuCategory")>  _
	Partial Public Class MenuCategory
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _category As String
		
		Private _MenuCategoryItems As EntitySet(Of MenuCategoryItem)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncategoryChanging(value As String)
    End Sub
    Partial Private Sub OncategoryChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._MenuCategoryItems = New EntitySet(Of MenuCategoryItem)(AddressOf Me.attach_MenuCategoryItems, AddressOf Me.detach_MenuCategoryItems)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_category", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property category() As String
			Get
				Return Me._category
			End Get
			Set
				If (String.Equals(Me._category, value) = false) Then
					Me.OncategoryChanging(value)
					Me.SendPropertyChanging
					Me._category = value
					Me.SendPropertyChanged("category")
					Me.OncategoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MenuCategory_MenuCategoryItem", Storage:="_MenuCategoryItems", ThisKey:="id", OtherKey:="menuCategoryID")>  _
		Public Property MenuCategoryItems() As EntitySet(Of MenuCategoryItem)
			Get
				Return Me._MenuCategoryItems
			End Get
			Set
				Me._MenuCategoryItems.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_MenuCategoryItems(ByVal entity As MenuCategoryItem)
			Me.SendPropertyChanging
			entity.MenuCategory = Me
		End Sub
		
		Private Sub detach_MenuCategoryItems(ByVal entity As MenuCategoryItem)
			Me.SendPropertyChanging
			entity.MenuCategory = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductDownload")>  _
	Partial Public Class ProductDownload
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _GUID As System.Guid
		
		Private _OrderItemID As Integer
		
		Private _Downloads As Integer
		
		Private _Filename As String
		
		Private _OrderItem As EntityRef(Of OrderItem)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnOrderItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderItemIDChanged()
    End Sub
    Partial Private Sub OnDownloadsChanging(value As Integer)
    End Sub
    Partial Private Sub OnDownloadsChanged()
    End Sub
    Partial Private Sub OnFilenameChanging(value As String)
    End Sub
    Partial Private Sub OnFilenameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItem = CType(Nothing, EntityRef(Of OrderItem))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
		Public Property GUID() As System.Guid
			Get
				Return Me._GUID
			End Get
			Set
				If ((Me._GUID = value)  _
							= false) Then
					Me.OnGUIDChanging(value)
					Me.SendPropertyChanging
					Me._GUID = value
					Me.SendPropertyChanged("GUID")
					Me.OnGUIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderItemID", DbType:="Int NOT NULL")>  _
		Public Property OrderItemID() As Integer
			Get
				Return Me._OrderItemID
			End Get
			Set
				If ((Me._OrderItemID = value)  _
							= false) Then
					If Me._OrderItem.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderItemIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderItemID = value
					Me.SendPropertyChanged("OrderItemID")
					Me.OnOrderItemIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Downloads", DbType:="Int NOT NULL")>  _
		Public Property Downloads() As Integer
			Get
				Return Me._Downloads
			End Get
			Set
				If ((Me._Downloads = value)  _
							= false) Then
					Me.OnDownloadsChanging(value)
					Me.SendPropertyChanging
					Me._Downloads = value
					Me.SendPropertyChanged("Downloads")
					Me.OnDownloadsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Filename", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Filename() As String
			Get
				Return Me._Filename
			End Get
			Set
				If (String.Equals(Me._Filename, value) = false) Then
					Me.OnFilenameChanging(value)
					Me.SendPropertyChanging
					Me._Filename = value
					Me.SendPropertyChanged("Filename")
					Me.OnFilenameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_ProductDownload", Storage:="_OrderItem", ThisKey:="OrderItemID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property OrderItem() As OrderItem
			Get
				Return Me._OrderItem.Entity
			End Get
			Set
				Dim previousValue As OrderItem = Me._OrderItem.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._OrderItem.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._OrderItem.Entity = Nothing
						previousValue.ProductDownloads.Remove(Me)
					End If
					Me._OrderItem.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductDownloads.Add(Me)
						Me._OrderItemID = value.ID
					Else
						Me._OrderItemID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("OrderItem")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BCRoom")>  _
	Partial Public Class BCRoom
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _RoomName As String
		
		Private _BCRoomProducts As EntitySet(Of BCRoomProduct)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRoomNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoomNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._BCRoomProducts = New EntitySet(Of BCRoomProduct)(AddressOf Me.attach_BCRoomProducts, AddressOf Me.detach_BCRoomProducts)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoomName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
		Public Property RoomName() As String
			Get
				Return Me._RoomName
			End Get
			Set
				If (String.Equals(Me._RoomName, value) = false) Then
					Me.OnRoomNameChanging(value)
					Me.SendPropertyChanging
					Me._RoomName = value
					Me.SendPropertyChanged("RoomName")
					Me.OnRoomNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BCRoom_BCRoomProduct", Storage:="_BCRoomProducts", ThisKey:="ID", OtherKey:="RoomID")>  _
		Public Property BCRoomProducts() As EntitySet(Of BCRoomProduct)
			Get
				Return Me._BCRoomProducts
			End Get
			Set
				Me._BCRoomProducts.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_BCRoomProducts(ByVal entity As BCRoomProduct)
			Me.SendPropertyChanging
			entity.BCRoom = Me
		End Sub
		
		Private Sub detach_BCRoomProducts(ByVal entity As BCRoomProduct)
			Me.SendPropertyChanging
			entity.BCRoom = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BCRoomProduct")>  _
	Partial Public Class BCRoomProduct
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _RoomID As Integer
		
		Private _ProductID As Integer
		
		Private _Reoccurs As Boolean
		
		Private _Quantity As Integer
		
		Private _BCRoom As EntityRef(Of BCRoom)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRoomIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoomIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnReoccursChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReoccursChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._BCRoom = CType(Nothing, EntityRef(Of BCRoom))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoomID", DbType:="Int NOT NULL")>  _
		Public Property RoomID() As Integer
			Get
				Return Me._RoomID
			End Get
			Set
				If ((Me._RoomID = value)  _
							= false) Then
					If Me._BCRoom.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnRoomIDChanging(value)
					Me.SendPropertyChanging
					Me._RoomID = value
					Me.SendPropertyChanged("RoomID")
					Me.OnRoomIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reoccurs", DbType:="Bit NOT NULL")>  _
		Public Property Reoccurs() As Boolean
			Get
				Return Me._Reoccurs
			End Get
			Set
				If ((Me._Reoccurs = value)  _
							= false) Then
					Me.OnReoccursChanging(value)
					Me.SendPropertyChanging
					Me._Reoccurs = value
					Me.SendPropertyChanged("Reoccurs")
					Me.OnReoccursChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BCRoom_BCRoomProduct", Storage:="_BCRoom", ThisKey:="RoomID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property BCRoom() As BCRoom
			Get
				Return Me._BCRoom.Entity
			End Get
			Set
				Dim previousValue As BCRoom = Me._BCRoom.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._BCRoom.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._BCRoom.Entity = Nothing
						previousValue.BCRoomProducts.Remove(Me)
					End If
					Me._BCRoom.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BCRoomProducts.Add(Me)
						Me._RoomID = value.ID
					Else
						Me._RoomID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("BCRoom")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_BCRoomProduct", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.BCRoomProducts.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.BCRoomProducts.Add(Me)
						Me._ProductID = value.ID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FixedShippingRate")>  _
	Partial Public Class FixedShippingRate
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _WeightLBS As Decimal
		
		Private _WeightKGS As Decimal
		
		Private _Zone As Integer
		
		Private _Cost As Decimal
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnWeightLBSChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightLBSChanged()
    End Sub
    Partial Private Sub OnWeightKGSChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightKGSChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightLBS", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property WeightLBS() As Decimal
			Get
				Return Me._WeightLBS
			End Get
			Set
				If ((Me._WeightLBS = value)  _
							= false) Then
					Me.OnWeightLBSChanging(value)
					Me.SendPropertyChanging
					Me._WeightLBS = value
					Me.SendPropertyChanged("WeightLBS")
					Me.OnWeightLBSChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKGS", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property WeightKGS() As Decimal
			Get
				Return Me._WeightKGS
			End Get
			Set
				If ((Me._WeightKGS = value)  _
							= false) Then
					Me.OnWeightKGSChanging(value)
					Me.SendPropertyChanging
					Me._WeightKGS = value
					Me.SendPropertyChanged("WeightKGS")
					Me.OnWeightKGSChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int NOT NULL")>  _
		Public Property Zone() As Integer
			Get
				Return Me._Zone
			End Get
			Set
				If ((Me._Zone = value)  _
							= false) Then
					Me.OnZoneChanging(value)
					Me.SendPropertyChanging
					Me._Zone = value
					Me.SendPropertyChanged("Zone")
					Me.OnZoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Cost() As Decimal
			Get
				Return Me._Cost
			End Get
			Set
				If ((Me._Cost = value)  _
							= false) Then
					Me.OnCostChanging(value)
					Me.SendPropertyChanging
					Me._Cost = value
					Me.SendPropertyChanged("Cost")
					Me.OnCostChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PromoCode")>  _
	Partial Public Class PromoCode
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Code As String
		
		Private _FixedAmount As Boolean
		
		Private _Discount As Decimal
		
		Private _SalesRep As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnFixedAmountChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFixedAmountChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnSalesRepChanging(value As String)
    End Sub
    Partial Private Sub OnSalesRepChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(8) NOT NULL", CanBeNull:=false)>  _
		Public Property Code() As String
			Get
				Return Me._Code
			End Get
			Set
				If (String.Equals(Me._Code, value) = false) Then
					Me.OnCodeChanging(value)
					Me.SendPropertyChanging
					Me._Code = value
					Me.SendPropertyChanged("Code")
					Me.OnCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixedAmount", DbType:="Bit NOT NULL")>  _
		Public Property FixedAmount() As Boolean
			Get
				Return Me._FixedAmount
			End Get
			Set
				If ((Me._FixedAmount = value)  _
							= false) Then
					Me.OnFixedAmountChanging(value)
					Me.SendPropertyChanging
					Me._FixedAmount = value
					Me.SendPropertyChanged("FixedAmount")
					Me.OnFixedAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Discount() As Decimal
			Get
				Return Me._Discount
			End Get
			Set
				If ((Me._Discount = value)  _
							= false) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesRep", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property SalesRep() As String
			Get
				Return Me._SalesRep
			End Get
			Set
				If (String.Equals(Me._SalesRep, value) = false) Then
					Me.OnSalesRepChanging(value)
					Me.SendPropertyChanging
					Me._SalesRep = value
					Me.SendPropertyChanged("SalesRep")
					Me.OnSalesRepChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FixedShippingZone")>  _
	Partial Public Class FixedShippingZone
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _PrefixLow As String
		
		Private _PrefixHigh As String
		
		Private _Zone As Integer
		
		Private _ProvinceID As Integer
		
		Private _DistributorUserID As Integer
		
		Private _Province As EntityRef(Of Province)
		
		Private _SimpleUser As EntityRef(Of SimpleUser)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPrefixLowChanging(value As String)
    End Sub
    Partial Private Sub OnPrefixLowChanged()
    End Sub
    Partial Private Sub OnPrefixHighChanging(value As String)
    End Sub
    Partial Private Sub OnPrefixHighChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnProvinceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvinceIDChanged()
    End Sub
    Partial Private Sub OnDistributorUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistributorUserIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Province = CType(Nothing, EntityRef(Of Province))
			Me._SimpleUser = CType(Nothing, EntityRef(Of SimpleUser))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					If Me._SimpleUser.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefixLow", DbType:="NChar(3) NOT NULL", CanBeNull:=false)>  _
		Public Property PrefixLow() As String
			Get
				Return Me._PrefixLow
			End Get
			Set
				If (String.Equals(Me._PrefixLow, value) = false) Then
					Me.OnPrefixLowChanging(value)
					Me.SendPropertyChanging
					Me._PrefixLow = value
					Me.SendPropertyChanged("PrefixLow")
					Me.OnPrefixLowChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefixHigh", DbType:="NChar(3) NOT NULL", CanBeNull:=false)>  _
		Public Property PrefixHigh() As String
			Get
				Return Me._PrefixHigh
			End Get
			Set
				If (String.Equals(Me._PrefixHigh, value) = false) Then
					Me.OnPrefixHighChanging(value)
					Me.SendPropertyChanging
					Me._PrefixHigh = value
					Me.SendPropertyChanged("PrefixHigh")
					Me.OnPrefixHighChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zone", DbType:="Int NOT NULL")>  _
		Public Property Zone() As Integer
			Get
				Return Me._Zone
			End Get
			Set
				If ((Me._Zone = value)  _
							= false) Then
					Me.OnZoneChanging(value)
					Me.SendPropertyChanging
					Me._Zone = value
					Me.SendPropertyChanged("Zone")
					Me.OnZoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceID", DbType:="Int NOT NULL")>  _
		Public Property ProvinceID() As Integer
			Get
				Return Me._ProvinceID
			End Get
			Set
				If ((Me._ProvinceID = value)  _
							= false) Then
					If Me._Province.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProvinceIDChanging(value)
					Me.SendPropertyChanging
					Me._ProvinceID = value
					Me.SendPropertyChanged("ProvinceID")
					Me.OnProvinceIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributorUserID", DbType:="Int NOT NULL")>  _
		Public Property DistributorUserID() As Integer
			Get
				Return Me._DistributorUserID
			End Get
			Set
				If ((Me._DistributorUserID = value)  _
							= false) Then
					Me.OnDistributorUserIDChanging(value)
					Me.SendPropertyChanging
					Me._DistributorUserID = value
					Me.SendPropertyChanged("DistributorUserID")
					Me.OnDistributorUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_FixedShippingZone", Storage:="_Province", ThisKey:="ProvinceID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Province() As Province
			Get
				Return Me._Province.Entity
			End Get
			Set
				Dim previousValue As Province = Me._Province.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Province.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Province.Entity = Nothing
						previousValue.FixedShippingZones.Remove(Me)
					End If
					Me._Province.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FixedShippingZones.Add(Me)
						Me._ProvinceID = value.ID
					Else
						Me._ProvinceID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Province")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_FixedShippingZone", Storage:="_SimpleUser", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property SimpleUser() As SimpleUser
			Get
				Return Me._SimpleUser.Entity
			End Get
			Set
				Dim previousValue As SimpleUser = Me._SimpleUser.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SimpleUser.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SimpleUser.Entity = Nothing
						previousValue.FixedShippingZone = Nothing
					End If
					Me._SimpleUser.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.FixedShippingZone = Me
						Me._ID = value.ID
					Else
						Me._ID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("SimpleUser")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PropertyFeature")>  _
	Partial Public Class PropertyFeature
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _PropertyId As Integer
		
		Private _FeatureId As Integer
		
		Private _Feature As EntityRef(Of Feature)
		
		Private _Property As EntityRef(Of [Property])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPropertyIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPropertyIdChanged()
    End Sub
    Partial Private Sub OnFeatureIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFeatureIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Feature = CType(Nothing, EntityRef(Of Feature))
			Me._Property = CType(Nothing, EntityRef(Of [Property]))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyId", DbType:="Int NOT NULL")>  _
		Public Property PropertyId() As Integer
			Get
				Return Me._PropertyId
			End Get
			Set
				If ((Me._PropertyId = value)  _
							= false) Then
					If Me._Property.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnPropertyIdChanging(value)
					Me.SendPropertyChanging
					Me._PropertyId = value
					Me.SendPropertyChanged("PropertyId")
					Me.OnPropertyIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeatureId", DbType:="Int NOT NULL")>  _
		Public Property FeatureId() As Integer
			Get
				Return Me._FeatureId
			End Get
			Set
				If ((Me._FeatureId = value)  _
							= false) Then
					If Me._Feature.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnFeatureIdChanging(value)
					Me.SendPropertyChanging
					Me._FeatureId = value
					Me.SendPropertyChanged("FeatureId")
					Me.OnFeatureIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_PropertyFeature", Storage:="_Feature", ThisKey:="FeatureId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Feature() As Feature
			Get
				Return Me._Feature.Entity
			End Get
			Set
				Dim previousValue As Feature = Me._Feature.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Feature.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Feature.Entity = Nothing
						previousValue.PropertyFeatures.Remove(Me)
					End If
					Me._Feature.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.PropertyFeatures.Add(Me)
						Me._FeatureId = value.Id
					Else
						Me._FeatureId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Feature")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Property_PropertyFeature", Storage:="_Property", ThisKey:="PropertyId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property [Property]() As [Property]
			Get
				Return Me._Property.Entity
			End Get
			Set
				Dim previousValue As [Property] = Me._Property.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Property.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Property.Entity = Nothing
						previousValue.PropertyFeatures.Remove(Me)
					End If
					Me._Property.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.PropertyFeatures.Add(Me)
						Me._PropertyId = value.Id
					Else
						Me._PropertyId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Property]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Feature")>  _
	Partial Public Class Feature
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Name As String
		
		Private _Details As String
		
		Private _PropertyFeatures As EntitySet(Of PropertyFeature)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._PropertyFeatures = New EntitySet(Of PropertyFeature)(AddressOf Me.attach_PropertyFeatures, AddressOf Me.detach_PropertyFeatures)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Feature_PropertyFeature", Storage:="_PropertyFeatures", ThisKey:="Id", OtherKey:="FeatureId")>  _
		Public Property PropertyFeatures() As EntitySet(Of PropertyFeature)
			Get
				Return Me._PropertyFeatures
			End Get
			Set
				Me._PropertyFeatures.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_PropertyFeatures(ByVal entity As PropertyFeature)
			Me.SendPropertyChanging
			entity.Feature = Me
		End Sub
		
		Private Sub detach_PropertyFeatures(ByVal entity As PropertyFeature)
			Me.SendPropertyChanging
			entity.Feature = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Property")>  _
	Partial Public Class [Property]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Title As String
		
		Private _Details As String
		
		Private _ListingId As String
		
		Private _AddressId As Integer
		
		Private _ImageGalleryId As System.Nullable(Of Integer)
		
		Private _Testimonial As String
		
		Private _Price As Decimal
		
		Private _Bedrooms As Integer
		
		Private _Bathrooms As Integer
		
		Private _PageTitle As String
		
		Private _Permalink As String
		
		Private _Keywords As String
		
		Private _Description As String
		
		Private _ListingLink As String
		
		Private _Active As Boolean
		
		Private _Vacancy As Boolean
		
		Private _PropertyFeatures As EntitySet(Of PropertyFeature)
		
		Private _Address As EntityRef(Of Address)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnListingIdChanging(value As String)
    End Sub
    Partial Private Sub OnListingIdChanged()
    End Sub
    Partial Private Sub OnAddressIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIdChanged()
    End Sub
    Partial Private Sub OnImageGalleryIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageGalleryIdChanged()
    End Sub
    Partial Private Sub OnTestimonialChanging(value As String)
    End Sub
    Partial Private Sub OnTestimonialChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnBedroomsChanging(value As Integer)
    End Sub
    Partial Private Sub OnBedroomsChanged()
    End Sub
    Partial Private Sub OnBathroomsChanging(value As Integer)
    End Sub
    Partial Private Sub OnBathroomsChanged()
    End Sub
    Partial Private Sub OnPageTitleChanging(value As String)
    End Sub
    Partial Private Sub OnPageTitleChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnListingLinkChanging(value As String)
    End Sub
    Partial Private Sub OnListingLinkChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnVacancyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnVacancyChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._PropertyFeatures = New EntitySet(Of PropertyFeature)(AddressOf Me.attach_PropertyFeatures, AddressOf Me.detach_PropertyFeatures)
			Me._Address = CType(Nothing, EntityRef(Of Address))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListingId", DbType:="NVarChar(18)")>  _
		Public Property ListingId() As String
			Get
				Return Me._ListingId
			End Get
			Set
				If (String.Equals(Me._ListingId, value) = false) Then
					Me.OnListingIdChanging(value)
					Me.SendPropertyChanging
					Me._ListingId = value
					Me.SendPropertyChanged("ListingId")
					Me.OnListingIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressId", DbType:="Int NOT NULL")>  _
		Public Property AddressId() As Integer
			Get
				Return Me._AddressId
			End Get
			Set
				If ((Me._AddressId = value)  _
							= false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddressIdChanging(value)
					Me.SendPropertyChanging
					Me._AddressId = value
					Me.SendPropertyChanged("AddressId")
					Me.OnAddressIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageGalleryId", DbType:="Int")>  _
		Public Property ImageGalleryId() As System.Nullable(Of Integer)
			Get
				Return Me._ImageGalleryId
			End Get
			Set
				If (Me._ImageGalleryId.Equals(value) = false) Then
					Me.OnImageGalleryIdChanging(value)
					Me.SendPropertyChanging
					Me._ImageGalleryId = value
					Me.SendPropertyChanged("ImageGalleryId")
					Me.OnImageGalleryIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Testimonial", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Testimonial() As String
			Get
				Return Me._Testimonial
			End Get
			Set
				If (String.Equals(Me._Testimonial, value) = false) Then
					Me.OnTestimonialChanging(value)
					Me.SendPropertyChanging
					Me._Testimonial = value
					Me.SendPropertyChanged("Testimonial")
					Me.OnTestimonialChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Price() As Decimal
			Get
				Return Me._Price
			End Get
			Set
				If ((Me._Price = value)  _
							= false) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bedrooms", DbType:="Int NOT NULL")>  _
		Public Property Bedrooms() As Integer
			Get
				Return Me._Bedrooms
			End Get
			Set
				If ((Me._Bedrooms = value)  _
							= false) Then
					Me.OnBedroomsChanging(value)
					Me.SendPropertyChanging
					Me._Bedrooms = value
					Me.SendPropertyChanged("Bedrooms")
					Me.OnBedroomsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bathrooms", DbType:="Int NOT NULL")>  _
		Public Property Bathrooms() As Integer
			Get
				Return Me._Bathrooms
			End Get
			Set
				If ((Me._Bathrooms = value)  _
							= false) Then
					Me.OnBathroomsChanging(value)
					Me.SendPropertyChanging
					Me._Bathrooms = value
					Me.SendPropertyChanged("Bathrooms")
					Me.OnBathroomsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTitle", DbType:="NVarChar(64)")>  _
		Public Property PageTitle() As String
			Get
				Return Me._PageTitle
			End Get
			Set
				If (String.Equals(Me._PageTitle, value) = false) Then
					Me.OnPageTitleChanging(value)
					Me.SendPropertyChanging
					Me._PageTitle = value
					Me.SendPropertyChanged("PageTitle")
					Me.OnPageTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListingLink", DbType:="NVarChar(255)")>  _
		Public Property ListingLink() As String
			Get
				Return Me._ListingLink
			End Get
			Set
				If (String.Equals(Me._ListingLink, value) = false) Then
					Me.OnListingLinkChanging(value)
					Me.SendPropertyChanging
					Me._ListingLink = value
					Me.SendPropertyChanged("ListingLink")
					Me.OnListingLinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
		Public Property Active() As Boolean
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vacancy", DbType:="Bit NOT NULL")>  _
		Public Property Vacancy() As Boolean
			Get
				Return Me._Vacancy
			End Get
			Set
				If ((Me._Vacancy = value)  _
							= false) Then
					Me.OnVacancyChanging(value)
					Me.SendPropertyChanging
					Me._Vacancy = value
					Me.SendPropertyChanged("Vacancy")
					Me.OnVacancyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Property_PropertyFeature", Storage:="_PropertyFeatures", ThisKey:="Id", OtherKey:="PropertyId")>  _
		Public Property PropertyFeatures() As EntitySet(Of PropertyFeature)
			Get
				Return Me._PropertyFeatures
			End Get
			Set
				Me._PropertyFeatures.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Property", Storage:="_Address", ThisKey:="AddressId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._AddressId = value.ID
					Else
						Me._AddressId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_PropertyFeatures(ByVal entity As PropertyFeature)
			Me.SendPropertyChanging
			entity.[Property] = Me
		End Sub
		
		Private Sub detach_PropertyFeatures(ByVal entity As PropertyFeature)
			Me.SendPropertyChanging
			entity.[Property] = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SalesRequest")>  _
	Partial Public Class SalesRequest
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _SalesRepEmail As String
		
		Private _SalesRepName As String
		
		Private _ProductId As Integer
		
		Private _Quantity As Integer
		
		Private _CustomerName As String
		
		Private _CustomerEmail As String
		
		Private _Timestamp As Date
		
		Private _RequestKey As System.Guid
		
		Private _Redeemed As Boolean
		
		Private _OrderId As System.Nullable(Of Integer)
		
		Private _ShoppingCartId As System.Nullable(Of Integer)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSalesRepEmailChanging(value As String)
    End Sub
    Partial Private Sub OnSalesRepEmailChanged()
    End Sub
    Partial Private Sub OnSalesRepNameChanging(value As String)
    End Sub
    Partial Private Sub OnSalesRepNameChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnCustomerEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerEmailChanged()
    End Sub
    Partial Private Sub OnTimestampChanging(value As Date)
    End Sub
    Partial Private Sub OnTimestampChanged()
    End Sub
    Partial Private Sub OnRequestKeyChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRequestKeyChanged()
    End Sub
    Partial Private Sub OnRedeemedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRedeemedChanged()
    End Sub
    Partial Private Sub OnOrderIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderIdChanged()
    End Sub
    Partial Private Sub OnShoppingCartIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShoppingCartIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesRepEmail", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property SalesRepEmail() As String
			Get
				Return Me._SalesRepEmail
			End Get
			Set
				If (String.Equals(Me._SalesRepEmail, value) = false) Then
					Me.OnSalesRepEmailChanging(value)
					Me.SendPropertyChanging
					Me._SalesRepEmail = value
					Me.SendPropertyChanged("SalesRepEmail")
					Me.OnSalesRepEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesRepName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property SalesRepName() As String
			Get
				Return Me._SalesRepName
			End Get
			Set
				If (String.Equals(Me._SalesRepName, value) = false) Then
					Me.OnSalesRepNameChanging(value)
					Me.SendPropertyChanging
					Me._SalesRepName = value
					Me.SendPropertyChanged("SalesRepName")
					Me.OnSalesRepNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int NOT NULL")>  _
		Public Property ProductId() As Integer
			Get
				Return Me._ProductId
			End Get
			Set
				If ((Me._ProductId = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIdChanging(value)
					Me.SendPropertyChanging
					Me._ProductId = value
					Me.SendPropertyChanged("ProductId")
					Me.OnProductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerName() As String
			Get
				Return Me._CustomerName
			End Get
			Set
				If (String.Equals(Me._CustomerName, value) = false) Then
					Me.OnCustomerNameChanging(value)
					Me.SendPropertyChanging
					Me._CustomerName = value
					Me.SendPropertyChanged("CustomerName")
					Me.OnCustomerNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerEmail", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerEmail() As String
			Get
				Return Me._CustomerEmail
			End Get
			Set
				If (String.Equals(Me._CustomerEmail, value) = false) Then
					Me.OnCustomerEmailChanging(value)
					Me.SendPropertyChanging
					Me._CustomerEmail = value
					Me.SendPropertyChanged("CustomerEmail")
					Me.OnCustomerEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timestamp", DbType:="DateTime NOT NULL")>  _
		Public Property Timestamp() As Date
			Get
				Return Me._Timestamp
			End Get
			Set
				If ((Me._Timestamp = value)  _
							= false) Then
					Me.OnTimestampChanging(value)
					Me.SendPropertyChanging
					Me._Timestamp = value
					Me.SendPropertyChanged("Timestamp")
					Me.OnTimestampChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestKey", DbType:="UniqueIdentifier NOT NULL")>  _
		Public Property RequestKey() As System.Guid
			Get
				Return Me._RequestKey
			End Get
			Set
				If ((Me._RequestKey = value)  _
							= false) Then
					Me.OnRequestKeyChanging(value)
					Me.SendPropertyChanging
					Me._RequestKey = value
					Me.SendPropertyChanged("RequestKey")
					Me.OnRequestKeyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Redeemed", DbType:="Bit NOT NULL")>  _
		Public Property Redeemed() As Boolean
			Get
				Return Me._Redeemed
			End Get
			Set
				If ((Me._Redeemed = value)  _
							= false) Then
					Me.OnRedeemedChanging(value)
					Me.SendPropertyChanging
					Me._Redeemed = value
					Me.SendPropertyChanged("Redeemed")
					Me.OnRedeemedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderId", DbType:="Int")>  _
		Public Property OrderId() As System.Nullable(Of Integer)
			Get
				Return Me._OrderId
			End Get
			Set
				If (Me._OrderId.Equals(value) = false) Then
					Me.OnOrderIdChanging(value)
					Me.SendPropertyChanging
					Me._OrderId = value
					Me.SendPropertyChanged("OrderId")
					Me.OnOrderIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShoppingCartId", DbType:="Int")>  _
		Public Property ShoppingCartId() As System.Nullable(Of Integer)
			Get
				Return Me._ShoppingCartId
			End Get
			Set
				If (Me._ShoppingCartId.Equals(value) = false) Then
					Me.OnShoppingCartIdChanging(value)
					Me.SendPropertyChanging
					Me._ShoppingCartId = value
					Me.SendPropertyChanged("ShoppingCartId")
					Me.OnShoppingCartIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_SalesRequest", Storage:="_Product", ThisKey:="ProductId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.SalesRequests.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SalesRequests.Add(Me)
						Me._ProductId = value.ID
					Else
						Me._ProductId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
	Partial Public Class [Order]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UserID As Integer
		
		Private _OrderDate As Date
		
		Private _TaxPercent As Double
		
		Private _ApprovalState As Integer
		
		Private _ApprovalDate As System.Nullable(Of Date)
		
		Private _ShipCharge As Decimal
		
		Private _ShipService As String
		
		Private _ShipCompany As String
		
		Private _PaymentType As Integer
		
		Private _SAddressID As Integer
		
		Private _BAddressID As Integer
		
		Private _ShipDate As System.Nullable(Of Date)
		
		Private _PromoCode As String
		
		Private _Discount As Decimal
		
		Private _DistributorId As System.Nullable(Of Integer)
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _CreditCardPayments As EntitySet(Of CreditCardPayment)
		
		Private _BeanStreamPayments As EntitySet(Of BeanStreamPayment)
		
		Private _Address As EntityRef(Of Address)
		
		Private _Address1 As EntityRef(Of Address)
		
		Private _SimpleUser As EntityRef(Of SimpleUser)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnTaxPercentChanging(value As Double)
    End Sub
    Partial Private Sub OnTaxPercentChanged()
    End Sub
    Partial Private Sub OnApprovalStateChanging(value As Integer)
    End Sub
    Partial Private Sub OnApprovalStateChanged()
    End Sub
    Partial Private Sub OnApprovalDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovalDateChanged()
    End Sub
    Partial Private Sub OnShipChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnShipChargeChanged()
    End Sub
    Partial Private Sub OnShipServiceChanging(value As String)
    End Sub
    Partial Private Sub OnShipServiceChanged()
    End Sub
    Partial Private Sub OnShipCompanyChanging(value As String)
    End Sub
    Partial Private Sub OnShipCompanyChanged()
    End Sub
    Partial Private Sub OnPaymentTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentTypeChanged()
    End Sub
    Partial Private Sub OnSAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSAddressIDChanged()
    End Sub
    Partial Private Sub OnBAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBAddressIDChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnPromoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPromoCodeChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnDistributorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDistributorIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._CreditCardPayments = New EntitySet(Of CreditCardPayment)(AddressOf Me.attach_CreditCardPayments, AddressOf Me.detach_CreditCardPayments)
			Me._BeanStreamPayments = New EntitySet(Of BeanStreamPayment)(AddressOf Me.attach_BeanStreamPayments, AddressOf Me.detach_BeanStreamPayments)
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._Address1 = CType(Nothing, EntityRef(Of Address))
			Me._SimpleUser = CType(Nothing, EntityRef(Of SimpleUser))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					If Me._SimpleUser.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>  _
		Public Property OrderDate() As Date
			Get
				Return Me._OrderDate
			End Get
			Set
				If ((Me._OrderDate = value)  _
							= false) Then
					Me.OnOrderDateChanging(value)
					Me.SendPropertyChanging
					Me._OrderDate = value
					Me.SendPropertyChanged("OrderDate")
					Me.OnOrderDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxPercent", DbType:="Float NOT NULL")>  _
		Public Property TaxPercent() As Double
			Get
				Return Me._TaxPercent
			End Get
			Set
				If ((Me._TaxPercent = value)  _
							= false) Then
					Me.OnTaxPercentChanging(value)
					Me.SendPropertyChanging
					Me._TaxPercent = value
					Me.SendPropertyChanged("TaxPercent")
					Me.OnTaxPercentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalState", DbType:="Int NOT NULL")>  _
		Public Property ApprovalState() As Integer
			Get
				Return Me._ApprovalState
			End Get
			Set
				If ((Me._ApprovalState = value)  _
							= false) Then
					Me.OnApprovalStateChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalState = value
					Me.SendPropertyChanged("ApprovalState")
					Me.OnApprovalStateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalDate", DbType:="DateTime")>  _
		Public Property ApprovalDate() As System.Nullable(Of Date)
			Get
				Return Me._ApprovalDate
			End Get
			Set
				If (Me._ApprovalDate.Equals(value) = false) Then
					Me.OnApprovalDateChanging(value)
					Me.SendPropertyChanging
					Me._ApprovalDate = value
					Me.SendPropertyChanged("ApprovalDate")
					Me.OnApprovalDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCharge", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property ShipCharge() As Decimal
			Get
				Return Me._ShipCharge
			End Get
			Set
				If ((Me._ShipCharge = value)  _
							= false) Then
					Me.OnShipChargeChanging(value)
					Me.SendPropertyChanging
					Me._ShipCharge = value
					Me.SendPropertyChanged("ShipCharge")
					Me.OnShipChargeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipService", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipService() As String
			Get
				Return Me._ShipService
			End Get
			Set
				If (String.Equals(Me._ShipService, value) = false) Then
					Me.OnShipServiceChanging(value)
					Me.SendPropertyChanging
					Me._ShipService = value
					Me.SendPropertyChanged("ShipService")
					Me.OnShipServiceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCompany", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipCompany() As String
			Get
				Return Me._ShipCompany
			End Get
			Set
				If (String.Equals(Me._ShipCompany, value) = false) Then
					Me.OnShipCompanyChanging(value)
					Me.SendPropertyChanging
					Me._ShipCompany = value
					Me.SendPropertyChanged("ShipCompany")
					Me.OnShipCompanyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentType", DbType:="Int NOT NULL")>  _
		Public Property PaymentType() As Integer
			Get
				Return Me._PaymentType
			End Get
			Set
				If ((Me._PaymentType = value)  _
							= false) Then
					Me.OnPaymentTypeChanging(value)
					Me.SendPropertyChanging
					Me._PaymentType = value
					Me.SendPropertyChanged("PaymentType")
					Me.OnPaymentTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SAddressID", DbType:="Int NOT NULL")>  _
		Public Property SAddressID() As Integer
			Get
				Return Me._SAddressID
			End Get
			Set
				If ((Me._SAddressID = value)  _
							= false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSAddressIDChanging(value)
					Me.SendPropertyChanging
					Me._SAddressID = value
					Me.SendPropertyChanged("SAddressID")
					Me.OnSAddressIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BAddressID", DbType:="Int NOT NULL")>  _
		Public Property BAddressID() As Integer
			Get
				Return Me._BAddressID
			End Get
			Set
				If ((Me._BAddressID = value)  _
							= false) Then
					If Me._Address1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBAddressIDChanging(value)
					Me.SendPropertyChanging
					Me._BAddressID = value
					Me.SendPropertyChanged("BAddressID")
					Me.OnBAddressIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>  _
		Public Property ShipDate() As System.Nullable(Of Date)
			Get
				Return Me._ShipDate
			End Get
			Set
				If (Me._ShipDate.Equals(value) = false) Then
					Me.OnShipDateChanging(value)
					Me.SendPropertyChanging
					Me._ShipDate = value
					Me.SendPropertyChanged("ShipDate")
					Me.OnShipDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoCode", DbType:="NVarChar(8)")>  _
		Public Property PromoCode() As String
			Get
				Return Me._PromoCode
			End Get
			Set
				If (String.Equals(Me._PromoCode, value) = false) Then
					Me.OnPromoCodeChanging(value)
					Me.SendPropertyChanging
					Me._PromoCode = value
					Me.SendPropertyChanged("PromoCode")
					Me.OnPromoCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Discount() As Decimal
			Get
				Return Me._Discount
			End Get
			Set
				If ((Me._Discount = value)  _
							= false) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributorId", DbType:="Int")>  _
		Public Property DistributorId() As System.Nullable(Of Integer)
			Get
				Return Me._DistributorId
			End Get
			Set
				If (Me._DistributorId.Equals(value) = false) Then
					Me.OnDistributorIdChanging(value)
					Me.SendPropertyChanging
					Me._DistributorId = value
					Me.SendPropertyChanged("DistributorId")
					Me.OnDistributorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="OrderID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_CreditCardPayment", Storage:="_CreditCardPayments", ThisKey:="ID", OtherKey:="OrderID")>  _
		Public Property CreditCardPayments() As EntitySet(Of CreditCardPayment)
			Get
				Return Me._CreditCardPayments
			End Get
			Set
				Me._CreditCardPayments.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_BeanStreamPayment", Storage:="_BeanStreamPayments", ThisKey:="ID", OtherKey:="OrderID")>  _
		Public Property BeanStreamPayments() As EntitySet(Of BeanStreamPayment)
			Get
				Return Me._BeanStreamPayments
			End Get
			Set
				Me._BeanStreamPayments.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order", Storage:="_Address", ThisKey:="SAddressID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orders.Add(Me)
						Me._SAddressID = value.ID
					Else
						Me._SAddressID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_Order1", Storage:="_Address1", ThisKey:="BAddressID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address1() As Address
			Get
				Return Me._Address1.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address1.Entity = Nothing
						previousValue.Orders1.Remove(Me)
					End If
					Me._Address1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orders1.Add(Me)
						Me._BAddressID = value.ID
					Else
						Me._BAddressID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Address1")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_Order", Storage:="_SimpleUser", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property SimpleUser() As SimpleUser
			Get
				Return Me._SimpleUser.Entity
			End Get
			Set
				Dim previousValue As SimpleUser = Me._SimpleUser.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SimpleUser.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SimpleUser.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._SimpleUser.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orders.Add(Me)
						Me._UserID = value.ID
					Else
						Me._UserID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("SimpleUser")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.[Order] = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.[Order] = Nothing
		End Sub
		
		Private Sub attach_CreditCardPayments(ByVal entity As CreditCardPayment)
			Me.SendPropertyChanging
			entity.[Order] = Me
		End Sub
		
		Private Sub detach_CreditCardPayments(ByVal entity As CreditCardPayment)
			Me.SendPropertyChanging
			entity.[Order] = Nothing
		End Sub
		
		Private Sub attach_BeanStreamPayments(ByVal entity As BeanStreamPayment)
			Me.SendPropertyChanging
			entity.[Order] = Me
		End Sub
		
		Private Sub detach_BeanStreamPayments(ByVal entity As BeanStreamPayment)
			Me.SendPropertyChanging
			entity.[Order] = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProgramInstructor")>  _
	Partial Public Class ProgramInstructor
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProgramId As Integer
		
		Private _InstructorId As Integer
		
		Private _Program As EntityRef(Of Program)
		
		Private _Instructor As EntityRef(Of Instructor)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProgramIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProgramIdChanged()
    End Sub
    Partial Private Sub OnInstructorIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstructorIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Program = CType(Nothing, EntityRef(Of Program))
			Me._Instructor = CType(Nothing, EntityRef(Of Instructor))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProgramId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ProgramId() As Integer
			Get
				Return Me._ProgramId
			End Get
			Set
				If ((Me._ProgramId = value)  _
							= false) Then
					If Me._Program.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProgramIdChanging(value)
					Me.SendPropertyChanging
					Me._ProgramId = value
					Me.SendPropertyChanged("ProgramId")
					Me.OnProgramIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property InstructorId() As Integer
			Get
				Return Me._InstructorId
			End Get
			Set
				If ((Me._InstructorId = value)  _
							= false) Then
					If Me._Instructor.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnInstructorIdChanging(value)
					Me.SendPropertyChanging
					Me._InstructorId = value
					Me.SendPropertyChanged("InstructorId")
					Me.OnInstructorIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Program_ProgramInstructor", Storage:="_Program", ThisKey:="ProgramId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Program() As Program
			Get
				Return Me._Program.Entity
			End Get
			Set
				Dim previousValue As Program = Me._Program.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Program.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Program.Entity = Nothing
						previousValue.ProgramInstructors.Remove(Me)
					End If
					Me._Program.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProgramInstructors.Add(Me)
						Me._ProgramId = value.Id
					Else
						Me._ProgramId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Program")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instructor_ProgramInstructor", Storage:="_Instructor", ThisKey:="InstructorId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Instructor() As Instructor
			Get
				Return Me._Instructor.Entity
			End Get
			Set
				Dim previousValue As Instructor = Me._Instructor.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Instructor.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Instructor.Entity = Nothing
						previousValue.ProgramInstructors.Remove(Me)
					End If
					Me._Instructor.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProgramInstructors.Add(Me)
						Me._InstructorId = value.Id
					Else
						Me._InstructorId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Instructor")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Color")>  _
	Partial Public Class Color
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _RGBColourCode As String
		
		Private _ProductColors As EntitySet(Of ProductColor)
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _ShoppingCarts As EntitySet(Of ShoppingCart)
		
		Private _Inventories As EntitySet(Of Inventory)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRGBColourCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRGBColourCodeChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProductColors = New EntitySet(Of ProductColor)(AddressOf Me.attach_ProductColors, AddressOf Me.detach_ProductColors)
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._ShoppingCarts = New EntitySet(Of ShoppingCart)(AddressOf Me.attach_ShoppingCarts, AddressOf Me.detach_ShoppingCarts)
			Me._Inventories = New EntitySet(Of Inventory)(AddressOf Me.attach_Inventories, AddressOf Me.detach_Inventories)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RGBColourCode", DbType:="NChar(7) NOT NULL", CanBeNull:=false)>  _
		Public Property RGBColourCode() As String
			Get
				Return Me._RGBColourCode
			End Get
			Set
				If (String.Equals(Me._RGBColourCode, value) = false) Then
					Me.OnRGBColourCodeChanging(value)
					Me.SendPropertyChanging
					Me._RGBColourCode = value
					Me.SendPropertyChanged("RGBColourCode")
					Me.OnRGBColourCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ProductColor", Storage:="_ProductColors", ThisKey:="ID", OtherKey:="ColorID")>  _
		Public Property ProductColors() As EntitySet(Of ProductColor)
			Get
				Return Me._ProductColors
			End Get
			Set
				Me._ProductColors.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="ColorID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_ShoppingCart", Storage:="_ShoppingCarts", ThisKey:="ID", OtherKey:="ColorID")>  _
		Public Property ShoppingCarts() As EntitySet(Of ShoppingCart)
			Get
				Return Me._ShoppingCarts
			End Get
			Set
				Me._ShoppingCarts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Color_Inventory", Storage:="_Inventories", ThisKey:="ID", OtherKey:="ColorID")>  _
		Public Property Inventories() As EntitySet(Of Inventory)
			Get
				Return Me._Inventories
			End Get
			Set
				Me._Inventories.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProductColors(ByVal entity As ProductColor)
			Me.SendPropertyChanging
			entity.Color = Me
		End Sub
		
		Private Sub detach_ProductColors(ByVal entity As ProductColor)
			Me.SendPropertyChanging
			entity.Color = Nothing
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Color = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Color = Nothing
		End Sub
		
		Private Sub attach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Color = Me
		End Sub
		
		Private Sub detach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Color = Nothing
		End Sub
		
		Private Sub attach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Color = Me
		End Sub
		
		Private Sub detach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Color = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Size")>  _
	Partial Public Class Size
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Abreviation As String
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _ProductSizes As EntitySet(Of ProductSize)
		
		Private _ShoppingCarts As EntitySet(Of ShoppingCart)
		
		Private _Inventories As EntitySet(Of Inventory)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAbreviationChanging(value As String)
    End Sub
    Partial Private Sub OnAbreviationChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._ProductSizes = New EntitySet(Of ProductSize)(AddressOf Me.attach_ProductSizes, AddressOf Me.detach_ProductSizes)
			Me._ShoppingCarts = New EntitySet(Of ShoppingCart)(AddressOf Me.attach_ShoppingCarts, AddressOf Me.detach_ShoppingCarts)
			Me._Inventories = New EntitySet(Of Inventory)(AddressOf Me.attach_Inventories, AddressOf Me.detach_Inventories)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abreviation", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property Abreviation() As String
			Get
				Return Me._Abreviation
			End Get
			Set
				If (String.Equals(Me._Abreviation, value) = false) Then
					Me.OnAbreviationChanging(value)
					Me.SendPropertyChanging
					Me._Abreviation = value
					Me.SendPropertyChanged("Abreviation")
					Me.OnAbreviationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="SizeID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_ProductSize", Storage:="_ProductSizes", ThisKey:="ID", OtherKey:="SizeID")>  _
		Public Property ProductSizes() As EntitySet(Of ProductSize)
			Get
				Return Me._ProductSizes
			End Get
			Set
				Me._ProductSizes.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_ShoppingCart", Storage:="_ShoppingCarts", ThisKey:="ID", OtherKey:="SizeID")>  _
		Public Property ShoppingCarts() As EntitySet(Of ShoppingCart)
			Get
				Return Me._ShoppingCarts
			End Get
			Set
				Me._ShoppingCarts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Size_Inventory", Storage:="_Inventories", ThisKey:="ID", OtherKey:="SizeID")>  _
		Public Property Inventories() As EntitySet(Of Inventory)
			Get
				Return Me._Inventories
			End Get
			Set
				Me._Inventories.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Size = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Size = Nothing
		End Sub
		
		Private Sub attach_ProductSizes(ByVal entity As ProductSize)
			Me.SendPropertyChanging
			entity.Size = Me
		End Sub
		
		Private Sub detach_ProductSizes(ByVal entity As ProductSize)
			Me.SendPropertyChanging
			entity.Size = Nothing
		End Sub
		
		Private Sub attach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Size = Me
		End Sub
		
		Private Sub detach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Size = Nothing
		End Sub
		
		Private Sub attach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Size = Me
		End Sub
		
		Private Sub detach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Size = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Program")>  _
	Partial Public Class Program
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Name As String
		
		Private _Content As String
		
		Private _IconImage As String
		
		Private _PageTitle As String
		
		Private _Keywords As String
		
		Private _Description As String
		
		Private _Permalink As String
		
		Private _ProgramInstructors As EntitySet(Of ProgramInstructor)
		
		Private _Schedules As EntitySet(Of Schedule)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnContentChanging(value As String)
    End Sub
    Partial Private Sub OnContentChanged()
    End Sub
    Partial Private Sub OnIconImageChanging(value As String)
    End Sub
    Partial Private Sub OnIconImageChanged()
    End Sub
    Partial Private Sub OnPageTitleChanging(value As String)
    End Sub
    Partial Private Sub OnPageTitleChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProgramInstructors = New EntitySet(Of ProgramInstructor)(AddressOf Me.attach_ProgramInstructors, AddressOf Me.detach_ProgramInstructors)
			Me._Schedules = New EntitySet(Of Schedule)(AddressOf Me.attach_Schedules, AddressOf Me.detach_Schedules)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Content", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Content() As String
			Get
				Return Me._Content
			End Get
			Set
				If (String.Equals(Me._Content, value) = false) Then
					Me.OnContentChanging(value)
					Me.SendPropertyChanging
					Me._Content = value
					Me.SendPropertyChanged("Content")
					Me.OnContentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconImage", DbType:="NVarChar(MAX)")>  _
		Public Property IconImage() As String
			Get
				Return Me._IconImage
			End Get
			Set
				If (String.Equals(Me._IconImage, value) = false) Then
					Me.OnIconImageChanging(value)
					Me.SendPropertyChanging
					Me._IconImage = value
					Me.SendPropertyChanged("IconImage")
					Me.OnIconImageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTitle", DbType:="NVarChar(255)")>  _
		Public Property PageTitle() As String
			Get
				Return Me._PageTitle
			End Get
			Set
				If (String.Equals(Me._PageTitle, value) = false) Then
					Me.OnPageTitleChanging(value)
					Me.SendPropertyChanging
					Me._PageTitle = value
					Me.SendPropertyChanged("PageTitle")
					Me.OnPageTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Program_ProgramInstructor", Storage:="_ProgramInstructors", ThisKey:="Id", OtherKey:="ProgramId")>  _
		Public Property ProgramInstructors() As EntitySet(Of ProgramInstructor)
			Get
				Return Me._ProgramInstructors
			End Get
			Set
				Me._ProgramInstructors.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Program_Schedule", Storage:="_Schedules", ThisKey:="Id", OtherKey:="ProgramId")>  _
		Public Property Schedules() As EntitySet(Of Schedule)
			Get
				Return Me._Schedules
			End Get
			Set
				Me._Schedules.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProgramInstructors(ByVal entity As ProgramInstructor)
			Me.SendPropertyChanging
			entity.Program = Me
		End Sub
		
		Private Sub detach_ProgramInstructors(ByVal entity As ProgramInstructor)
			Me.SendPropertyChanging
			entity.Program = Nothing
		End Sub
		
		Private Sub attach_Schedules(ByVal entity As Schedule)
			Me.SendPropertyChanging
			entity.Program = Me
		End Sub
		
		Private Sub detach_Schedules(ByVal entity As Schedule)
			Me.SendPropertyChanging
			entity.Program = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Instructor")>  _
	Partial Public Class Instructor
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _Name As String
		
		Private _Specialty As String
		
		Private _Bio As String
		
		Private _ProfileImageId As System.Nullable(Of Integer)
		
		Private _Permalink As String
		
		Private _Keywords As String
		
		Private _Description As String
		
		Private _BrowserTitle As String
		
		Private _ProgramInstructors As EntitySet(Of ProgramInstructor)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSpecialtyChanging(value As String)
    End Sub
    Partial Private Sub OnSpecialtyChanged()
    End Sub
    Partial Private Sub OnBioChanging(value As String)
    End Sub
    Partial Private Sub OnBioChanged()
    End Sub
    Partial Private Sub OnProfileImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProfileImageIdChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBrowserTitleChanging(value As String)
    End Sub
    Partial Private Sub OnBrowserTitleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProgramInstructors = New EntitySet(Of ProgramInstructor)(AddressOf Me.attach_ProgramInstructors, AddressOf Me.detach_ProgramInstructors)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Specialty", DbType:="NVarChar(256)")>  _
		Public Property Specialty() As String
			Get
				Return Me._Specialty
			End Get
			Set
				If (String.Equals(Me._Specialty, value) = false) Then
					Me.OnSpecialtyChanging(value)
					Me.SendPropertyChanging
					Me._Specialty = value
					Me.SendPropertyChanged("Specialty")
					Me.OnSpecialtyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bio", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Bio() As String
			Get
				Return Me._Bio
			End Get
			Set
				If (String.Equals(Me._Bio, value) = false) Then
					Me.OnBioChanging(value)
					Me.SendPropertyChanging
					Me._Bio = value
					Me.SendPropertyChanged("Bio")
					Me.OnBioChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfileImageId", DbType:="Int")>  _
		Public Property ProfileImageId() As System.Nullable(Of Integer)
			Get
				Return Me._ProfileImageId
			End Get
			Set
				If (Me._ProfileImageId.Equals(value) = false) Then
					Me.OnProfileImageIdChanging(value)
					Me.SendPropertyChanging
					Me._ProfileImageId = value
					Me.SendPropertyChanged("ProfileImageId")
					Me.OnProfileImageIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrowserTitle", DbType:="NVarChar(255)")>  _
		Public Property BrowserTitle() As String
			Get
				Return Me._BrowserTitle
			End Get
			Set
				If (String.Equals(Me._BrowserTitle, value) = false) Then
					Me.OnBrowserTitleChanging(value)
					Me.SendPropertyChanging
					Me._BrowserTitle = value
					Me.SendPropertyChanged("BrowserTitle")
					Me.OnBrowserTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Instructor_ProgramInstructor", Storage:="_ProgramInstructors", ThisKey:="Id", OtherKey:="InstructorId")>  _
		Public Property ProgramInstructors() As EntitySet(Of ProgramInstructor)
			Get
				Return Me._ProgramInstructors
			End Get
			Set
				Me._ProgramInstructors.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProgramInstructors(ByVal entity As ProgramInstructor)
			Me.SendPropertyChanging
			entity.Instructor = Me
		End Sub
		
		Private Sub detach_ProgramInstructors(ByVal entity As ProgramInstructor)
			Me.SendPropertyChanging
			entity.Instructor = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RegisteredUser")>  _
	Partial Public Class RegisteredUser
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UserID As Integer
		
		Private _AddressID As Integer
		
		Private _BirthDate As System.Nullable(Of Date)
		
		Private _Notes As String
		
		Private _UserName As String
		
		Private _Allergies As String
		
		Private _PriceLevel As Integer
		
		Private _MembershipStatus As Boolean
		
		Private _Address As EntityRef(Of Address)
		
		Private _SimpleUser As EntityRef(Of SimpleUser)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIDChanged()
    End Sub
    Partial Private Sub OnBirthDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBirthDateChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnAllergiesChanging(value As String)
    End Sub
    Partial Private Sub OnAllergiesChanged()
    End Sub
    Partial Private Sub OnPriceLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceLevelChanged()
    End Sub
    Partial Private Sub OnMembershipStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMembershipStatusChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Address = CType(Nothing, EntityRef(Of Address))
			Me._SimpleUser = CType(Nothing, EntityRef(Of SimpleUser))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					If Me._SimpleUser.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressID", DbType:="Int NOT NULL")>  _
		Public Property AddressID() As Integer
			Get
				Return Me._AddressID
			End Get
			Set
				If ((Me._AddressID = value)  _
							= false) Then
					If Me._Address.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAddressIDChanging(value)
					Me.SendPropertyChanging
					Me._AddressID = value
					Me.SendPropertyChanged("AddressID")
					Me.OnAddressIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthDate", DbType:="DateTime")>  _
		Public Property BirthDate() As System.Nullable(Of Date)
			Get
				Return Me._BirthDate
			End Get
			Set
				If (Me._BirthDate.Equals(value) = false) Then
					Me.OnBirthDateChanging(value)
					Me.SendPropertyChanging
					Me._BirthDate = value
					Me.SendPropertyChanged("BirthDate")
					Me.OnBirthDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property UserName() As String
			Get
				Return Me._UserName
			End Get
			Set
				If (String.Equals(Me._UserName, value) = false) Then
					Me.OnUserNameChanging(value)
					Me.SendPropertyChanging
					Me._UserName = value
					Me.SendPropertyChanged("UserName")
					Me.OnUserNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Allergies", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Allergies() As String
			Get
				Return Me._Allergies
			End Get
			Set
				If (String.Equals(Me._Allergies, value) = false) Then
					Me.OnAllergiesChanging(value)
					Me.SendPropertyChanging
					Me._Allergies = value
					Me.SendPropertyChanged("Allergies")
					Me.OnAllergiesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceLevel", DbType:="Int NOT NULL")>  _
		Public Property PriceLevel() As Integer
			Get
				Return Me._PriceLevel
			End Get
			Set
				If ((Me._PriceLevel = value)  _
							= false) Then
					Me.OnPriceLevelChanging(value)
					Me.SendPropertyChanging
					Me._PriceLevel = value
					Me.SendPropertyChanged("PriceLevel")
					Me.OnPriceLevelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MembershipStatus", DbType:="Bit NOT NULL")>  _
		Public Property MembershipStatus() As Boolean
			Get
				Return Me._MembershipStatus
			End Get
			Set
				If ((Me._MembershipStatus = value)  _
							= false) Then
					Me.OnMembershipStatusChanging(value)
					Me.SendPropertyChanging
					Me._MembershipStatus = value
					Me.SendPropertyChanged("MembershipStatus")
					Me.OnMembershipStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Address_RegisteredUser", Storage:="_Address", ThisKey:="AddressID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Address() As Address
			Get
				Return Me._Address.Entity
			End Get
			Set
				Dim previousValue As Address = Me._Address.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Address.Entity = Nothing
						previousValue.RegisteredUsers.Remove(Me)
					End If
					Me._Address.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.RegisteredUsers.Add(Me)
						Me._AddressID = value.ID
					Else
						Me._AddressID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Address")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_RegisteredUser", Storage:="_SimpleUser", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property SimpleUser() As SimpleUser
			Get
				Return Me._SimpleUser.Entity
			End Get
			Set
				Dim previousValue As SimpleUser = Me._SimpleUser.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SimpleUser.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SimpleUser.Entity = Nothing
						previousValue.RegisteredUsers.Remove(Me)
					End If
					Me._SimpleUser.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.RegisteredUsers.Add(Me)
						Me._UserID = value.ID
					Else
						Me._UserID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("SimpleUser")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Booking")>  _
	Partial Public Class Booking
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserMembershipId As Integer
		
		Private _ScheduleId As Integer
		
		Private _Approved As Boolean
		
		Private _SimpleUser As EntityRef(Of SimpleUser)
		
		Private _Schedule As EntityRef(Of Schedule)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserMembershipIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserMembershipIdChanged()
    End Sub
    Partial Private Sub OnScheduleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnScheduleIdChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._SimpleUser = CType(Nothing, EntityRef(Of SimpleUser))
			Me._Schedule = CType(Nothing, EntityRef(Of Schedule))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserMembershipId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property UserMembershipId() As Integer
			Get
				Return Me._UserMembershipId
			End Get
			Set
				If ((Me._UserMembershipId = value)  _
							= false) Then
					If Me._SimpleUser.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnUserMembershipIdChanging(value)
					Me.SendPropertyChanging
					Me._UserMembershipId = value
					Me.SendPropertyChanged("UserMembershipId")
					Me.OnUserMembershipIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ScheduleId() As Integer
			Get
				Return Me._ScheduleId
			End Get
			Set
				If ((Me._ScheduleId = value)  _
							= false) Then
					If Me._Schedule.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnScheduleIdChanging(value)
					Me.SendPropertyChanging
					Me._ScheduleId = value
					Me.SendPropertyChanged("ScheduleId")
					Me.OnScheduleIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
		Public Property Approved() As Boolean
			Get
				Return Me._Approved
			End Get
			Set
				If ((Me._Approved = value)  _
							= false) Then
					Me.OnApprovedChanging(value)
					Me.SendPropertyChanging
					Me._Approved = value
					Me.SendPropertyChanged("Approved")
					Me.OnApprovedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SimpleUser_Booking", Storage:="_SimpleUser", ThisKey:="UserMembershipId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property SimpleUser() As SimpleUser
			Get
				Return Me._SimpleUser.Entity
			End Get
			Set
				Dim previousValue As SimpleUser = Me._SimpleUser.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._SimpleUser.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._SimpleUser.Entity = Nothing
						previousValue.Bookings.Remove(Me)
					End If
					Me._SimpleUser.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bookings.Add(Me)
						Me._UserMembershipId = value.ID
					Else
						Me._UserMembershipId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("SimpleUser")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Booking", Storage:="_Schedule", ThisKey:="ScheduleId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Schedule() As Schedule
			Get
				Return Me._Schedule.Entity
			End Get
			Set
				Dim previousValue As Schedule = Me._Schedule.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Schedule.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Schedule.Entity = Nothing
						previousValue.Bookings.Remove(Me)
					End If
					Me._Schedule.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Bookings.Add(Me)
						Me._ScheduleId = value.Id
					Else
						Me._ScheduleId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Schedule")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Schedule")>  _
	Partial Public Class Schedule
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _ProgramId As Integer
		
		Private _Capacity As Integer
		
		Private _Free As Boolean
		
		Private _BookingDate As Date
		
		Private _Duration As Integer
		
		Private _Bookings As EntitySet(Of Booking)
		
		Private _Program As EntityRef(Of Program)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProgramIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProgramIdChanged()
    End Sub
    Partial Private Sub OnCapacityChanging(value As Integer)
    End Sub
    Partial Private Sub OnCapacityChanged()
    End Sub
    Partial Private Sub OnFreeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFreeChanged()
    End Sub
    Partial Private Sub OnBookingDateChanging(value As Date)
    End Sub
    Partial Private Sub OnBookingDateChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As Integer)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
			Me._Program = CType(Nothing, EntityRef(Of Program))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProgramId", DbType:="Int NOT NULL")>  _
		Public Property ProgramId() As Integer
			Get
				Return Me._ProgramId
			End Get
			Set
				If ((Me._ProgramId = value)  _
							= false) Then
					If Me._Program.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProgramIdChanging(value)
					Me.SendPropertyChanging
					Me._ProgramId = value
					Me.SendPropertyChanged("ProgramId")
					Me.OnProgramIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Capacity", DbType:="Int NOT NULL")>  _
		Public Property Capacity() As Integer
			Get
				Return Me._Capacity
			End Get
			Set
				If ((Me._Capacity = value)  _
							= false) Then
					Me.OnCapacityChanging(value)
					Me.SendPropertyChanging
					Me._Capacity = value
					Me.SendPropertyChanged("Capacity")
					Me.OnCapacityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Free", DbType:="Bit NOT NULL")>  _
		Public Property Free() As Boolean
			Get
				Return Me._Free
			End Get
			Set
				If ((Me._Free = value)  _
							= false) Then
					Me.OnFreeChanging(value)
					Me.SendPropertyChanging
					Me._Free = value
					Me.SendPropertyChanged("Free")
					Me.OnFreeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingDate", DbType:="DateTime NOT NULL")>  _
		Public Property BookingDate() As Date
			Get
				Return Me._BookingDate
			End Get
			Set
				If ((Me._BookingDate = value)  _
							= false) Then
					Me.OnBookingDateChanging(value)
					Me.SendPropertyChanging
					Me._BookingDate = value
					Me.SendPropertyChanged("BookingDate")
					Me.OnBookingDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Int NOT NULL")>  _
		Public Property Duration() As Integer
			Get
				Return Me._Duration
			End Get
			Set
				If ((Me._Duration = value)  _
							= false) Then
					Me.OnDurationChanging(value)
					Me.SendPropertyChanging
					Me._Duration = value
					Me.SendPropertyChanged("Duration")
					Me.OnDurationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Schedule_Booking", Storage:="_Bookings", ThisKey:="Id", OtherKey:="ScheduleId")>  _
		Public Property Bookings() As EntitySet(Of Booking)
			Get
				Return Me._Bookings
			End Get
			Set
				Me._Bookings.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Program_Schedule", Storage:="_Program", ThisKey:="ProgramId", OtherKey:="Id", IsForeignKey:=true)>  _
		Public Property Program() As Program
			Get
				Return Me._Program.Entity
			End Get
			Set
				Dim previousValue As Program = Me._Program.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Program.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Program.Entity = Nothing
						previousValue.Schedules.Remove(Me)
					End If
					Me._Program.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Schedules.Add(Me)
						Me._ProgramId = value.Id
					Else
						Me._ProgramId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Program")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Bookings(ByVal entity As Booking)
			Me.SendPropertyChanging
			entity.Schedule = Me
		End Sub
		
		Private Sub detach_Bookings(ByVal entity As Booking)
			Me.SendPropertyChanging
			entity.Schedule = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Brand")>  _
	Partial Public Class Brand
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Description As String
		
		Private _Keywords As String
		
		Private _URL As String
		
		Private _LogoImageID As System.Nullable(Of Integer)
		
		Private _Permalink As String
		
		Private _Products As EntitySet(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnLogoImageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLogoImageIDChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(255)")>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogoImageID", DbType:="Int")>  _
		Public Property LogoImageID() As System.Nullable(Of Integer)
			Get
				Return Me._LogoImageID
			End Get
			Set
				If (Me._LogoImageID.Equals(value) = false) Then
					Me.OnLogoImageIDChanging(value)
					Me.SendPropertyChanging
					Me._LogoImageID = value
					Me.SendPropertyChanged("LogoImageID")
					Me.OnLogoImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255)")>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Brand_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="BrandID")>  _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set
				Me._Products.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Brand = Me
		End Sub
		
		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Brand = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductRecomendation")>  _
	Partial Public Class ProductRecomendation
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductId As Integer
		
		Private _RecomendedProductId As Integer
		
		Private _Product As EntityRef(Of Product)
		
		Private _Product1 As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnRecomendedProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecomendedProductIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			Me._Product1 = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ProductId() As Integer
			Get
				Return Me._ProductId
			End Get
			Set
				If ((Me._ProductId = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIdChanging(value)
					Me.SendPropertyChanging
					Me._ProductId = value
					Me.SendPropertyChanged("ProductId")
					Me.OnProductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecomendedProductId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property RecomendedProductId() As Integer
			Get
				Return Me._RecomendedProductId
			End Get
			Set
				If ((Me._RecomendedProductId = value)  _
							= false) Then
					If Me._Product1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnRecomendedProductIdChanging(value)
					Me.SendPropertyChanging
					Me._RecomendedProductId = value
					Me.SendPropertyChanged("RecomendedProductId")
					Me.OnRecomendedProductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductRecomendation", Storage:="_Product", ThisKey:="ProductId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductRecomendations.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductRecomendations.Add(Me)
						Me._ProductId = value.ID
					Else
						Me._ProductId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductRecomendation1", Storage:="_Product1", ThisKey:="RecomendedProductId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product1() As Product
			Get
				Return Me._Product1.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product1.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product1.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product1.Entity = Nothing
						previousValue.ProductRecomendations1.Remove(Me)
					End If
					Me._Product1.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductRecomendations1.Add(Me)
						Me._RecomendedProductId = value.ID
					Else
						Me._RecomendedProductId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product1")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Category")>  _
	Partial Public Class Category
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _Name As String
		
		Private _Description As String
		
		Private _Keywords As String
		
		Private _Permalink As String
		
		Private _Details As String
		
		Private _BrowserTitle As String
		
		Private _ParentId As Integer
		
		Private _ProductCategories As EntitySet(Of ProductCategory)
		
		Private _Products As EntitySet(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnBrowserTitleChanging(value As String)
    End Sub
    Partial Private Sub OnBrowserTitleChanged()
    End Sub
    Partial Private Sub OnParentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProductCategories = New EntitySet(Of ProductCategory)(AddressOf Me.attach_ProductCategories, AddressOf Me.detach_ProductCategories)
			Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255)")>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrowserTitle", DbType:="NVarChar(255)")>  _
		Public Property BrowserTitle() As String
			Get
				Return Me._BrowserTitle
			End Get
			Set
				If (String.Equals(Me._BrowserTitle, value) = false) Then
					Me.OnBrowserTitleChanging(value)
					Me.SendPropertyChanging
					Me._BrowserTitle = value
					Me.SendPropertyChanged("BrowserTitle")
					Me.OnBrowserTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int NOT NULL")>  _
		Public Property ParentId() As Integer
			Get
				Return Me._ParentId
			End Get
			Set
				If ((Me._ParentId = value)  _
							= false) Then
					Me.OnParentIdChanging(value)
					Me.SendPropertyChanging
					Me._ParentId = value
					Me.SendPropertyChanged("ParentId")
					Me.OnParentIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ProductCategory", Storage:="_ProductCategories", ThisKey:="ID", OtherKey:="CategoryId")>  _
		Public Property ProductCategories() As EntitySet(Of ProductCategory)
			Get
				Return Me._ProductCategories
			End Get
			Set
				Me._ProductCategories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="CategoryID")>  _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set
				Me._Products.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging
			entity.Category = Me
		End Sub
		
		Private Sub detach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging
			entity.Category = Nothing
		End Sub
		
		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Category = Me
		End Sub
		
		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Category = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductOption")>  _
	Partial Public Class ProductOption
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Id As Integer
		
		Private _ProductId As Integer
		
		Private _Title As String
		
		Private _Description As String
		
		Private _ImageId As System.Nullable(Of Integer)
		
		Private _PriceA As Decimal
		
		Private _PriceB As Decimal
		
		Private _PriceC As Decimal
		
		Private _Group As String
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnImageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIdChanged()
    End Sub
    Partial Private Sub OnPriceAChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceAChanged()
    End Sub
    Partial Private Sub OnPriceBChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceBChanged()
    End Sub
    Partial Private Sub OnPriceCChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceCChanged()
    End Sub
    Partial Private Sub OnGroupChanging(value As String)
    End Sub
    Partial Private Sub OnGroupChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property Id() As Integer
			Get
				Return Me._Id
			End Get
			Set
				If ((Me._Id = value)  _
							= false) Then
					Me.OnIdChanging(value)
					Me.SendPropertyChanging
					Me._Id = value
					Me.SendPropertyChanged("Id")
					Me.OnIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int NOT NULL")>  _
		Public Property ProductId() As Integer
			Get
				Return Me._ProductId
			End Get
			Set
				If ((Me._ProductId = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIdChanging(value)
					Me.SendPropertyChanging
					Me._ProductId = value
					Me.SendPropertyChanged("ProductId")
					Me.OnProductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NChar(10)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageId", DbType:="Int")>  _
		Public Property ImageId() As System.Nullable(Of Integer)
			Get
				Return Me._ImageId
			End Get
			Set
				If (Me._ImageId.Equals(value) = false) Then
					Me.OnImageIdChanging(value)
					Me.SendPropertyChanging
					Me._ImageId = value
					Me.SendPropertyChanged("ImageId")
					Me.OnImageIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceA", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property PriceA() As Decimal
			Get
				Return Me._PriceA
			End Get
			Set
				If ((Me._PriceA = value)  _
							= false) Then
					Me.OnPriceAChanging(value)
					Me.SendPropertyChanging
					Me._PriceA = value
					Me.SendPropertyChanged("PriceA")
					Me.OnPriceAChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceB", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property PriceB() As Decimal
			Get
				Return Me._PriceB
			End Get
			Set
				If ((Me._PriceB = value)  _
							= false) Then
					Me.OnPriceBChanging(value)
					Me.SendPropertyChanging
					Me._PriceB = value
					Me.SendPropertyChanged("PriceB")
					Me.OnPriceBChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceC", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property PriceC() As Decimal
			Get
				Return Me._PriceC
			End Get
			Set
				If ((Me._PriceC = value)  _
							= false) Then
					Me.OnPriceCChanging(value)
					Me.SendPropertyChanging
					Me._PriceC = value
					Me.SendPropertyChanged("PriceC")
					Me.OnPriceCChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Group", DbType:="NVarChar(255)")>  _
		Public Property [Group]() As String
			Get
				Return Me._Group
			End Get
			Set
				If (String.Equals(Me._Group, value) = false) Then
					Me.OnGroupChanging(value)
					Me.SendPropertyChanging
					Me._Group = value
					Me.SendPropertyChanged("[Group]")
					Me.OnGroupChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductOption", Storage:="_Product", ThisKey:="ProductId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductOptions.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductOptions.Add(Me)
						Me._ProductId = value.ID
					Else
						Me._ProductId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductCategory")>  _
	Partial Public Class ProductCategory
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductId As Integer
		
		Private _CategoryId As Integer
		
		Private _Category As EntityRef(Of Category)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Category = CType(Nothing, EntityRef(Of Category))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ProductId() As Integer
			Get
				Return Me._ProductId
			End Get
			Set
				If ((Me._ProductId = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIdChanging(value)
					Me.SendPropertyChanging
					Me._ProductId = value
					Me.SendPropertyChanged("ProductId")
					Me.OnProductIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
		Public Property CategoryId() As Integer
			Get
				Return Me._CategoryId
			End Get
			Set
				If ((Me._CategoryId = value)  _
							= false) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIdChanging(value)
					Me.SendPropertyChanging
					Me._CategoryId = value
					Me.SendPropertyChanged("CategoryId")
					Me.OnCategoryIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_ProductCategory", Storage:="_Category", ThisKey:="CategoryId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set
				Dim previousValue As Category = Me._Category.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Category.Entity = Nothing
						previousValue.ProductCategories.Remove(Me)
					End If
					Me._Category.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductCategories.Add(Me)
						Me._CategoryId = value.ID
					Else
						Me._CategoryId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductCategory", Storage:="_Product", ThisKey:="ProductId", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductCategories.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductCategories.Add(Me)
						Me._ProductId = value.ID
					Else
						Me._ProductId = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
	Partial Public Class Product
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _SKU As String
		
		Private _Name As String
		
		Private _Details As String
		
		Private _Description As String
		
		Private _Keywords As String
		
		Private _PricingUnit As String
		
		Private _Cost As Decimal
		
		Private _Price As Decimal
		
		Private _PriceB As Decimal
		
		Private _PriceC As Decimal
		
		Private _ListPrice As Decimal
		
		Private _Discount As Decimal
		
		Private _Weight As Decimal
		
		Private _Length As Decimal
		
		Private _Width As Decimal
		
		Private _Height As Decimal
		
		Private _Active As Boolean
		
		Private _BrandID As Integer
		
		Private _CategoryID As Integer
		
		Private _DefaultImageID As Integer
		
		Private _HeaderImageID As Integer
		
		Private _TopSeller As Boolean
		
		Private _Clearance As Boolean
		
		Private _Membership As Boolean
		
		Private _Permalink As String
		
		Private _TrackInventory As Boolean
		
		Private _IsDigitalMedia As Boolean
		
		Private _Filename As String
		
		Private _ImageAlt As String
		
		Private _BrowserTitle As String
		
		Private _TestimonialId As System.Nullable(Of Integer)
		
		Private _ProductColors As EntitySet(Of ProductColor)
		
		Private _ProductImages As EntitySet(Of ProductImage)
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _ProductSizes As EntitySet(Of ProductSize)
		
		Private _ShoppingCarts As EntitySet(Of ShoppingCart)
		
		Private _Inventories As EntitySet(Of Inventory)
		
		Private _ProductReviews As EntitySet(Of ProductReview)
		
		Private _MenuCategoryItems As EntitySet(Of MenuCategoryItem)
		
		Private _BCRoomProducts As EntitySet(Of BCRoomProduct)
		
		Private _SalesRequests As EntitySet(Of SalesRequest)
		
		Private _ProductRecomendations As EntitySet(Of ProductRecomendation)
		
		Private _ProductRecomendations1 As EntitySet(Of ProductRecomendation)
		
		Private _ProductOptions As EntitySet(Of ProductOption)
		
		Private _ProductCategories As EntitySet(Of ProductCategory)
		
		Private _Brand As EntityRef(Of Brand)
		
		Private _Category As EntityRef(Of Category)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnPricingUnitChanging(value As String)
    End Sub
    Partial Private Sub OnPricingUnitChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnPriceBChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceBChanged()
    End Sub
    Partial Private Sub OnPriceCChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceCChanged()
    End Sub
    Partial Private Sub OnListPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnListPriceChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnLengthChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLengthChanged()
    End Sub
    Partial Private Sub OnWidthChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWidthChanged()
    End Sub
    Partial Private Sub OnHeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnBrandIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBrandIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnDefaultImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDefaultImageIDChanged()
    End Sub
    Partial Private Sub OnHeaderImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeaderImageIDChanged()
    End Sub
    Partial Private Sub OnTopSellerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTopSellerChanged()
    End Sub
    Partial Private Sub OnClearanceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnClearanceChanged()
    End Sub
    Partial Private Sub OnMembershipChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMembershipChanged()
    End Sub
    Partial Private Sub OnPermalinkChanging(value As String)
    End Sub
    Partial Private Sub OnPermalinkChanged()
    End Sub
    Partial Private Sub OnTrackInventoryChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTrackInventoryChanged()
    End Sub
    Partial Private Sub OnIsDigitalMediaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDigitalMediaChanged()
    End Sub
    Partial Private Sub OnFilenameChanging(value As String)
    End Sub
    Partial Private Sub OnFilenameChanged()
    End Sub
    Partial Private Sub OnImageAltChanging(value As String)
    End Sub
    Partial Private Sub OnImageAltChanged()
    End Sub
    Partial Private Sub OnBrowserTitleChanging(value As String)
    End Sub
    Partial Private Sub OnBrowserTitleChanged()
    End Sub
    Partial Private Sub OnTestimonialIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTestimonialIdChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._ProductColors = New EntitySet(Of ProductColor)(AddressOf Me.attach_ProductColors, AddressOf Me.detach_ProductColors)
			Me._ProductImages = New EntitySet(Of ProductImage)(AddressOf Me.attach_ProductImages, AddressOf Me.detach_ProductImages)
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._ProductSizes = New EntitySet(Of ProductSize)(AddressOf Me.attach_ProductSizes, AddressOf Me.detach_ProductSizes)
			Me._ShoppingCarts = New EntitySet(Of ShoppingCart)(AddressOf Me.attach_ShoppingCarts, AddressOf Me.detach_ShoppingCarts)
			Me._Inventories = New EntitySet(Of Inventory)(AddressOf Me.attach_Inventories, AddressOf Me.detach_Inventories)
			Me._ProductReviews = New EntitySet(Of ProductReview)(AddressOf Me.attach_ProductReviews, AddressOf Me.detach_ProductReviews)
			Me._MenuCategoryItems = New EntitySet(Of MenuCategoryItem)(AddressOf Me.attach_MenuCategoryItems, AddressOf Me.detach_MenuCategoryItems)
			Me._BCRoomProducts = New EntitySet(Of BCRoomProduct)(AddressOf Me.attach_BCRoomProducts, AddressOf Me.detach_BCRoomProducts)
			Me._SalesRequests = New EntitySet(Of SalesRequest)(AddressOf Me.attach_SalesRequests, AddressOf Me.detach_SalesRequests)
			Me._ProductRecomendations = New EntitySet(Of ProductRecomendation)(AddressOf Me.attach_ProductRecomendations, AddressOf Me.detach_ProductRecomendations)
			Me._ProductRecomendations1 = New EntitySet(Of ProductRecomendation)(AddressOf Me.attach_ProductRecomendations1, AddressOf Me.detach_ProductRecomendations1)
			Me._ProductOptions = New EntitySet(Of ProductOption)(AddressOf Me.attach_ProductOptions, AddressOf Me.detach_ProductOptions)
			Me._ProductCategories = New EntitySet(Of ProductCategory)(AddressOf Me.attach_ProductCategories, AddressOf Me.detach_ProductCategories)
			Me._Brand = CType(Nothing, EntityRef(Of Brand))
			Me._Category = CType(Nothing, EntityRef(Of Category))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="NVarChar(50)")>  _
		Public Property SKU() As String
			Get
				Return Me._SKU
			End Get
			Set
				If (String.Equals(Me._SKU, value) = false) Then
					Me.OnSKUChanging(value)
					Me.SendPropertyChanging
					Me._SKU = value
					Me.SendPropertyChanged("SKU")
					Me.OnSKUChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Details() As String
			Get
				Return Me._Details
			End Get
			Set
				If (String.Equals(Me._Details, value) = false) Then
					Me.OnDetailsChanging(value)
					Me.SendPropertyChanging
					Me._Details = value
					Me.SendPropertyChanged("Details")
					Me.OnDetailsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(255)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PricingUnit", DbType:="NVarChar(50)")>  _
		Public Property PricingUnit() As String
			Get
				Return Me._PricingUnit
			End Get
			Set
				If (String.Equals(Me._PricingUnit, value) = false) Then
					Me.OnPricingUnitChanging(value)
					Me.SendPropertyChanging
					Me._PricingUnit = value
					Me.SendPropertyChanged("PricingUnit")
					Me.OnPricingUnitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Cost() As Decimal
			Get
				Return Me._Cost
			End Get
			Set
				If ((Me._Cost = value)  _
							= false) Then
					Me.OnCostChanging(value)
					Me.SendPropertyChanging
					Me._Cost = value
					Me.SendPropertyChanged("Cost")
					Me.OnCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property Price() As Decimal
			Get
				Return Me._Price
			End Get
			Set
				If ((Me._Price = value)  _
							= false) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceB", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property PriceB() As Decimal
			Get
				Return Me._PriceB
			End Get
			Set
				If ((Me._PriceB = value)  _
							= false) Then
					Me.OnPriceBChanging(value)
					Me.SendPropertyChanging
					Me._PriceB = value
					Me.SendPropertyChanged("PriceB")
					Me.OnPriceBChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceC", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property PriceC() As Decimal
			Get
				Return Me._PriceC
			End Get
			Set
				If ((Me._PriceC = value)  _
							= false) Then
					Me.OnPriceCChanging(value)
					Me.SendPropertyChanging
					Me._PriceC = value
					Me.SendPropertyChanged("PriceC")
					Me.OnPriceCChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Decimal(18,2) NOT NULL")>  _
		Public Property ListPrice() As Decimal
			Get
				Return Me._ListPrice
			End Get
			Set
				If ((Me._ListPrice = value)  _
							= false) Then
					Me.OnListPriceChanging(value)
					Me.SendPropertyChanging
					Me._ListPrice = value
					Me.SendPropertyChanged("ListPrice")
					Me.OnListPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Discount() As Decimal
			Get
				Return Me._Discount
			End Get
			Set
				If ((Me._Discount = value)  _
							= false) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Weight() As Decimal
			Get
				Return Me._Weight
			End Get
			Set
				If ((Me._Weight = value)  _
							= false) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Length", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Length() As Decimal
			Get
				Return Me._Length
			End Get
			Set
				If ((Me._Length = value)  _
							= false) Then
					Me.OnLengthChanging(value)
					Me.SendPropertyChanging
					Me._Length = value
					Me.SendPropertyChanged("Length")
					Me.OnLengthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Width", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Width() As Decimal
			Get
				Return Me._Width
			End Get
			Set
				If ((Me._Width = value)  _
							= false) Then
					Me.OnWidthChanging(value)
					Me.SendPropertyChanging
					Me._Width = value
					Me.SendPropertyChanged("Width")
					Me.OnWidthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Height", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Height() As Decimal
			Get
				Return Me._Height
			End Get
			Set
				If ((Me._Height = value)  _
							= false) Then
					Me.OnHeightChanging(value)
					Me.SendPropertyChanging
					Me._Height = value
					Me.SendPropertyChanged("Height")
					Me.OnHeightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
		Public Property Active() As Boolean
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrandID", DbType:="Int NOT NULL")>  _
		Public Property BrandID() As Integer
			Get
				Return Me._BrandID
			End Get
			Set
				If ((Me._BrandID = value)  _
							= false) Then
					If Me._Brand.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnBrandIDChanging(value)
					Me.SendPropertyChanging
					Me._BrandID = value
					Me.SendPropertyChanged("BrandID")
					Me.OnBrandIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")>  _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set
				If ((Me._CategoryID = value)  _
							= false) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultImageID", DbType:="Int NOT NULL")>  _
		Public Property DefaultImageID() As Integer
			Get
				Return Me._DefaultImageID
			End Get
			Set
				If ((Me._DefaultImageID = value)  _
							= false) Then
					Me.OnDefaultImageIDChanging(value)
					Me.SendPropertyChanging
					Me._DefaultImageID = value
					Me.SendPropertyChanged("DefaultImageID")
					Me.OnDefaultImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderImageID", DbType:="Int NOT NULL")>  _
		Public Property HeaderImageID() As Integer
			Get
				Return Me._HeaderImageID
			End Get
			Set
				If ((Me._HeaderImageID = value)  _
							= false) Then
					Me.OnHeaderImageIDChanging(value)
					Me.SendPropertyChanging
					Me._HeaderImageID = value
					Me.SendPropertyChanged("HeaderImageID")
					Me.OnHeaderImageIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TopSeller", DbType:="Bit NOT NULL")>  _
		Public Property TopSeller() As Boolean
			Get
				Return Me._TopSeller
			End Get
			Set
				If ((Me._TopSeller = value)  _
							= false) Then
					Me.OnTopSellerChanging(value)
					Me.SendPropertyChanging
					Me._TopSeller = value
					Me.SendPropertyChanged("TopSeller")
					Me.OnTopSellerChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Clearance", DbType:="Bit NOT NULL")>  _
		Public Property Clearance() As Boolean
			Get
				Return Me._Clearance
			End Get
			Set
				If ((Me._Clearance = value)  _
							= false) Then
					Me.OnClearanceChanging(value)
					Me.SendPropertyChanging
					Me._Clearance = value
					Me.SendPropertyChanged("Clearance")
					Me.OnClearanceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Membership", DbType:="Bit NOT NULL")>  _
		Public Property Membership() As Boolean
			Get
				Return Me._Membership
			End Get
			Set
				If ((Me._Membership = value)  _
							= false) Then
					Me.OnMembershipChanging(value)
					Me.SendPropertyChanging
					Me._Membership = value
					Me.SendPropertyChanged("Membership")
					Me.OnMembershipChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Permalink", DbType:="NVarChar(255)")>  _
		Public Property Permalink() As String
			Get
				Return Me._Permalink
			End Get
			Set
				If (String.Equals(Me._Permalink, value) = false) Then
					Me.OnPermalinkChanging(value)
					Me.SendPropertyChanging
					Me._Permalink = value
					Me.SendPropertyChanged("Permalink")
					Me.OnPermalinkChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackInventory", DbType:="Bit NOT NULL")>  _
		Public Property TrackInventory() As Boolean
			Get
				Return Me._TrackInventory
			End Get
			Set
				If ((Me._TrackInventory = value)  _
							= false) Then
					Me.OnTrackInventoryChanging(value)
					Me.SendPropertyChanging
					Me._TrackInventory = value
					Me.SendPropertyChanged("TrackInventory")
					Me.OnTrackInventoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDigitalMedia", DbType:="Bit NOT NULL")>  _
		Public Property IsDigitalMedia() As Boolean
			Get
				Return Me._IsDigitalMedia
			End Get
			Set
				If ((Me._IsDigitalMedia = value)  _
							= false) Then
					Me.OnIsDigitalMediaChanging(value)
					Me.SendPropertyChanging
					Me._IsDigitalMedia = value
					Me.SendPropertyChanged("IsDigitalMedia")
					Me.OnIsDigitalMediaChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Filename", DbType:="NVarChar(255)")>  _
		Public Property Filename() As String
			Get
				Return Me._Filename
			End Get
			Set
				If (String.Equals(Me._Filename, value) = false) Then
					Me.OnFilenameChanging(value)
					Me.SendPropertyChanging
					Me._Filename = value
					Me.SendPropertyChanged("Filename")
					Me.OnFilenameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageAlt", DbType:="NVarChar(255)")>  _
		Public Property ImageAlt() As String
			Get
				Return Me._ImageAlt
			End Get
			Set
				If (String.Equals(Me._ImageAlt, value) = false) Then
					Me.OnImageAltChanging(value)
					Me.SendPropertyChanging
					Me._ImageAlt = value
					Me.SendPropertyChanged("ImageAlt")
					Me.OnImageAltChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BrowserTitle", DbType:="NVarChar(255)")>  _
		Public Property BrowserTitle() As String
			Get
				Return Me._BrowserTitle
			End Get
			Set
				If (String.Equals(Me._BrowserTitle, value) = false) Then
					Me.OnBrowserTitleChanging(value)
					Me.SendPropertyChanging
					Me._BrowserTitle = value
					Me.SendPropertyChanged("BrowserTitle")
					Me.OnBrowserTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestimonialId", DbType:="Int")>  _
		Public Property TestimonialId() As System.Nullable(Of Integer)
			Get
				Return Me._TestimonialId
			End Get
			Set
				If (Me._TestimonialId.Equals(value) = false) Then
					Me.OnTestimonialIdChanging(value)
					Me.SendPropertyChanging
					Me._TestimonialId = value
					Me.SendPropertyChanged("TestimonialId")
					Me.OnTestimonialIdChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductColor", Storage:="_ProductColors", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property ProductColors() As EntitySet(Of ProductColor)
			Get
				Return Me._ProductColors
			End Get
			Set
				Me._ProductColors.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductImage", Storage:="_ProductImages", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property ProductImages() As EntitySet(Of ProductImage)
			Get
				Return Me._ProductImages
			End Get
			Set
				Me._ProductImages.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductSize", Storage:="_ProductSizes", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property ProductSizes() As EntitySet(Of ProductSize)
			Get
				Return Me._ProductSizes
			End Get
			Set
				Me._ProductSizes.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ShoppingCart", Storage:="_ShoppingCarts", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property ShoppingCarts() As EntitySet(Of ShoppingCart)
			Get
				Return Me._ShoppingCarts
			End Get
			Set
				Me._ShoppingCarts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Inventory", Storage:="_Inventories", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property Inventories() As EntitySet(Of Inventory)
			Get
				Return Me._Inventories
			End Get
			Set
				Me._Inventories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductReview", Storage:="_ProductReviews", ThisKey:="ID", OtherKey:="productId")>  _
		Public Property ProductReviews() As EntitySet(Of ProductReview)
			Get
				Return Me._ProductReviews
			End Get
			Set
				Me._ProductReviews.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MenuCategoryItem", Storage:="_MenuCategoryItems", ThisKey:="ID", OtherKey:="productID")>  _
		Public Property MenuCategoryItems() As EntitySet(Of MenuCategoryItem)
			Get
				Return Me._MenuCategoryItems
			End Get
			Set
				Me._MenuCategoryItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_BCRoomProduct", Storage:="_BCRoomProducts", ThisKey:="ID", OtherKey:="ProductID")>  _
		Public Property BCRoomProducts() As EntitySet(Of BCRoomProduct)
			Get
				Return Me._BCRoomProducts
			End Get
			Set
				Me._BCRoomProducts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_SalesRequest", Storage:="_SalesRequests", ThisKey:="ID", OtherKey:="ProductId")>  _
		Public Property SalesRequests() As EntitySet(Of SalesRequest)
			Get
				Return Me._SalesRequests
			End Get
			Set
				Me._SalesRequests.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductRecomendation", Storage:="_ProductRecomendations", ThisKey:="ID", OtherKey:="ProductId")>  _
		Public Property ProductRecomendations() As EntitySet(Of ProductRecomendation)
			Get
				Return Me._ProductRecomendations
			End Get
			Set
				Me._ProductRecomendations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductRecomendation1", Storage:="_ProductRecomendations1", ThisKey:="ID", OtherKey:="RecomendedProductId")>  _
		Public Property ProductRecomendations1() As EntitySet(Of ProductRecomendation)
			Get
				Return Me._ProductRecomendations1
			End Get
			Set
				Me._ProductRecomendations1.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductOption", Storage:="_ProductOptions", ThisKey:="ID", OtherKey:="ProductId")>  _
		Public Property ProductOptions() As EntitySet(Of ProductOption)
			Get
				Return Me._ProductOptions
			End Get
			Set
				Me._ProductOptions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductCategory", Storage:="_ProductCategories", ThisKey:="ID", OtherKey:="ProductId")>  _
		Public Property ProductCategories() As EntitySet(Of ProductCategory)
			Get
				Return Me._ProductCategories
			End Get
			Set
				Me._ProductCategories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Brand_Product", Storage:="_Brand", ThisKey:="BrandID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Brand() As Brand
			Get
				Return Me._Brand.Entity
			End Get
			Set
				Dim previousValue As Brand = Me._Brand.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Brand.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Brand.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Brand.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Products.Add(Me)
						Me._BrandID = value.ID
					Else
						Me._BrandID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Brand")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set
				Dim previousValue As Category = Me._Category.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Category.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Category.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Products.Add(Me)
						Me._CategoryID = value.ID
					Else
						Me._CategoryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_ProductColors(ByVal entity As ProductColor)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductColors(ByVal entity As ProductColor)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductImages(ByVal entity As ProductImage)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductImages(ByVal entity As ProductImage)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductSizes(ByVal entity As ProductSize)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductSizes(ByVal entity As ProductSize)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ShoppingCarts(ByVal entity As ShoppingCart)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_Inventories(ByVal entity As Inventory)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductReviews(ByVal entity As ProductReview)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductReviews(ByVal entity As ProductReview)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_MenuCategoryItems(ByVal entity As MenuCategoryItem)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_MenuCategoryItems(ByVal entity As MenuCategoryItem)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_BCRoomProducts(ByVal entity As BCRoomProduct)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_BCRoomProducts(ByVal entity As BCRoomProduct)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_SalesRequests(ByVal entity As SalesRequest)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_SalesRequests(ByVal entity As SalesRequest)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductRecomendations(ByVal entity As ProductRecomendation)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductRecomendations(ByVal entity As ProductRecomendation)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductRecomendations1(ByVal entity As ProductRecomendation)
			Me.SendPropertyChanging
			entity.Product1 = Me
		End Sub
		
		Private Sub detach_ProductRecomendations1(ByVal entity As ProductRecomendation)
			Me.SendPropertyChanging
			entity.Product1 = Nothing
		End Sub
		
		Private Sub attach_ProductOptions(ByVal entity As ProductOption)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductOptions(ByVal entity As ProductOption)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
	End Class
	
	Partial Public Class sp_GetSimpleOrdersResult
		
		Private _ID As System.Nullable(Of Integer)
		
		Private _OrderDate As System.Nullable(Of Date)
		
		Private _ApprovalState As System.Nullable(Of Integer)
		
		Private _PaymentType As System.Nullable(Of Integer)
		
		Private _Shipped As System.Nullable(Of Boolean)
		
		Private _UserID As System.Nullable(Of Integer)
		
		Private _User As String
		
		Private _Email As String
		
		Private _Items As System.Nullable(Of Integer)
		
		Private _SubTotal As System.Nullable(Of Decimal)
		
		Private _ShipCharge As System.Nullable(Of Decimal)
		
		Private _Taxes As System.Nullable(Of Double)
		
		Private _Total As System.Nullable(Of Double)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int")>  _
		Public Property ID() As System.Nullable(Of Integer)
			Get
				Return Me._ID
			End Get
			Set
				If (Me._ID.Equals(value) = false) Then
					Me._ID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>  _
		Public Property OrderDate() As System.Nullable(Of Date)
			Get
				Return Me._OrderDate
			End Get
			Set
				If (Me._OrderDate.Equals(value) = false) Then
					Me._OrderDate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovalState", DbType:="Int")>  _
		Public Property ApprovalState() As System.Nullable(Of Integer)
			Get
				Return Me._ApprovalState
			End Get
			Set
				If (Me._ApprovalState.Equals(value) = false) Then
					Me._ApprovalState = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentType", DbType:="Int")>  _
		Public Property PaymentType() As System.Nullable(Of Integer)
			Get
				Return Me._PaymentType
			End Get
			Set
				If (Me._PaymentType.Equals(value) = false) Then
					Me._PaymentType = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Shipped", DbType:="Bit")>  _
		Public Property Shipped() As System.Nullable(Of Boolean)
			Get
				Return Me._Shipped
			End Get
			Set
				If (Me._Shipped.Equals(value) = false) Then
					Me._Shipped = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
		Public Property UserID() As System.Nullable(Of Integer)
			Get
				Return Me._UserID
			End Get
			Set
				If (Me._UserID.Equals(value) = false) Then
					Me._UserID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[User]", Storage:="_User", DbType:="NVarChar(152)")>  _
		Public Property User() As String
			Get
				Return Me._User
			End Get
			Set
				If (String.Equals(Me._User, value) = false) Then
					Me._User = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(255)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Items", DbType:="Int")>  _
		Public Property Items() As System.Nullable(Of Integer)
			Get
				Return Me._Items
			End Get
			Set
				If (Me._Items.Equals(value) = false) Then
					Me._Items = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Decimal(0,0)")>  _
		Public Property SubTotal() As System.Nullable(Of Decimal)
			Get
				Return Me._SubTotal
			End Get
			Set
				If (Me._SubTotal.Equals(value) = false) Then
					Me._SubTotal = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCharge", DbType:="Decimal(0,0)")>  _
		Public Property ShipCharge() As System.Nullable(Of Decimal)
			Get
				Return Me._ShipCharge
			End Get
			Set
				If (Me._ShipCharge.Equals(value) = false) Then
					Me._ShipCharge = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Taxes", DbType:="Float")>  _
		Public Property Taxes() As System.Nullable(Of Double)
			Get
				Return Me._Taxes
			End Get
			Set
				If (Me._Taxes.Equals(value) = false) Then
					Me._Taxes = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Float")>  _
		Public Property Total() As System.Nullable(Of Double)
			Get
				Return Me._Total
			End Get
			Set
				If (Me._Total.Equals(value) = false) Then
					Me._Total = value
				End If
			End Set
		End Property
	End Class
End Namespace
